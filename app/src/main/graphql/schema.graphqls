"""
Represents `true` or `false` values.
"""
scalar Boolean

"""
Represents textual data as UTF-8 character sequences. This type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The query root of the Kickstarter GraphQL interface.
"""
type Query {
  """
  Fetches all saved searches user in provided origin
  """
  backerReportSavedSearchSegments(projectId: ID!): [SavedSearchSegment!]

  """
  Fetches a backing given its id.
  """
  backing(id: ID!): Backing

  """
  Languages that are eligible for creating captions for video tracks
  """
  captionLanguages: [CaptionLanguage!]!

  """
  Fetch a project category by param..
  """
  category(param: String!): Category

  """
  Fetches a checkout given its id.
  """
  checkout(id: ID!): Checkout

  """
  Extracts claims from text.
  """
  claims(text: String!, useStanford: Boolean): Claims

  """
  The visitor's chosen currency
  """
  currentCurrency: CurrencyCode!

  """
  Default tax categories managed by Kickstarter
  """
  defaultTaxCategories: [TaxCategory!]!

  editorial("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, slug: String!, revision: String, admin: Boolean = false): EditorialConnection

  editorialPage(slug: String!): EditorialPage

  editorialPageForAdmin(slug: String!): EditorialPageForAdmin

  editorialPages("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, search: String, pageType: EditorialPageType, sortField: EditorialPageSortField, sortDirection: EditorialPageSortDirection): EditorialPageForAdminConnection

  editorialRevision(uuid: String!): EditorialRevision

  editorialRevisionForAdmin(uuid: String!): EditorialRevisionForAdmin

  """
  Fetches a address given its id.
  """
  fulfillmentAddress(id: ID!): Address

  """
  Currencies a creator can choose between for collecting pledges on a project
  """
  fundingCurrencies: [FundingCurrency!]!

  """
  Fetches an item given its relay id.
  """
  item(id: ID!): RewardItem

  """
  Get a kickstarter fact
  """
  ksrFact: KsrFact

  """
  Searches locations.
  """
  locations("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Location search term." term: String, "Only return locations assignable (to a Project or User)." assignable: Boolean, "Only return locations for searching Projects." searchable: Boolean, "Latitude of the location." lat: Float, "Longitude of the location." long: Float, "Maximum distance in kilometers from the given coordinates." radius: Float, "Use the session location to search for locations." useSessionLocation: Boolean, "Filter by coordinates." filterByCoordinates: Boolean, "Filter by discoverable." discoverable: Boolean): LocationsConnection

  """
  You.
  """
  me: User

  """
  Fetches an object given its ID.
  """
  node("ID of the object." id: ID!): Node

  """
  Fetches an order given its id.
  """
  order(id: ID!): Order!

  photoForEditor(id: ID!): Photo

  pledgeManagerOptOutReasons: [OptOutReason!]!

  """
  Provides an overview of pledge projects
  """
  pledgeProjectsOverview("Sort option as a string." sort: BackingsDashboardSortOptions = RELEVANCY, "All filter criteria for pledge projects." filters: PledgeProjectsOverviewFilterInput): PledgeProjectsOverview

  """
  Fetches a post given its ID.
  """
  post(id: ID!): Postable

  """
  Fetches a project given its slug or pid.
  """
  project(slug: String, pid: Int): Project

  """
  Get some projects
  """
  projects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Get projects backed by the current user." backed: Boolean, "Get projects where the current user is a collaborator." collaborated: Boolean, "Get projects in only this category." categoryId: String, "Get projects created by the current user." created: Boolean, "social (backed by people I'm following)." following: Boolean, "Get projects with a USD goal amount in this bucket." goal: GoalBuckets, "Get projects from this location." locationId: ID, "Get projects with a USD pledged amount in this bucket." pledged: PledgedBuckets, "Get projects with a raised percent in this bucket." raised: RaisedBuckets, "Get projects recommended for the current user." recommended: Boolean, "The recommendations models to use" recommendationsModels: [RecommendationsModel!], "The source for recommendations." recommendationsSource: [RecommendationsSource!], "Seed for ordering the projects" seed: Int, "Find projects similar to the given project by pid." similarToPid: String, "Find projects similar to the given project term." similarTo: String, "The sort order for returned projects." sort: ProjectSort, "Get project selected as staff picks." staffPicks: Boolean, "Get projects starred by the current user." starred: Boolean, "Get projects with this state." state: PublicProjectState, "Get projects with this tag." tagId: Int, "Project search term." term: String, "A list of pids corresponding to projects to be excluded from the results" excludePids: [Int!], "Get projects with deadlines after this date" deadlineAfter: DateTime, "Get projects with deadlines before this date" deadlineBefore: DateTime, "Latitude of the location." lat: Float, "Longitude of the location." long: Float, "Maximum distance in kilometers from the given coordinates." radius: Float, "Use the session location to search for locations." useSessionLocation: Boolean, "Filter by coordinates." filterByCoordinates: Boolean): ProjectsConnectionWithTotalCount

  """
  Editorialized quiz projects for the taste profile quiz.
  """
  quizProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Exclude certain quiz projects from the results" excludeQuizProjectIds: [ID!]): QuizProjectsConnection!

  """
  Fetches a refund given its id.
  """
  refund(id: ID!): Refund!

  """
  Fetches a refund checkout given its id.
  """
  refundCheckout(id: ID!): RefundCheckout

  """
  Regional tax authorities
  """
  regionalAuthorities(country: String!): [Location!]!

  reward(id: ID!): Reward

  """
  Root project categories.
  """
  rootCategories: [Category!]!

  """
  Country locations for shipping rewards
  """
  shippingCountryLocations: [Location!]!

  """
  Regional locations for shipping rewards
  """
  shippingRegionalLocations: [Location!]!

  """
  Root location for shipping rewards
  """
  shippingRoot: Location!

  """
  Countries that can launch projects.
  """
  supportedCountries: [Country!]!

  """
  Tags.
  """
  tags("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Scoped to a provided scope" scope: TagScope!): TagsConnection

  trackBackgroundJobProgress(jobName: String!, projectId: ID!): BackgroundJobProgress!

  """
  Fetches a project update given its ID.
  """
  update(id: ID!): FreeformPost @deprecated(reason: "Use post field instead")

  """
  The maximum file size of an upload by type.
  """
  uploadLimit("The type of file we are checking the upload limit of." filetype: UploadLimitFiletype!): UploadLimit!

  """
  How USD currencies should be rendered, based on user's location
  """
  usdType: UsdType

  """
  Validates a digital resource CSV file
  """
  validateDigitalResourceCsv(s3Key: String!, projectId: ID!, searchQuery: JSON): ValidateDigitalResource!

  """
  Countries that are visible to the current user. This may include countries that cannot launch projects.
  """
  visibleCountries: [Country!]!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Represents a unique identifier that is Base64 obfuscated. It is often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"VXNlci0xMA=="`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
A member of Kickstarter.
"""
type User implements Node {
  """
  A user's active backings of live projects
  """
  activeBackings("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserBackingsConnection!

  """
  Projects a user has created or is an active collaborator on
  """
  activeProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserActiveProjectsConnection

  """
  This user's saved shipping addresses
  """
  addresses("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): AddressConnection

  """
  Indicates whether or not the user allows other Kickstarter users to follow them
  """
  allowsFollows: Boolean!

  """
  Projects a user has backed.
  """
  backedProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserBackedProjectsConnection

  """
  Projects a user has backed, including finalized dummy backings
  """
  backedProjectsWithDummy("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserBackedProjectsConnection

  """
  Count of pledges with pending action
  """
  backingActionCount: Int

  """
  A user's backings.
  """
  backings("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filter backings to only those with this status" status: BackingState): UserBackingsConnection

  """
  Number of backings for this user.
  """
  backingsCount: Int!

  """
  A description of the user's background.
  """
  biography: String

  """
  List of users blocked by current user
  """
  blockedUsers: [User!]

  """
  Whether or not the user can curate pages
  """
  canCurate: Boolean

  """
  Whether user can see the confirmation modal that appears after the user likes or dislike a project for the first time
  """
  canSeeConfirmSignalModal: Boolean

  """
  Whether user can see the confirmation modal that appears after the user watches a project for the first time
  """
  canSeeConfirmWatchModal: Boolean

  """
  Whether user can see PYL toast notification
  """
  canSeePylToast: Boolean

  """
  Whether user can see the reward images toast notification that appears on build pages
  """
  canSeeRewardImagesToast: Boolean

  """
  Whether user can see the taste profile toast notification that appears on the thanks page
  """
  canSeeTasteProfileToast: Boolean

  """
  The user's chosen currency
  """
  chosenCurrency: String

  """
  Conversations the user had
  """
  conversations("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "The mailbox" mailbox: MailboxType, "The project id" project_id: String): UserConversationsConnection

  """
  Projects a user has created.
  """
  createdProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Column to order the list of projects by" orderBy: String, "Order in ascending or descending order" order: OrderDirection): UserCreatedProjectsConnection

  """
  Pages curated by the user
  """
  curatedPages("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserCuratedPagesConnection

  """
  Digital Access Resources provided by a creator to fulfill digital rewards
  """
  digitalAccessResources("The project for which the digital reward was provided" pid: Int!): [DigitalAccessResource!]!

  """
  A user's email address.
  """
  email: String

  enabledFeatures: [Feature!]!

  """
  Users following a user.
  """
  followers("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserFollowersConnection

  """
  Users a user is following.
  """
  following("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserFollowingConnection

  """
  Projects a user has launched that are successful,
            but have not completed fulfillment
  """
  fulfillingProjects: [Project!]!

  """
  If the user has uploaded an avatar.
  """
  hasImage: Boolean!

  """
  Whether or not the user has a password.
  """
  hasPassword: Boolean

  """
  Whether a user has their slug set.
  """
  hasSlug: Boolean!

  """
  Whether or not a user has unread messages.
  """
  hasUnreadMessages: Boolean

  """
  Whether or not a user has unseen activity.
  """
  hasUnseenActivity: Boolean

  """
  Whether or not a user has unseen saved projects activity.
  """
  hasUnseenSavedProjectsActivity: Boolean

  """
  The highest sentiment for successful projects for a user
  """
  highestProjectSentiment: Float

  id: ID!

  """
  The user's avatar.
  """
  imageUrl("Whether or not to blur the image." blur: Boolean, "The width of the image in pixels." width: Int!): String!

  """
  Projects a user has been invited to collaborate on
  """
  invitedProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserInvitedProjectsConnection

  """
  Whether or not the user has authenticated with Apple.
  """
  isAppleConnected: Boolean

  """
  Whether the user (as a creator) is a Backer Favorite
  """
  isBackerFavorite: Boolean!

  """
  Is user blocked by current user
  """
  isBlocked: Boolean

  """
  Whether a user is a creator of any project
  """
  isCreator: Boolean

  """
  Whether a user's email address is deliverable
  """
  isDeliverable: Boolean

  """
  Whether or not the user's email is verified.
  """
  isEmailVerified: Boolean

  """
  Whether or not the user is connected to Facebook.
  """
  isFacebookConnected: Boolean

  """
  Whether or not you are following the user.
  """
  isFollowing: Boolean!

  """
  Whether a KSR admin is ghosting as another user
  """
  isGhosting: Boolean

  """
  Whether or not you are a KSR admin.
  """
  isKsrAdmin: Boolean

  """
  Whether the user is registered
  """
  isRegistered: Boolean!

  """
  Whether the user can create SEPA account payment sources
  """
  isSepaEligible: Boolean!

  """
  Whether a user's entered slug is valid.
  """
  isSlugValid("The user's entered slug." slug: String!): Validation!

  """
  Whether or not the user is either Facebook connected or has follows/followings.
  """
  isSocializing: Boolean

  """
  Whether the user is a superbacker
  """
  isSuperbacker: Boolean!

  """
  The timestamp of when the user joined Kickstarter
  """
  joinedOn: ISO8601DateTime!

  """
  The last time a user logged in, time since epoch
  """
  lastLogin: DateTime

  """
  The most recent successful project that has a positive sentiment and a qualifying backer coverage rate
  """
  latestBackerFavoriteProject: Project

  """
  Projects a user has launched.
  """
  launchedProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "A list of pids corresponding to projects to be excluded from the results" excludePids: [Int!], "Column to order the list of projects by" orderBy: String, "Order in ascending or descending order" order: OrderDirection): ProjectsConnectionWithTotalCount

  """
  Where the user is based.
  """
  location: Location

  """
  Projects the user has collaborated on.
  """
  membershipProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): MembershipProjectsConnection

  """
  The user's provided name.
  """
  name: String!

  """
  Does the user to refresh their facebook token?
  """
  needsFreshFacebookToken: Boolean

  """
  Which newsleters are the users subscribed to
  """
  newsletterSubscriptions: NewsletterSubscriptions

  """
  All of a user's notifications
  """
  notifications: [Notification!]

  """
  Is the user opted out from receiving recommendations
  """
  optedOutOfRecommendations: Boolean

  """
  Organizations a user is a member of
  """
  organizations("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filter organizations by membership state." state: OrganizationMembershipState): UserOrganizationsConnection

  """
  Whether backer has any action in PPO
  """
  ppoHasAction: Boolean

  """
  A user's project notification settings
  """
  projectNotifications: [Notification!]

  """
  Projects a user has saved.
  """
  savedProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filter projects by publically accessible state." state: PublicProjectState, "Get saved projects with deadlines after this date" deadlineAfter: DateTime, "Get saved projects with deadlines before this date" deadlineBefore: DateTime, "Get saved projects that are upcoming" upcoming: Boolean, "Get saved projects that have launched" launched: Boolean): UserSavedProjectsConnection

  """
  Is the user's profile public
  """
  showPublicProfile: Boolean

  """
  The user's slug.
  """
  slug: String!

  """
  SEPA accounts stored for this user.
  """
  storedBankAccounts("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Should expired accounts be included." includeExpired: Boolean): BankAccountConnection

  """
  Stored Cards
  """
  storedCards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserCreditCardTypeConnection

  """
  A user's backings of successful projects
  """
  successfulBackings("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserBackingsConnection!

  """
  Projects a user has launched that are successful.
  """
  successfulProjects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): ProjectsConnectionWithTotalCount

  """
  This user's survey responses
  """
  surveyResponses("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filter by projects that have or have not been answered." answered: Boolean): SurveyResponsesConnection

  """
  The total number of backers across all the user's projects
  """
  totalBackersAcrossProjects: Int!

  """
  The total number of projects the user has created that are staff picked
  """
  totalProjectsWeLove: Int!

  """
  A user's uid
  """
  uid: String!

  """
  A user's backings that are cancelled or for unsuccessful projects
  """
  unsuccessfulBackings("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserBackingsConnection!

  """
  A URL to the user's profile.
  """
  url: String!

  """
  Details about a user's restrictions
  """
  userRestrictions: [UserRestriction!]

  """
  List of VAT ids used by the user
  """
  vatNumbers: [String!]!

  """
  A user's websites
  """
  websites: [UserUrl]
}

"""
The list of available public features
"""
enum Feature {
  device_components

  show_posts_feed

  ios_crashlytics

  ios_mixpanel

  ios_new_relic

  ios_hockey_app

  ios_koala

  ios_i18n

  ios_tappable_category_location

  ios_favorite_categories

  ios_wh_tout

  ios_qualtrics

  ios_native_checkout

  ios_native_checkout_pledge_view

  ios_live_streams

  ios_live_stream_discovery

  ios_live_stream_chat

  ios_scroll_output_observe_for_ui

  ios_backer_dashboard

  ios_email_verification_flow

  ios_email_verification_skip

  ios_segment

  ios_braze

  android_segment

  android_braze

  native_creator_breakdown_chart

  identity_verification_project_overview

  message_archiving

  message_spam

  emoji_locale

  default_to_campaign_on_mobile

  pinned_posts_on_feed

  image_uploader_alt_text

  rich_text_embedifier

  admin_checkout_debugger

  accounts_upgrade

  ksr10_build_overview

  me_generative_art

  project_build_rewards_explorer

  project_build_zendesk

  project_build_milestones

  user_menu_draft_project

  make_100_2020

  funding_sheet

  qualtrics

  track_define_namespace

  how_it_works

  disable_manual_create_stripe_elements_postal_code

  project_update_requests

  project_header_media_carousel_hero

  PL

  GR

  SI

  featured_project_mobile_optimizations

  IBAN_flexibility

  inside_voices_footer

  stacked_recs_on_mobile

  project_prelaunch_summaries

  ca_currency_selector

  ch_currency_selector

  dk_currency_selector

  no_currency_selector

  pl_usd_currency_2025

  sg_usd_currency_2025

  se_currency_selector

  datalake_fe_events

  creator_demographics_survey

  save_project_experiment

  segment_tracking_events

  segment_hide_project_deadline_property

  web_error_on_retry_of_failed_3ds_backing

  hide_facebook_login_button_2022

  creator_onboarding_flow_2021

  updated_risks_flow

  payment_element_project_build_2022

  hk_bank_account_holder_name

  creator_osat_survey_2022

  uk_created_projects_accept_usd_currency

  enable_spotlight_bg_image

  ecovadis_component_2023

  web_braze

  ckeditor_project_updates

  payments_stripe_link_on_checkout

  address_collection_2024

  backer_report_update_2024

  delay_backer_trust_module_2024

  reset_backer_survey_2024

  pledge_projects_overview_2024

  pledge_projects_overview_ios_2024

  prelaunch_story_editor

  prelaunch_story_exception

  creator_nav_refresh

  sku_editing_2024

  superbacker_progress

  backers_can_choose_plot_v1

  sepa_debit_payment_element

  trust_and_safety_project_banner

  notification_banner_update_2024

  react_backed_projects

  copy_addons

  KDS_messages_app

  KDS_messages_app_backer_filter

  discover_ui_2025

  pledge_management_reward_setup

  creator_experience_2025

  backings_dash_v2_2025

  featured_rewards_2025

  creator_tab_2025

  show_creative_download_2024_report_in_nav

  recent_searches_2025

  project_classifiers_2025

  pledge_over_time_ga_2025

  pledge_over_time_monthly_cadence_2025

  remove_event_sourcing_2025

  digital_rewards_2025

  digital_rewards__upload_button_2025

  pledge_over_time_edit_pledge_2025

  eufymake_backer_report

  multi_vat_ids_2025

  shopify_sync_integration_2025

  creator_tax_reporting_2025

  allow_survey_response_edits_2025

  shopify_kickoff_sync_job_2025

  tax_category_improvements

  creator_opt_out_feedback_2025
}

"""
Represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
Epoch time stamp.
"""
scalar DateTime

"""
A user's websites
"""
type UserUrl implements Node {
  """
  The domain of a user's website
  """
  domain: String

  id: ID!

  """
  The URL of a user's website
  """
  url: String
}

"""
A location.
"""
type Location implements Node {
  """
  The country code.
  """
  country: String!

  """
  The localized country name.
  """
  countryName: String

  """
  The county name or code. Can be null.
  """
  county: String

  """
  A URL to a discover page filtered by location
  """
  discoverUrl("The ref tag" ref_tag: String): String!

  """
  The displayable name. It includes the state code for US cities. ex: 'Seattle, WA'
  """
  displayableName: String!

  id: ID!

  """
  Whether or not this location is the root location
  """
  isRoot: Boolean!

  """
  The latitude of the location.
  """
  latitude: Float

  """
  The longitude of the location.
  """
  longitude: Float

  """
  The localized name
  """
  name: String!

  """
  The state name or code. Can be null.
  """
  state: String
}

"""
Represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
Validity and associated messages.
"""
type Validation {
  """
  Error keys for validation error, if any
  """
  errorTypes: [String!]

  """
  Error messages associated with the value
  """
  messages: [String!]!

  """
  Whether a value is valid.
  """
  valid: Boolean!
}

"""
The connection type for CreditCard.
"""
type UserCreditCardTypeConnection {
  """
  A list of edges.
  """
  edges: [CreditCardEdge]

  """
  A list of nodes.
  """
  nodes: [CreditCard]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
An edge in a connection.
"""
type CreditCardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CreditCard
}

"""
A credit card on file.
"""
type CreditCard {
  """
  When the credit card expires.
  """
  expirationDate: Date!

  """
  The card ID
  """
  id: String!

  """
  The last four digits of the credit card number.
  """
  lastFour: String!

  """
  The card type, but in lowercase.
  """
  lowercaseType: LowercaseCreditCardTypes!

  """
  The card's payment type.
  """
  paymentType: CreditCardPaymentType!

  """
  The card's state.
  """
  state: CreditCardState!

  """
  Stripe card id
  """
  stripeCardId: String!

  """
  The card type.
  """
  type: CreditCardTypes!
}

"""
ISO Date: YYYY-MM-DD
"""
scalar Date

"""
Credit card types.
"""
enum CreditCardTypes {
  AMEX

  DISCOVER

  JCB

  MASTERCARD

  VISA

  DINERS

  UNIONPAY
}

"""
Credit card types.
"""
enum LowercaseCreditCardTypes {
  amex

  discover

  jcb

  mastercard

  visa

  diners

  unionpay
}

"""
Credit card payment types.
"""
enum CreditCardPaymentType {
  ANDROID_PAY

  APPLE_PAY

  BANK_ACCOUNT

  CREDIT_CARD
}

"""
States of Credit Cards
"""
enum CreditCardState {
  UNAUTHORIZED

  VERIFYING

  ACTIVE

  INACTIVE
}

"""
The connection type for BankAccount.
"""
type BankAccountConnection {
  """
  A list of edges.
  """
  edges: [BankAccountEdge]

  """
  A list of nodes.
  """
  nodes: [BankAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BankAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BankAccount
}

"""
A bank account.
"""
type BankAccount {
  """
  The bank name if available.
  """
  bankName: String

  id: String!

  """
  The last four digits of the account number.
  """
  lastFour: String!

  """
  The stripe bank account id
  """
  stripeCardId: String!
}

"""
The connection type for Project.
"""
type UserBackedProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int! @deprecated(reason: "Please use backingsCount instead.")
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

"""
A project on Kickstarter.
"""
type Project implements Node & Commentable {
  """
  Account information.
  """
  accountInfo: AccountInfo

  """
  Actions you can currently perform
  """
  actions: ProjectActions!

  """
  The active checkout_wave, if there is one
  """
  activeWave: CheckoutWave

  """
  Backing Add-ons
  """
  addOns("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filters available add ons by pledge redemption only" pledgeManagementOnly: Boolean, "Filters available add ons by given location" forLocation: ID, "Enables\/disables add-ons sort by cost and title, with sorting enabled by default" sort: Boolean): ProjectRewardConnection

  """
  The project's additional category.
  """
  additionalSubcategory: Category

  """
  Whether or not the creator has enabled address collection
  """
  addressCollectionEnabled: Boolean

  """
  Whether or not the creator has enabled address collection for digital reward backers
  """
  addressCollectionForDigitalReward: Boolean

  aiDisclosure: AiDisclosure

  """
  When all orders were last synced with Shopify
  """
  allOrdersSyncedWithShopifyAt: DateTime

  """
  The total amount collected for add-ons, upgrades, and new backers in the pledge manager
  """
  amountCollectedForAddonsUpgradesAndNewBackers: String!

  """
  The total amount collected for shipping in the pledge manager
  """
  amountCollectedForShipping: String!

  """
  Available card types.
  """
  availableCardTypes: [CreditCardTypes!]!

  """
  A list of currencies that the project's country can use
  """
  availableFundingCurrenciesForCountry: [CurrencyCode!]!

  """
  The average sentiment of the project
  """
  averageSentiment: Float!

  """
  The lockout date for address collection
  """
  backerAddressLockoutDate: DateTime

  """
  Whether or not the backer address lockout date has passed.
  """
  backerAddressLockoutDatePassed: Boolean!

  """
  Returns the backer report in JSON format
  """
  backerReport("Filter by reward IDs" rewards: [ID!], "Filter by add-on IDs" addons: [ID!], "SQL operator to use for filtering add-ons" sqlFilterAddons: SqlFilterOperator, "Filter by item IDs" items: [ID!], "AND the item IDs instead of ORing them" sqlFilterItems: SqlFilterOperator, "Filter by SKU IDs" skus: [ID!], "AND the item variant IDs instead of ORing them" sqlFilterSkus: SqlFilterOperator, "Filter by backer selected shipping location" locations: [ID!], "Filter by reward cost minimum" amountMin: Int, "Filter by reward cost maximum" amountMax: Int, "Filter by date pledged minimum" pledgedAtMin: String, "Filter by date pledged maximum" pledgedAtMax: String, "Filter by fulfillment status" fulfillmentStatus: [String!], "Filter by wether the backer has answered the survey" surveyAnswered: [Boolean!], "Sort the backer report by this field" sortBy: String, "Sort the backer report in ascending or descending order" ascOrDesc: String, "Page number for pagination" page: Int, "Number of items per page" perPage: Int, "Backer report search term" term: [String!], "Filter by backing status" status: [String!], "Filter by pledge redemption state" pledgeRedemptionState: [String!], "Filter by actions taken" actionsTaken: [String!], "Filter by pledge type" pledgeOverTime: [Boolean!], "Filter by backer entry point" backerEntryPoint: [String!]): JSON

  """
  Backer survey for the project
  """
  backerSurvey: BackerSurvey

  """
  An optional introduction to the backer survey.
  """
  backerSurveyIntro("The width of embedded assets in pixels." assetWidth: Int): HTML

  """
  Backers of the project
  """
  backers("Limit the number of backers returned" limit: Int, "Limit to backers that the current user is following" followed: Boolean): [User!]

  """
  Total backers for the project
  """
  backersCount("Whether or not to considere new pm backers in the final count." withNewPmBackers: Boolean): Int!

  """
  The number of original backers who have yet to go through the pledge manager
  """
  backersRemainingForPledgeRedemption: Int!

  """
  The current user's backing of this project.  Does not include inactive backings.
  """
  backing: Backing

  """
  URL/path for the backing details page
  """
  backingDetailsPageRoute(type: Route!, tab: BackingDetailsPageTab): String!

  """
  True if the current user can comment (considers restrictions)
  """
  canComment: Boolean!

  """
  True if the current user can comment (does not consider restrictions)
  """
  canCommentSansRestrictions: Boolean!

  """
  Can new user enter pledge manager checkout?
  """
  canNewUserEnterPm: Boolean!

  """
  Whether or not the project can be opted into pledge manager
  """
  canOptInToPledgeManager: Boolean!

  """
  Whether the project is eligible for early prelaunch
  """
  canPrelaunchEarly: Boolean!

  """
  Whether user is allowed to edit project status
  """
  canUserEditProjectStatus: Boolean!

  """
  Whether a user can request an update about this project from the Creator
  """
  canUserRequestUpdate: Boolean!

  """
  Whether user is a backer of the project or not
  """
  canUserViewProjectStatusFeedback: Boolean!

  """
  If the project is in a canceled state, when was it canceled?
  """
  canceledAt: DateTime

  """
  The project's category.
  """
  category: Category

  """
  The path to change the current user's payment method for their pledge to this project.
  """
  changeMethodProjectPledgePath: String!

  """
  Will this project be using a pledge manager to charge shipping?
  """
  chargeShippingInPledgeManager: Boolean!

  """
  The date after which errored pledges should be dropped
  """
  cleanupErroredPledgesDeadline: DateTime

  """
  Permissions that can be assigned to a collaborator on a project
  """
  collaboratorPermissions: [CollaboratorPermission!]!

  """
  A project's collaborators.
  """
  collaborators("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "include creator in list of collaborators" withCreator: Boolean, "include both active and invited users in list of collaborators" withInvited: Boolean): ProjectCollaboratorConnection

  """
  List of comments on the commentable
  """
  comments("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): CommentConnection

  """
  Comment count - defaults to root level comments only
  """
  commentsCount(withReplies: Boolean = false): Int!

  """
  Representation of the Project Milestones
  """
  completedMilestones: [ProjectMilestone!]

  """
  Number of watchers who went on to back the project.
  """
  convertedWatchesCount: Int

  """
  The project's country
  """
  country: Country!

  """
  The project's country.
  """
  countryCode: CountryCode! @deprecated(reason: "Moved to country which returns CountryType.")

  """
  When the project was created
  """
  createdAt: DateTime

  """
  The project's creator.
  """
  creator: User

  """
  The draft projects that have a share token for the project creator
  """
  creatorSharedDrafts: [ProjectSharedDraft]

  """
  The paths for the creator tools pages
  """
  creatorToolsPaths: CreatorToolsPaths!

  """
  The Curated Collection that a project is in e.g. Make 100
  """
  curatedCollection: CuratedCollection

  """
  The project's currency code.
  """
  currency: CurrencyCode!

  """
  The current amount pledged in USD
  """
  currentAmountPledgedUsd: Float

  """
  When is the project scheduled to end?
  """
  deadlineAt: DateTime

  """
  The default currency for the project's country
  """
  defaultFundingCurrencyForCountry: CurrencyCode!

  """
  The default no reward pledge amount based on the project's currency.
  """
  defaultPledge: Int!

  """
  A short description of the project.
  """
  description: String!

  """
  The path to destroy the current user's pledge for this project.
  """
  destroyProjectPledgePath: String!

  """
  Funding duration in days
  """
  duration: Int

  """
  The path to edit the current user's pledge for this project.
  """
  editProjectPledgePath: String!

  """
  The environmental commitments of the project.
  """
  environmentalCommitments: [EnvironmentalCommitment]

  """
  The number of orders that errored during sync
  """
  erroredOrdersCount: Int!

  """
  List of FAQs of a project
  """
  faqs("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): ProjectFaqConnection

  """
  The date at which pledge collections will end
  """
  finalCollectionDate: ISO8601DateTime

  """
  A report by the current user for the project.
  """
  flagging: Flagging

  """
  A project's friendly backers.
  """
  friends("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): ProjectBackerFriendsConnection

  """
  When the fulfillment modal was dismissed
  """
  fulfillmentModalDismissedAt: DateTime

  """
  Status of fulfillment
  """
  fulfillmentStatus: FulfillmentStatus

  """
  When the fulfillment status was updated
  """
  fulfillmentStatusUpdatedAt: DateTime

  """
  The ratio of funding progress.
  """
  fundingRatio: Ratio!

  """
  Exchange rate for the current user's currency
  """
  fxRate: Float!

  """
  The project's title converted to a slug.
  """
  generatedSlug: String!

  """
  The minimum amount to raise for the project to be successful.
  """
  goal: Money

  """
  API secret for Google Analytics event
  """
  googleAnalyticsApiSecret: String

  """
  The Google Analytics tracking ID.
  """
  googleAnalyticsTrackingId: String

  """
  Does this project have any pledge over time config record?
  """
  hasPledgeOverTimeConfig: Boolean!

  """
  Does this project have any post-campaign config?
  """
  hasPostCampaignConfig: Boolean!

  """
  Whether or not the project has reward images
  """
  hasRewardImages: Boolean!

  """
  Whether the project has successfully linked a Shopify shop
  """
  hasShopifyShop: Boolean!

  """
  Whether a project has its slug set.
  """
  hasSlug: Boolean!

  """
  If the payout for the funds capture has happened
  """
  hasSuccessfulFundsCapturePayout: Boolean!

  """
  Whether or not the project has supporting materials (Prototype Gallery)
  """
  hasSupportingMaterials: Boolean!

  """
  Whether the project still has backings in "pledged" or "errored" state
  """
  hasUnresolvedBackings: Boolean!

  """
  Whether or not the project has upgradeable rewards configured
  """
  hasUpgradeableRewards: Boolean!

  id: ID!

  """
  The project's primary image.
  """
  image: Photo

  """
  A read-only representation of the image (complete with fallback default image)
  """
  imageUrl("Whether or not to blur the image." blur: Boolean, "The width of the image in pixels." width: Int!): String!

  """
  The countries that the project ships to in the EU
  """
  importIntoEuRequiredCountriesForVatIds: [Location!]

  """
  Whether the project has stock locations outside the EU that ship to the EU
  """
  importsToEu: Boolean!

  """
  Whether the project has stock locations outside the UK that ship to the UK
  """
  importsToUk: Boolean!

  """
  Is the project's submission state accepted.
  """
  isApproved: Boolean!

  """
  Has the current user disliked this project?
  """
  isDisliked: Boolean!

  """
  Is the project tagged with one of the Forward Fund tags?
  """
  isForwardFundTagged: Boolean!

  """
  Is this project currently accepting post-campaign pledges?
  """
  isInPostCampaignPledgingPhase: Boolean!

  """
  The project has launched
  """
  isLaunched: Boolean!

  """
  Has the current user liked this project?
  """
  isLiked: Boolean!

  """
  Whether a project is enrolled in plot
  """
  isPledgeOverTimeAllowed: Boolean!

  """
  Whether or not this is a Project of the Day.
  """
  isProjectOfTheDay: Boolean

  """
  Whether or not this is a Kickstarter-featured project.
  """
  isProjectWeLove: Boolean!

  """
  Whether the project is sharing it's budgeting information with the everyone
  """
  isSharingProjectBudget: Boolean!

  """
  Whether the Shopify shop is actively syncing
  """
  isShopifyShopSyncing: Boolean!

  """
  Whether current user is creator of current project
  """
  isUserCreator: Boolean!

  """
  Whether a not the project can be watched.
  """
  isWatchable: Boolean!

  """
  Is the current user watching this project?
  """
  isWatched: Boolean!

  """
  Item variants associated with the project
  """
  itemVariants: [SkuCount!]

  """
  Items available through the project's backer rewards.
  """
  items("Whether to exclude the items that are not attached to any reward or addon." excludeItemsWithoutRewards: Boolean): [RewardItem!]!

  """
  A project's last uploaded video, if it's processing, or the current project video.
  """
  lastUploadedVideo: Video

  """
  The last checkout_wave, if there is one
  """
  lastWave: CheckoutWave

  """
  Total backers for the project during late pledge phase
  """
  latePledgeBackersCount: Int!

  """
  The datetime at which the last available time-limited reward will end, if all the rewards are time-limited
  """
  latePledgePlannedEndDate: DateTime

  """
  How much money is pledged to the project during late pledge phase.
  """
  latePledgePledged: Money!

  """
  The datetime at which post-campaign pledging will end. This can be set to a future date if we have automatically scheduled an end to late pledging.
  """
  latePledgesEndedAt: DateTime

  """
  When the project launched
  """
  launchedAt: DateTime

  """
  Where the project is based.
  """
  location: Location

  """
  Possible VAT numbers the project could have, by location.
  """
  locationVatNumbers: [LocationVatNumber!]!

  """
  When the sku mappings were finalzied
  """
  mappingsCreatedAt: DateTime

  """
  The max pledge amount for a single reward tier.
  """
  maxPledge: Int!

  """
  Whether the project meets the criteria to use pledge manager
  """
  meetsPledgeManagerUsageCriteria: Boolean!

  """
  Whether or not the project has met KYC requirement
  """
  metKycRequirements: Boolean!

  """
  Access token for Meta Conversion API
  """
  metaCapiAccessToken: String

  """
  The unique identifier for the project's Meta Pixel ID
  """
  metaPixelId: String

  """
  List of milestones available to project, empty array if project has no possible milestones
  """
  milestoneCategories: [MilestoneCategory!]!

  """
  The min pledge amount for a single reward tier.
  """
  minPledge: Int!

  """
  When the most recent sync with Shopify occurred
  """
  mostRecentShopifySyncAt: DateTime

  """
  The project's name.
  """
  name: String!

  """
  The number of new backers who have gone through the pledge manager
  """
  newBackersCount: Int

  """
  Whether the project has been enabled to allow new backers into pledge manager
  """
  newBackersEnabled: Boolean!

  """
  Whether the project's shipping rules designate no vat collection
  """
  noVatCollection: Boolean!

  """
  A Stripe account identifier
  """
  onBehalfOf: String

  """
  The order for the logged in user associated with the project
  """
  order: Order

  """
  Build a payment plan given a project id and amount
  """
  paymentPlan("Amount in project funding currency, dollars-and-cents equivalent format" amount: String!): PaymentPlan

  """
  Payment source on creator's account used to issue refunds.
  """
  paymentSource: CreditCard

  """
  What percent the project has towards meeting its funding goal.
  """
  percentFunded: Int!

  """
  The project's pid.
  """
  pid: Int!

  """
  The project's pledge manager
  """
  pledgeManager: PledgeManager

  """
  Backer-facing summary of when the incremental charges will occur
  """
  pledgeOverTimeCollectionPlanChargeExplanation: String

  """
  Quick summary of the amount of increments pledges will be spread over
  """
  pledgeOverTimeCollectionPlanChargedAsNPayments: String

  """
  Backer-facing short summary of this project's number of payment increments to split over
  """
  pledgeOverTimeCollectionPlanShortPitch: String

  """
  Does this project have Pledge Over Time enabled?
  """
  pledgeOverTimeEnabled: Boolean!

  """
  The minimum pledge amount to be eligible for PLOT, localized to the project currency
  """
  pledgeOverTimeMinimum: String

  """
  The minimum pledge amount to be eligible for PLOT, localized to the project currency and backer language
  """
  pledgeOverTimeMinimumExplanation: String

  """
  Warns the backer that their pledge is no longer eligible for Pledge Over Time
  """
  pledgeOverTimeWarning: String

  """
  Warns the backer that their pledge is no longer eligible for Pledge Over Time with detail
  """
  pledgeOverTimeWarningExplanation: String

  """
  How much money is pledged to the project.
  """
  pledged: Money!

  """
  The percentage of original pledges that have been redeemed
  """
  pledgesRedeemedPercentage: Float!

  """
  Is this project configured for post-campaign pledges?
  """
  postCampaignPledgingEnabled: Boolean!

  """
  Project updates.
  """
  posts("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Scoped to draft or published posts" state: PostState, "Scoped to post type: creator_interview or freeform_post" postType: PostFormat, "Scoped to a creator’s post associated with the active prompt" forActivePrompt: Boolean): PostConnection

  """
  Whether a project has activated prelaunch.
  """
  prelaunchActivated: Boolean!

  """
  The rich text story for a prelaunch campaign.
  """
  prelaunchStory("The number of visible characters to fetch (does not include HTML markup)." first: Int, "The width of embedded assets in pixels." assetWidth: Int): HTML

  """
  The rich text story for a prelaunch campaign in raw form.
  """
  prelaunchStoryForEditor("The number of visible characters to fetch (does not include HTML markup)." first: Int, "The width of embedded assets in pixels." assetWidth: Int): HTML

  """
  Return an itemized version of the prelaunch story. This feature is in BETA: types can change anytime!
  """
  prelaunchStoryRichText: RichText!

  """
  The project's preview url.
  """
  previewUrl: String

  """
  The project's profile.
  """
  profile: ProjectProfile

  """
  The text of the currently applied project notice, empty if there is no notice
  """
  projectNotice: String

  """
  When this project was Project of the Day.
  """
  projectOfTheDayAt: DateTime

  """
  The root project id under which the comment is nested
  """
  projectRelayId: ID!

  """
  The project's bitly short URL
  """
  projectShortLink("The ref tag type for the bitly hash" ref_tag: BitlyHashes): String

  """
  Project's now and next status
  """
  projectStatus: ProjectStatus

  """
  Exchange rate to US Dollars (USD) for the project's currency
  """
  projectUsdExchangeRate: Float!

  """
  Survey questions asked of all the project's backers
  """
  questions: [Question!]!

  recommendations: Recommendations

  """
  URL for redeeming the backing
  """
  redemptionPageUrl: String!

  """
  Project rewards.
  """
  rewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filters available rewards by pledge redemption only" pledgeManagementOnly: Boolean, "Filters by active backings" withActiveBackings: Boolean, "Retrieves rewards considering if the project is currently in PM" withNewPmBackers: Boolean, "Sort the rewards by availability and cost" sort: Boolean): ProjectRewardConnection

  """
  Risk questions for the project plan.
  """
  riskQuestions: [RiskQuestion!]!

  """
  The risk mitigation strategies outlined for this project.
  """
  riskStrategies: [RiskStrategy!]

  """
  Potential hurdles to project completion.
  """
  risks("The number of characters to fetch." first: Int): String!

  """
  whether project has shipping zone for 'rest of the world' location
  """
  rootShippingZoneExists: Boolean!

  """
  Is this project configured so that events should be triggered for Meta's Conversions API?
  """
  sendMetaCapiEvents: Boolean!

  """
  Is this project configured for third party analytics events?
  """
  sendThirdPartyEvents: Boolean!

  """
  The EU countries that require a VAT ID for the project to collect VAT
  """
  shipWithinEuRequiredCountriesForVatIds: [Location!]

  """
  Shipping destination countries on all rewards on the project
  """
  shippableCountries: [Location!]!

  """
  Details regarding how the project is set up to charge shipping
  """
  shippingConfig: ShippingConfig

  """
  Whether or not the project has completed either flat-rate or weight-based shipping costs and setup
  """
  shippingCostsCompleted: Boolean!

  """
  Shipping zones configured for the project.
  """
  shippingZones: [ShippingZone!]!

  """
  Whether the project has stock locations in the EU that ship to the EU
  """
  shipsWithinEu: Boolean!

  """
  Whether the project has stock locations in the UK that ship to the UK
  """
  shipsWithinUk: Boolean!

  """
  The project's pledge manager
  """
  shopifySkus: [ShopifyVariant!]!

  """
  Whether or not to show ended to live cta
  """
  showCtaToLiveProjects: Boolean!

  """
  Whether or not to show the signal of fulfillment modal
  """
  showSignalOfFulfillmentModal: Boolean!

  """
  The project's unique URL identifier.
  """
  slug: String!

  """
  The Google Sheet associated to this project
  """
  spreadsheet: Spreadsheet

  """
  The project's current state.
  """
  state: ProjectState!

  """
  The last time a project's state changed, time since epoch
  """
  stateChangedAt: DateTime!

  """
  The initial project stats polling duration in ms
  """
  statsInterval: Int

  """
  Locations from which the project fulfills
  """
  stockLocations: [StockLocation!]!

  """
  The story behind the project, parsed for presentation.
  """
  story("The number of visible characters to fetch (does not include HTML markup)." first: Int, "The width of embedded assets in pixels." assetWidth: Int): HTML!

  """
  The project description without conversion for usage by Rich Text Editors.
  """
  storyForEditor("The number of visible characters to fetch (does not include HTML markup)." first: Int, "The width of embedded assets in pixels." assetWidth: Int): HTML!

  """
  Return an itemized version of the story. This feature is in BETA: types can change anytime!
  """
  storyRichText: RichText!

  """
  The Rich Text Editor version that was used to generate the project story
  """
  storyRteVersion: String

  """
  A project submission.
  """
  submission: Submission

  """
  The number of orders synced with Shopify
  """
  syncedOrdersCount: Int!

  """
  Tags project has been tagged with
  """
  tags("Scoped to an optionally provided scope" scope: TagScope!): [Tag]!

  """
  The project's target launch date
  """
  targetLaunchDate: ISO8601DateTime

  """
  The time that the project's target launch date was updated
  """
  targetLaunchDateUpdatedAt: ISO8601DateTime

  """
  Whether tariff surcharges are enabled for the project
  """
  tariffSurchargesEnabled: Boolean!

  """
  Tax categories configured for the project excluding the non-taxable category
  """
  taxCategories: [TaxCategory!]!

  """
  Whether or not the project has configured a deposit account address and vat id
  """
  taxInformationCompletionStatus: PrereqCompletionStatus!

  """
  The timeline of project events, including updates and milestones.
  """
  timeline("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Makes any pinned post the first item in the timeline" withPinnedFirst: Boolean): ProjectTimelineConnection

  """
  Locations (including countries and root) where shipping rates or shipping zones have been configured
                    but there is no ship-from location assigned
  """
  unassignedShippableLocations: [Location!]!

  """
  A URL to the project's page.
  """
  url: String!

  """
  Exchange rate to US Dollars (USD), null for draft projects.
  """
  usdExchangeRate: Float

  """
  Whether or not the project has used legacy surveys.
  """
  usedLegacySurveys: Boolean!

  """
  The feedback the current user has left for the project
  """
  userFeedback("Which question to fetch" questionName: String): [ProjectFeedback]

  """
  User groups associated with the project
  """
  userGroups: [UserGroup!]!

  """
  Was the current user removed from this project?
  """
  userWasRemoved: Boolean!

  """
  Name of user on verified account
  """
  verifiedCreatorName: String

  """
  Name of user on verified account
  """
  verifiedIdentity: String @deprecated(reason: "Use verified_creator_name instead")

  """
  A project video.
  """
  video: Video

  """
  Number of watchers a project has.
  """
  watchesCount: Int
}

"""
Something that can be commented on
"""
interface Commentable {
  """
  True if the current user can comment (considers restrictions)
  """
  canComment: Boolean!

  """
  True if the current user can comment (does not consider restrictions)
  """
  canCommentSansRestrictions: Boolean!

  """
  Whether a user can request an update about this project from the Creator
  """
  canUserRequestUpdate: Boolean!

  """
  List of comments on the commentable
  """
  comments("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): CommentConnection

  """
  Comment count - defaults to root level comments only
  """
  commentsCount(withReplies: Boolean = false): Int!

  """
  The root project id under which the comment is nested
  """
  projectRelayId: ID!
}

"""
The connection type for Comment.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]

  """
  A list of nodes.
  """
  nodes: [Comment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment
}

"""
A comment
"""
type Comment implements Node {
  """
  The author of the comment
  """
  author: User

  """
  The author's backing information
  """
  authorBacking: Backing

  """
  The badges for the comment author
  """
  authorBadges: [CommentBadge]

  """
  Whether the author has canceled their pledge
  """
  authorCanceledPledge: Boolean!

  """
  The body of the comment
  """
  body: String!

  """
  Whether the current user can delete the comment
  """
  canDelete: Boolean!

  """
  Whether current user can pin a comment
  """
  canPin: Boolean!

  """
  Whether current user can report a comment
  """
  canReport: Boolean!

  """
  When was this comment posted
  """
  createdAt: DateTime

  """
  Whether the comment is deleted
  """
  deleted: Boolean!

  """
  Whether the comment author is a deleted user and not the creator
  """
  deletedAuthor: Boolean!

  """
  Whether a comment has any flaggings
  """
  hasFlaggings: Boolean!

  id: ID!

  """
  The ID of the parent comment
  """
  parentId: String

  """
  When the comment was pinned
  """
  pinnedAt: ISO8601DateTime

  """
  Whether the comment author has been removed by kickstarter
  """
  removedPerGuidelines: Boolean!

  """
  The replies on a comment
  """
  replies("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): CommentConnection

  """
  Is this comment spam
  """
  spam: Boolean!

  """
  Whether this comment has been reviewed and sustained by an admin
  """
  sustained: Boolean!
}

"""
All available comment author badges
"""
enum CommentBadge {
  """
  Indicates the author is a creator
  """
  creator

  """
  Indicates the author is a collaborator
  """
  collaborator

  """
  Indicates the author is a superbacker
  """
  superbacker
}

"""
A backing
"""
type Backing implements Node {
  """
  The add-ons that the backer selected
  """
  addOns("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardTotalCountConnection

  """
  The add-ons that the backer selected
  """
  addOnsWithQuantity: [BackingAddon!]

  """
  A summary of refunds and removal issued by the creator
  """
  adjustmentSummary: AdjustmentSummary

  """
  Countries that the backing's reward can be shipped to. If null, the backing's reward can be shipped to any country.
  """
  allowedCountries: [CountryCode!]

  """
  Total amount pledged by the backer to the project, including shipping.
  """
  amount: Money!

  """
  The amount pledged by the backer, less shipping.
  """
  amountLessShipping: Float!

  """
  Add-ons available to be added at Pledge Redemption
  """
  availableCrossSells: [Reward!]!

  """
  Base rewards available to upgrade to
  """
  availableUpgradeableRewards: [Reward!]!

  """
  The backer
  """
  backer: User

  """
  If the backer_completed_at is set or not
  """
  backerCompleted: Boolean!

  """
  Backer's note regarding their backing
  """
  backerNote: String

  """
  The sentiment feedback the backer has submitted for the backing, if any
  """
  backerSentiment: String

  """
  URL/path for the backing details page
  """
  backingDetailsPageRoute(type: Route!, tab: BackingDetailsPageTab): String!

  """
  The backing rewards on a backing
  """
  backingRewards: [BackingAddon!]

  """
  A link to the backing information
  """
  backingUrl: String!

  """
  Extra amount the backer pledged on top of the minimum.
  """
  bonusAmount: Money!

  """
  If the backing can be cancelled
  """
  cancelable: Boolean!

  """
  Contains the backer's item preferences and responses to survey questions
  """
  cart: Cart

  """
  If `requires_action` is true, `client_secret` should be used to initiate additional client-side authentication steps
  """
  clientSecret: String

  """
  When the backing was completed
  """
  completedAt: DateTime

  """
  Refund attempts performed by the creator
  """
  completedRefundAttempts: [Refund!]!

  """
  Message thread between backer and creator
  """
  conversation: Conversation

  """
  The delivery address associated with the backing
  """
  deliveryAddress: Address

  """
  Digital Access Resources provided by a creator to fulfill digital rewards
  """
  digitalAccessResources: [DigitalAccessResource!]!

  """
  The reason for an errored backing
  """
  errorReason: String

  """
  The fulfillment status of a backing.
  """
  fulfillmentStatus: FulfillmentStatusDisplayOptions!

  """
  Whether or not the backing has any open flaggings
  """
  hasFlaggings: Boolean!

  id: ID!

  """
  If the backing was incremental, ie pledged over time
  """
  incremental: Boolean!

  """
  Whether or not the backing is a late pledge
  """
  isLatePledge: Boolean!

  """
  Is this backing a late pledge or did it occur during the crowdfunding campaign?
  """
  isPostCampaign: Boolean!

  """
  If present, the most recent setup_intent data from Stripe.
  """
  latestSetupIntent: SetupIntent

  """
  Whether or not the backing is missing a legacy survey response
  """
  legacySurveyResponseMissing: Boolean!

  """
  The backing location.
  """
  location: Location

  """
  The order associated with the backing
  """
  order: Order

  """
  The original or upgraded backer reward
  """
  originalOrUpgradedReward: Reward

  """
  Scheduled incremental payments
  """
  paymentIncrements: [PaymentIncrement!]

  """
  Payment source used on a backing.
  """
  paymentSource: PaymentSource

  """
  If the payout for the backing has happened
  """
  payoutStarted: Boolean!

  """
  When the backing was created
  """
  pledgedOn: DateTime

  """
  Is this pledge processing?
  """
  processing: Boolean

  """
  The project
  """
  project: Project

  """
  URL for redeeming the backing
  """
  redemptionPageUrl: String!

  """
  If the backing was refunded
  """
  refunded: Boolean!

  """
  How much the backer paid on their base reward, after refunds
  """
  remainingTotalOnBackerReward: Money!

  """
  Whether or not a removal request task is marked as nonissue
  """
  removalRequestIsNonissue: Boolean!

  """
  Whether this checkout requires additional client-side authentication steps (e.g. 3DS2) to complete the on-session pledge flow
  """
  requiresAction: Boolean

  """
  The reward the backer is expecting
  """
  reward: Reward

  """
  Amount pledged for all rewards, the sum off all minimums, excluding shipping
  """
  rewardsAmount: Money!

  """
  Admin tree for the associated Rosie Pledge
  """
  rosiePledgeAdminTree: String

  """
  Sequence of the backing
  """
  sequence: Int

  """
  Shipping amount for the rewards chosen by the backer for their location
  """
  shippingAmount: Money

  """
  A brief description of shipping selections for backing
  """
  shippingSummary: String

  """
  The status of a backing
  """
  status: BackingState!

  """
  Refunds
  """
  successfulRefunds: [String!]!

  surveyResponses: [SurveyResponse!]

  """
  All of the backer's saved addresses that match the backing country
  """
  usableBackerAddresses: [Address!]!
}

enum Route {
  """
  Just the path (does not include the domain)
  """
  path

  """
  The entire URL (include the domain)
  """
  url
}

enum BackingDetailsPageTab {
  """
  Details
  """
  details

  """
  Survey responses
  """
  survey_responses

  """
  Messages
  """
  messages

  """
  Pledge redemption
  """
  pledge_redemption

  """
  Digital rewards
  """
  digital_rewards
}

"""
A monetary amount and its corresponding currency.
"""
type Money {
  """
  Floating-point numeric value of monetary amount represented as a string
  """
  amount: String

  """
  Currency of the monetary amount
  """
  currency: CurrencyCode

  """
  Symbol of the currency in which the monetary amount appears
  """
  symbol: String
}

"""
A list of Iso4217–supported currencies.
"""
enum CurrencyCode {
  AUD

  CAD

  CHF

  DKK

  EUR

  GBP

  HKD

  JPY

  MXN

  NOK

  NZD

  PLN

  SEK

  SGD

  USD
}

"""
A user's shipping address
"""
type Address implements Node {
  """
  Address line 1 (Street address/PO Box/Company name)
  """
  addressLine1: String!

  """
  Address line 2 (Apartment/Suite/Unit/Building)
  """
  addressLine2: String

  """
  City
  """
  city: String!

  """
  2-letter country code
  """
  countryCode: CountryCode!

  """
  The name of the country associated with the country code
  """
  countryName: String

  id: ID!

  """
  The number of non updatable survey responses to this address
  """
  nonUpdatableSurveyResponsesCount: Int!

  """
  Recipient's phone number
  """
  phoneNumber: String

  """
  ZIP or postal code
  """
  postalCode: String

  """
  Is this the user's primary address?
  """
  primary: Boolean!

  """
  The title of projects with updatable survey responses
  """
  projectsWithUpdatableSurveyResponses: [String!]!

  """
  The title of projects with non updatable survey responses
  """
  projectsWithoutUpdatableSurveyResponses: [String!]!

  """
  Address recipient name
  """
  recipientName: String

  """
  Address reference or nickname
  """
  referenceName: String

  """
  State/County/Province/Region.
  """
  region: String

  """
  The number of current updatable survey responses to this address
  """
  updatableSurveyResponsesCount: Int!

  """
  The user associated with the shipping address
  """
  user: User
}

"""
Two letter ISO code for a country.
"""
enum CountryCode {
  AD

  AE

  AF

  AG

  AI

  AL

  AM

  AN

  AO

  AQ

  AR

  AS

  AT

  AU

  AW

  AX

  AZ

  BA

  BB

  BD

  BE

  BF

  BG

  BH

  BI

  BJ

  BL

  BM

  BN

  BO

  BQ

  BR

  BS

  BT

  BV

  BW

  BY

  BZ

  CA

  CC

  CD

  CF

  CG

  CH

  CI

  CK

  CL

  CM

  CN

  CO

  CR

  CU

  CW

  CV

  CX

  CY

  CZ

  DE

  DJ

  DK

  DM

  DO

  DZ

  EC

  EE

  EG

  EH

  ER

  ES

  ET

  FI

  FJ

  FK

  FM

  FO

  FR

  GA

  GB

  GD

  GE

  GF

  GG

  GH

  GI

  GL

  GM

  GN

  GP

  GQ

  GR

  GS

  GT

  GU

  GW

  GY

  HK

  HM

  HN

  HR

  HT

  HU

  ID

  IE

  IL

  IM

  IN

  IO

  IQ

  IR

  IS

  IT

  JE

  JM

  JO

  JP

  KE

  KG

  KH

  KI

  KM

  KN

  KP

  KR

  KW

  KY

  KZ

  LA

  LB

  LC

  LI

  LK

  LR

  LS

  LT

  LU

  LV

  LY

  MA

  MC

  MD

  ME

  MF

  MG

  MH

  MK

  ML

  MM

  MN

  MO

  MP

  MQ

  MR

  MS

  MT

  MU

  MV

  MW

  MX

  MY

  MZ

  NA

  NC

  NE

  NF

  NG

  NI

  NL

  NO

  NP

  NR

  NU

  NZ

  OM

  PA

  PE

  PF

  PG

  PH

  PK

  PL

  PM

  PN

  PR

  PS

  PT

  PW

  PY

  QA

  RE

  RO

  RS

  RU

  RW

  SA

  SB

  SC

  SD

  SE

  SG

  SH

  SI

  SJ

  SK

  SL

  SM

  SN

  SO

  SR

  SS

  ST

  SV

  SX

  SY

  SZ

  TC

  TD

  TF

  TG

  TH

  TJ

  TK

  TL

  TM

  TN

  TO

  TR

  TT

  TV

  TW

  TZ

  UA

  UG

  UM

  US

  UY

  UZ

  VA

  VC

  VE

  VG

  VI

  VN

  VU

  WF

  WS

  XK

  YE

  YT

  ZA

  ZM

  ZW
}

"""
A cart associated with a backing
"""
type Cart {
  """
  The add-on questions
  """
  addOnQuestions: [CartQuestion!]!

  """
  Whether the cart required backer action or was finalized on creation
  """
  autoFinalized: Boolean!

  """
  Answers associated with a cart's backing rewards
  """
  backingRewardAnswers: [Answer!]!

  """
  The answers to reward-level questions
  """
  baseRewardAnswers: [Answer!]!

  """
  The base reward questions
  """
  baseRewardQuestions: [CartQuestion!]!

  """
  When the cart was finalized (i.e., when the backer submitted responses)
  """
  finalizedAt: DateTime

  """
  Whether the cart has non-optional questions
  """
  hasNonOptionalQuestions: Boolean!

  id: ID!

  """
  Whether the backer has begun answering their survey
  """
  inProgress: Boolean!

  """
  The associated line items
  """
  lineItems: [LineItem!]!

  """
  The answers to project-level questions
  """
  projectAnswers: [Answer!]!

  """
  The project-level questions
  """
  projectQuestions: [CartQuestion!]!

  """
  Whether or not this cart needs an address to be finalized
  """
  shouldCollectAddress: Boolean!
}

"""
A line item in a cart
"""
type LineItem {
  """
  The answers associated with the line item
  """
  answers: [Answer!]!

  id: ID!

  """
  The item associated with the line item
  """
  item: RewardItem!

  """
  The item variant the backer selected (unless master variant)
  """
  itemVariant: ItemVariant

  """
  The option values that comprise the selected item variant, if present.
  """
  optionValues: [OptionValue!]!

  """
  The questions associated with the line item
  """
  questions: [CartQuestion!]!

  """
  True if the backer needs to select a variant or answer an item question
  """
  requiresSelection: Boolean!
}

"""
A unique item variant aka SKU
"""
type ItemVariant {
  id: ID!

  """
  The name (e.g. 'Hoodie Small Blue Checkered')
  """
  name: String!

  """
  The option values associated with this variant
  """
  optionValues: [OptionValue!]!

  """
  The sku value (e.g. 'Hoodie-Small-Blue-Checkered')
  """
  sku: String!
}

"""
An option value (e.g. "red") associated with an option type (e.g. "color")
"""
type OptionValue {
  id: ID!

  """
  The option type
  """
  optionType: OptionType!

  """
  The option value
  """
  value: String!
}

"""
An option type associated with an item (e.g. "size" or "color")
"""
type OptionType {
  id: ID!

  """
  The item associated with the option type
  """
  item: RewardItem!

  """
  The option type name (e.g. "size" or "color")
  """
  name: String!

  """
  The option type prompt (e.g. "What size do you want?")
  """
  prompt: String!

  """
  The associated option values
  """
  values: [OptionValue!]!
}

"""
A reward item.
"""
type RewardItem implements Node {
  """
  The add-ons that the item is included in.
  """
  addOns: [Reward!]!

  """
  The numer of add-ons that the item is included in.
  """
  addOnsCount: Int!

  """
  Whether backers have backed rewards this item belongs to
  """
  hasBackers: Boolean!

  id: ID!

  """
  The item image
  """
  image: Photo

  """
  Variants of this item
  """
  itemVariants: [ItemVariant!]!

  """
  Item weight related configuration
  """
  itemWeight: ItemWeight

  """
  The max amount of this item that may have to be produced based on reward limits.
  """
  maxInventoryCount: Int

  """
  An item name.
  """
  name: String!

  """
  Option types tied to this item
  """
  optionTypes: [OptionType!]!

  """
  The project
  """
  project: Project

  """
  Questions tied to this item that will be posed to backers
  """
  questions: [Question!]!

  """
  The rewards that the item is included in.
  """
  rewards: [Reward!]!

  """
  The number of rewards that the item is included in.
  """
  rewardsCount: Int!

  """
  Surcharge rules configured for this item
  """
  surchargeRules: [SurchargeRule!]!

  """
  Tax related configuration
  """
  taxConfig: ItemTaxConfig

  """
  Whether the item is completely configured for tax purposes
  """
  taxConfigCompletionStatus: PrereqCompletionStatus!
}

"""
A project reward.
"""
type Reward implements Node {
  """
  Add-ons which can be combined with this reward.
  Uses creator preferences and shipping rules to determine allow-ability.
  Inclusion in this list does not necessarily indicate that the add-on is available for backing.
  """
  allowedAddons("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection!

  """
  Base rewards which can be combined with this addon.
  Uses creator preferences and shipping rules to determine allow-ability.
  Inclusion in this list does not necessarily indicate that the reward is available for backing.
  """
  allowedRewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection!

  """
  Amount for claiming this reward.
  """
  amount: Money!

  """
  Data related to who can view/access this reward
  """
  audienceData: ResourceAudience!

  """
  Whether or not the reward is available for new pledges
  """
  available: Boolean!

  """
  Profile images for backers of this reward
  """
  backerImages("Limit the number of images returned" limit: Int!): [Photo!]

  """
  URL for the Backer Report filtered to only this reward
  """
  backerReportUrl: String!

  """
  count of backers for this reward
  """
  backersCount("Filters out backings in an inactive state" excludeInactive: Boolean): Int

  """
  count of backers for this reward after launching pledge manager
  """
  backersCountWithNewPmBackers: Int

  """
  Amount for claiming this reward, in the current user's chosen currency
  """
  convertedAmount: Money!

  """
  A reward description.
  """
  description: String!

  """
  A reward's title plus the amount, or a default title (the reward amount) if it doesn't have a title.
  """
  displayName: String!

  """
  The same as allowed_addons but with an additional scope that filters out addons with a start date that falls in the future
  """
  displayableAddons("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection!

  """
  For post-campaign enabled rewards, the conditions under which to stop offering the reward.
  """
  endCondition: Int

  """
  When the reward is scheduled to end in seconds
  """
  endsAt: DateTime

  """
  Estimated delivery day.
  """
  estimatedDeliveryOn: Date

  """
  Whether or not the reward is featured
  """
  featured: Boolean!

  """
  Whether any one has pledged for this reward during the late pledges period
  """
  hasLatePledgeBackers: Boolean

  id: ID!

  """
  The reward image.
  """
  image: Photo

  """
  Is this reward currently accepting post-campaign pledges?
  """
  inPostCampaignPledgingPhase: Boolean!

  """
  Does reward amount meet or exceed maximum pledge for the project
  """
  isMaxPledge: Boolean!

  """
  Items in the reward.
  """
  items("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardItemsConnection

  """
  Amount for claiming this reward after the campaign.
  """
  latePledgeAmount: Money!

  """
  A reward limit.
  """
  limit: Int

  """
  Per backer reward limit.
  """
  limitPerBacker("Returns system wide limit per backer if not set by creator." withFallback: Boolean): Int

  """
  Where the reward can be locally received if local receipt is selected as the shipping preference
  """
  localReceiptLocation: Location

  """
  The maximum amount of this add-on in a single pledge selected by any pledged backer.
  """
  maxPledgedInSingleBacking: Int!

  """
  A reward title.
  """
  name: String

  """
  Cross-Sells configuration for this Reward
  """
  orderableConfig: OrderableConfig

  """
  What state is orderable configuration in for this reward (complete, incomplete, or not_started)?
  """
  orderableConfigCompletion: PrereqCompletionStatus!

  """
  Amount for claiming this reward during the campaign.
  """
  pledgeAmount: Money!

  """
  Should this reward only be shown in Pledgement Management?
  """
  pledgeManagementOnly: Boolean!

  """
  Is this reward available for post-campaign pledges?
  """
  postCampaignPledgingEnabled: Boolean!

  """
  The project
  """
  project: Project

  """
  Survey questions asked of all backers of this reward.
  """
  questions: [Question!]!

  """
  Remaining reward quantity.
  """
  remainingQuantity: Int

  """
  The type of the reward - base or addon.
  """
  rewardType: RewardType!

  """
  Whether or not the reward has shipping enabled
  """
  shippingEnabled: Boolean!

  """
  Shipping preference for this reward
  """
  shippingPreference: ShippingPreference

  """
  Shipping rates defined by the creator for this reward
  """
  shippingRates: [ShippingRate!]!

  """
  Whether the shipping rates are filled out and not missing fields
  """
  shippingRatesCompletion: PrereqCompletionStatus!

  """
  Shipping rates for all shippable countries, including those that are children of superregions
  """
  shippingRatesExpanded: [ShippingRate!]!

  """
  Shipping rules defined by the creator for this reward
  """
  shippingRules: [ShippingRule]!

  """
  Shipping rules for all shippable countries.
  """
  shippingRulesExpanded("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Returns expanded shipping rules given location" forLocation: ID): RewardShippingRulesConnection

  """
  A shipping summary
  """
  shippingSummary: String

  """
  Reward shipping summary as a sentence
  """
  shippingSummarySentence: String

  """
  Simple shipping rules expanded as a faster alternative to shippingRulesExpanded since connection type is slow
  """
  simpleShippingRulesExpanded: [SimpleShippingRule]!

  """
  Whether or not the reward is out of inventory
  """
  soldOut: Boolean!

  """
  For post-campaign enabled rewards, the conditions under which to start offering the reward.
  """
  startCondition: Int

  """
  When the reward is scheduled to start
  """
  startsAt: DateTime
}

"""
A photo
"""
type Photo implements Node {
  """
  Alt text on the image
  """
  altText: String!

  """
  The fingerprint of the photo
  """
  fingerprint: String

  id: ID!

  """
  Upload status of the photo
  """
  status: AssetState!

  """
  URL of the photo
  """
  url("Whether or not to blur the image." blur: Boolean, "The width of the image in pixels." width: Int!): String!
}

"""
All available asset states
"""
enum AssetState {
  """
  A missing asset
  """
  MISSING

  """
  Incomplete status of an asset
  """
  PROCESSING

  """
  The asset file has been deleted
  """
  DELETED

  """
  Processing the asset file successfully completed
  """
  SUCCESSFUL
}

"""
Describes the purpose of the reward
"""
enum RewardType {
  """
  A reward that cannot be combined with others
  """
  base

  """
  A reward that can only be added to a backing for another reward
  """
  addon
}

"""
The connection type for RewardItem.
"""
type RewardItemsConnection {
  """
  A list of edges.
  """
  edges: [RewardItemEdge]

  """
  A list of nodes.
  """
  nodes: [RewardItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type RewardItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RewardItem

  """
  The position that an item has been ordered on a reward
  """
  position: Int

  """
  The quantity of an item associated with a reward
  """
  quantity: Int!
}

"""
The connection type for Reward.
"""
type RewardConnection {
  """
  A list of edges.
  """
  edges: [RewardEdge]

  """
  A list of nodes.
  """
  nodes: [Reward]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RewardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Reward
}

"""
A preference for shipping a reward
"""
enum ShippingPreference {
  none

  restricted

  unrestricted

  local
}

"""
A project reward's shipping rule.
"""
type ShippingRule implements Node {
  """
  Number of backers for the Shipping Rule
  """
  backersCount: Int!

  """
  The shipping cost for this location.
  """
  cost: Money

  """
  The estimated maximum shipping cost
  """
  estimatedMax: Money

  """
  The estimated minimum shipping cost
  """
  estimatedMin: Money

  """
  Shipping rule has backers
  """
  hasBackers: Boolean!

  id: ID!

  """
  The shipping location to which the rule pertains.
  """
  location: Location!
}

"""
Simple shipping rule for a reward
"""
type SimpleShippingRule {
  cost: String

  country: String!

  currency: String

  estimatedMax: String

  estimatedMin: String

  locationId: ID

  locationName: String
}

"""
The connection type for ShippingRule.
"""
type RewardShippingRulesConnection {
  """
  A list of edges.
  """
  edges: [ShippingRuleEdge]

  """
  A list of nodes.
  """
  nodes: [ShippingRule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type ShippingRuleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ShippingRule
}

"""
A shipping rate for a particular shippable and location
"""
type ShippingRate {
  """
  The shipping cost for this location.
  """
  cost: Int!

  id: ID!

  """
  The shipping location for which this shipping rate is defined.
  """
  location: Location!

  """
  The item or reward for which this shipping rate is defined.
  """
  shippable: Shippable!
}

union Shippable = Reward|RewardItem

"""
Completion status of objects necessary for pledge redemption
"""
enum PrereqCompletionStatus {
  """
  Prereq has not been started
  """
  not_started

  """
  Prereq has been started but is not complete
  """
  incomplete

  """
  Prereq is complete
  """
  complete
}

"""
A question associated with one of the following: Project, RewardItem, Reward
"""
type Question {
  """
  The question choice selection limit
  """
  choiceSelectionLimit: Int

  """
  The question choices
  """
  choices: [String!]

  id: ID!

  """
  Whether the question is optional
  """
  optional: Boolean!

  """
  Position of a question
  """
  position: Int!

  """
  The question prompt
  """
  prompt: String!

  """
  The object associated with the question
  """
  questionable: Questionable!

  """
  The question type
  """
  type: QuestionType!
}

union Questionable = Project|RewardItem|Reward

"""
Question types
"""
enum QuestionType {
  text

  choices
}

"""
Configuration for an Orderable for Cross-Sells.
"""
type OrderableConfig {
  """
  Is this reward currently available to add to an Order
  """
  available: Boolean!

  """
  Is this orderable available for cross-sells in Pledge Redemption.
  """
  enabled: Boolean!

  id: ID!

  """
  The total number of an orderable available to be purchased
  """
  limit: Int

  """
  The number of an orderable a backer is allowed to add to their order
  """
  limitPerOrder: Int

  """
  The price charged for an orderable
  """
  price: Money

  """
  The price formatted for display in the user's chosen currency
  """
  priceConvertedToCurrencyFormatted: String

  """
  The price formatted for display
  """
  priceFormatted: String

  """
  How many of this reward are still available to claim during Pledge Redemption
  """
  remainingQuantity: Int
}

"""
Data related to the audience for a particular resource
"""
type ResourceAudience {
  audience: AudienceEnum!

  """
  True if the resource has access restricted by an access rule
  """
  secret: Boolean!

  """
  Url for sharing reward (absent if accessible to all)
  """
  shareUrl: String

  token: String
}

"""
The audience for the resource
"""
enum AudienceEnum {
  """
  everyone
  """
  everyone

  """
  link
  """
  link

  """
  restricted
  """
  restricted
}

"""
Tax configuration data related to an item
"""
type ItemTaxConfig {
  id: ID!

  item: RewardItem!

  """
  Value of item pre any bundling discounts
  """
  marketValue: Int

  taxCategory: TaxCategory
}

"""
A project scoped tax category
"""
type TaxCategory {
  """
  Whether or not the category is associated with multiple items
  """
  associatedWithMultipleItems: Boolean!

  """
  Describes what products or services the tax code covers
  """
  codeDescription: String

  id: ID!

  """
  Whether or not this is a default category managed by Kickstarter
  """
  ksrManaged: Boolean!

  """
  Whether or not the category is nontaxable
  """
  nontaxable: Boolean!

  """
  Third party tax code
  """
  taxCode: String!

  """
  The user assigned label for the vendor tax code
  """
  userLabel: String!
}

"""
Item's weight configuration data
"""
type ItemWeight {
  exclude: Boolean!

  id: ID!

  item: RewardItem!

  """
  item weight
  """
  weight: Float!
}

"""
A surcharge for a particular item and location combo
"""
type SurchargeRule {
  """
  The surcharge cost for this location.
  """
  cost: Int!

  """
  The formatted surcharge cost for this location.
  """
  costFormatted: String!

  id: ID!

  item: RewardItem!

  location: Location!
}

"""
An answer associated with one of the following: LineItem, Cart, BackingAddon, CartReward
"""
type Answer {
  """
  The object associated with the answer (e.g. Item, Project, Reward)
  """
  answerable: Answerable!

  id: ID!

  """
  The associated question
  """
  question: Question!

  """
  The response to the question
  """
  response: [String!]!
}

union Answerable = LineItem|Cart|BackingAddon|CartReward

"""
An add-on reward included in a backing.
"""
type BackingAddon {
  """
  Amount the add-on costs.
  """
  amount: Money!

  """
  The addon reward
  """
  backerReward: Reward!

  """
  The add-on description.
  """
  description: String!

  id: ID!

  """
  Items in the add-on.
  """
  items("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardItemsConnection!

  """
  The add-on name.
  """
  name: String

  """
  Amount for claiming this add-on during the campaign.
  """
  pledgeAmount: Money!

  """
  The quantity of the add-on included in a backing.
  """
  quantity: Int!
}

"""
A reward in the cart (currently scoped to cross-sell rewards only)
"""
type CartReward {
  """
  The addon reward
  """
  backerReward: Reward!

  id: ID!

  """
  The add-on name.
  """
  name: String
}

"""
A question associated with a cart, composed with an answer if one is present
"""
type CartQuestion {
  """
  The answer to the question. Will return an "empty answer" if not yet answered.
  """
  answer: Answer!

  """
  The cart question
  """
  question: Question!
}

"""
All values for backing fulfillment status, including where not provided/available
"""
enum FulfillmentStatusDisplayOptions {
  not_started

  in_progress

  shipped

  delayed

  not_provided

  not_available
}

"""
The connection type for Reward.
"""
type RewardTotalCountConnection {
  """
  A list of edges.
  """
  edges: [RewardEdge]

  """
  A list of nodes.
  """
  nodes: [Reward]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An access code or URL for retrieving a digital reward
"""
type DigitalAccessResource {
  """
  A description of the resource or instructions for activation
  """
  description: String!

  """
  The project associated with the reward
  """
  project: Project!

  """
  The access code or URL
  """
  resource: String!
}

"""
Selected fields on a SetupIntent from Stripe for a given backing.
"""
type SetupIntent {
  """
  Stripe ID of the SetupIntent.
  """
  id: String!

  """
  The error encountered in the previous SetupIntent confirmation.
  """
  lastSetupError: SetupIntentError

  """
  Status of the SetupIntent.
  """
  status: SetupIntentStatus!
}

enum SetupIntentStatus {
  """
  When the SetupIntent is created, it has this status until a payment method is attached. If a SetupIntent fails, it will revert to this status.
  """
  REQUIRES_PAYMENT_METHOD

  """
  After the customer provides their payment method information, the SetupIntent is ready to be confirmed.
  """
  REQUIRES_CONFIRMATION

  """
  If the setup requires additional actions, such as authenticating with 3D Secure
  """
  REQUIRES_ACTION

  """
  Once required actions are handled, the SetupIntent moves to this status, which can be brief or take a few days depending on the payment method.
  """
  PROCESSING

  """
  SetupIntent can be canceled at any point before it is processing or succeeded.
  """
  CANCELED

  """
  Setup of payment source was successful.
  """
  SUCCEEDED
}

type SetupIntentError {
  """
  For some errors that could be handled programmatically, a short string indicating the error code reported. https://stripe.com/docs/error-codes
  """
  code: String!

  """
  A short string indicating the card issuer’s reason for the decline if they provide one.
  """
  declineCode: String!

  """
  A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
  """
  message: String!

  """
  The type of error returned.
  """
  type: SetupIntentErrorType!
}

enum SetupIntentErrorType {
  """
  Failure to connect to Stripe's API.
  """
  API_CONNECTION_ERROR

  """
  API errors cover any other type of problem (e.g., a temporary problem with Stripe's servers), and are extremely uncommon.
  """
  API_ERROR

  """
  Failure to properly authenticate in the request.
  """
  AUTHENTICATION_ERROR

  """
  Card errors are very common and they result when the user enters a card that can't be charged for some reason.
  """
  CARD_ERROR

  """
  Idempotency errors occur when an Idempotency-Key is re-used on a request that does not match the first request's API endpoint and parameters.
  """
  IDEMPOTENCY_ERROR

  """
  Invalid request errors arise when your request has invalid parameters eg., 3DS authentication failed.
  """
  INVALID_REQUEST_ERROR

  """
  Too many requests hit the Stripe API too quickly.
  """
  RATE_LIMIT_ERROR

  """
  Errors triggered by Stripe's client-side libraries when failing to validate fields (e.g., when a card number or expiration date is invalid or incomplete).
  """
  VALIDATION_ERROR
}

union PaymentSource = BankAccount|CreditCard

"""
Various backing states.
"""
enum BackingState {
  preauth

  pledged

  canceled

  collected

  errored

  authentication_required

  dropped

  dummy
}

"""
The response to a backer survey.
"""
type SurveyResponse {
  """
  Is the address still editable
  """
  addressEditable: Boolean!

  """
  The date past which no further updates are allowed.
  """
  answerDeadline: DateTime

  """
  Is the survey currently unlocked and answerable.
  """
  answerable: Boolean!

  """
  The date on which the backer answered the survey
  """
  answeredAt: DateTime

  """
  An array of question and answer data for this survey response
  """
  answers: [SurveyAnswer!]!

  """
  The date on which the backer edited their survey response
  """
  editedAt: DateTime

  id: ID!

  """
  The url used to access the survey
  """
  url: String!
}

type SurveyAnswer {
  """
  The response to the question.
  """
  answer: [String!]!

  """
  The ID of the answer.
  """
  id: String!

  """
  The question prompt or template name.
  """
  question: String!

  """
  The type of question, e.g. choices, checkbox, address, etc
  """
  template: SurveyQuestionTemplateEnum!
}

"""
Enum describing all the possible templates for survey questions
"""
enum SurveyQuestionTemplateEnum {
  """
  address
  """
  address

  """
  email
  """
  email

  """
  name
  """
  name

  """
  other
  """
  other

  """
  choices
  """
  choices

  """
  checkboxes
  """
  checkboxes
}

"""
A conversation on Kickstarter.
"""
type Conversation implements Node {
  """
  The backing made by the backer on the project this conversation is about
  """
  backing: Backing

  """
  When the first message was sent
  """
  createdAt: DateTime!

  id: ID!

  """
  Are there unread messages for the current user
  """
  isUnread: Boolean!

  """
  Timestamp of the most recent message in the thread
  """
  lastReceivedAt: DateTime

  """
  The number of messages between the backer and creator
  """
  messageCount: Int!

  """
  Messages that are part of this conversation
  """
  messages("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): ConversationMessagesConnection

  """
  The other participant to this conversation
  """
  otherParticipant: User

  """
  The project this conversation is about
  """
  project: Project
}

"""
The connection type for Message.
"""
type ConversationMessagesConnection {
  """
  A list of edges.
  """
  edges: [MessageEdge]

  """
  A list of nodes.
  """
  nodes: [Message]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type MessageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Message
}

"""
A message on Kickstarter.
"""
type Message implements Node {
  """
  Body of the message
  """
  body: String!

  id: ID!

  """
  The message is an submission appeal
  """
  isAppeal: Boolean!

  """
  When the message was first read
  """
  readAt: DateTime

  """
  The user who received this message
  """
  recipient: User

  """
  The user who sent this message
  """
  sender: User

  """
  When the message was sent
  """
  sentAt: DateTime

  """
  The message is spam
  """
  spam: Boolean!
}

"""
An order.
"""
type Order implements Node {
  """
  The delivery or home address associated with the order.
  """
  address: Address

  """
  The associated backer
  """
  backer: User!

  """
  The associated backing
  """
  backing: Backing!

  """
  The base reward on the order. Could be base reward from original backing or one from reward upgrade.
  """
  baseOrderOrderable: OrderOrderable

  """
  The voucher amount for the base orderable, or 0 if there is no base orderable
  """
  baseOrderableVoucherAmount: Int!

  """
  The voucher amount for the base orderable, or 0 if there is no base orderable, formatted
  """
  baseOrderableVoucherAmountFormatted: String!

  """
  Contains the backer's item preferences and responses to survey questions
  """
  cart: Cart

  """
  Whether there is required action for the backer to take in their pledge manager
  """
  checkoutRequired: Boolean!

  """
  The state of checkout (taking into account order and cart status)
  """
  checkoutState: CheckoutStateEnum!

  """
  Whether or not the order would be auto-exemptable if the order had no cross-sells.
  """
  checkoutVoucherOrBaseAutoCompletable: Boolean!

  """
  Order amounts converted to a backer's chosen currency
  """
  convertedCurrencyAmounts: ConvertedOrderAmounts

  """
  Add-ons selected for this order during Pledge Redemption
  """
  crossSells: [OrderOrderable!]!

  """
  The cross-sells total amount for the order
  """
  crossSellsTotal: Int!

  """
  The cross-sells total amount for the order, formatted
  """
  crossSellsTotalFormatted: String!

  """
  Add-ons selected for this order during Pledge Redemption with quantity
  """
  crossSellsWithQuantity: [OrderOrderableWithQuantity!]!

  """
  Add-ons selected for this order during Crowdfunding with quantity
  """
  crowdfundingAddonsWithQuantity: [OrderOrderableWithQuantity!]!

  """
  The total amount for crowdfunding and upgrade rewards
  """
  crowdfundingAndUpgradeTotal: Int!

  """
  Whether the order was upgraded from a crowdfunding reward to a pledge manager-only reward
  """
  crowdfundingRewardToNewRewardUpgrade: Boolean!

  """
  The currency of the order
  """
  currency: CurrencyCode!

  """
  Whether the order is in a finalized state
  """
  finalized: Boolean!

  """
  Whether or not the order was finalized but non-exempt.
  """
  finalizedAndNotExempt: Boolean!

  """
  Whether or not the order has been fully refunded
  """
  fullyRefunded: Boolean!

  id: ID!

  """
  Whether this order is a net new order for the pledge manager
  """
  isPledgeManagerNetNewBacker: Boolean!

  """
  Whether the rewards have tax included in the price
  """
  itemTaxIncluded: Boolean!

  """
  The order location.
  """
  location: Location

  """
  Whether the backer must acknowledge cross-sells to complete checkout
  """
  mustAcknowledgeCrossSells: Boolean!

  """
  Whether the backer must acknowledge upgrades to complete checkout
  """
  mustAcknowledgeUpgrades: Boolean!

  """
  The rewards included in the order
  """
  orderOrderables: [OrderOrderable!]!

  """
  The total voucher amount for all orderables, formatted
  """
  orderableVoucherTotalFormatted: String!

  """
  Payment source used on an order.
  """
  paymentSource: PaymentSource

  """
  The project associated with the order
  """
  project: Project!

  """
  The amount refunded for the shipping
  """
  refundedShippingAmount: Int

  """
  The amount refunded for the surcharge
  """
  refundedSurchargeAmount: Int

  """
  The amount refunded for the total tax
  """
  refundedTotalTax: Int

  """
  The remaining cost
  """
  remainingCost: Int!

  """
  The remaining cost
  """
  remainingCostFormatted: String!

  """
  The remaining shipping amount
  """
  remainingShippingAmount: Int

  """
  The remaining shipping amount
  """
  remainingShippingAmountFormatted: String

  """
  The remaining surcharge amount
  """
  remainingSurchargeAmount: Int

  """
  The remaining total tax
  """
  remainingTotalTax: Int

  """
  The remaining total tax
  """
  remainingTotalTaxFormatted: String

  """
  The currently-selected reward upgrade on an order
  """
  rewardUpgrade: OrderOrderable

  """
  The reward upgrade on an order after order is completed
  """
  rewardUpgradeFinal: OrderOrderable

  """
  The shipments associated with the order
  """
  shipments: [Shipment!]!

  """
  The amount of shipping
  """
  shippingAmount: Int

  """
  The cost of shipping, formatted
  """
  shippingAmountFormatted: String

  """
  The amount of shipping before any vouchers
  """
  shippingBaseAmountFormatted: String

  """
  Discount amount for shipping that was already paid
  """
  shippingVoucherAmount: Int!

  """
  Discount amount for shipping that was already paid, formatted
  """
  shippingVoucherAmountFormatted: String!

  """
  The order's state, e.g. draft, collected, dropped, etc.
  """
  state: OrderStateEnum!

  """
  The total surcharge amount for the order
  """
  surchargeAmount: Int

  """
  The total surcharge amount for the order, formatted
  """
  surchargeAmountFormatted: String

  """
  The localized tax (VAT, Tax, HST, etc) based on order address
  """
  taxLocalization("Whether or not the display is for a refund" refund: Boolean): String

  """
  The total cost for the order including taxes and shipping
  """
  total: Int

  """
  The total cost for the order including taxes and shipping, formatted
  """
  totalFormatted: String

  """
  The total tax amount for the order
  """
  totalTax: Int

  """
  The total tax amount for the order, formatted
  """
  totalTaxFormatted: String

  """
  Whether or not the location is in the EU or UK (uses VAT)
  """
  vatLocation: Boolean!
}

"""
The state of the order, e.g. draft, submitted, successful, errored, missed.
"""
enum OrderStateEnum {
  """
  draft
  """
  draft

  """
  auto_exempt
  """
  auto_exempt

  """
  calculated_exempt
  """
  calculated_exempt

  """
  collected
  """
  collected

  """
  dropped
  """
  dropped

  """
  refunded
  """
  refunded
}

"""
Order amounts converted to a user's chosen currency
"""
type ConvertedOrderAmounts {
  baseOrderableVoucherAmount: String!

  orderableVoucherTotal: String!

  shippingBaseAmount: String

  shippingVoucherAmount: String!

  surchargeAmount: String

  total: String

  totalTax: String
}

"""
An orderable included in an Order, e.g. a reward.
"""
type OrderOrderable {
  """
  The price, excluding tax
  """
  amountExcludingTax: Int!

  """
  The formatted price, excluding tax
  """
  amountExcludingTaxFormatted: String!

  """
  The price of one unit of the reward
  """
  baseAmount: Int!

  """
  The price of one unit of the reward
  """
  baseAmountFormatted: String!

  """
  The cost of the orderable, after voucher is applied
  """
  cost: Int!

  """
  The formatted cost of the orderable, after voucher is applied
  """
  costFormatted: String!

  id: ID!

  """
  Whether the orderable has been removed after order collection
  """
  isRemoved: Boolean!

  """
  The order items associated with the reward
  """
  orderItems: [OrderItem!]!

  """
  The reward data for this OrderOrderable
  """
  orderable: Orderable!

  """
  The amount refunded for the base amount
  """
  refundedBaseAmount: Int!

  """
  The amount refunded for the cost
  """
  refundedCost: Int!

  """
  The remaining base amount
  """
  remainingBaseAmountFormatted: String!

  """
  The remaining cost
  """
  remainingCost: Int!

  """
  The remaining cost
  """
  remainingCostFormatted: String!

  """
  The amount of the voucher
  """
  voucherAmount: Int!

  """
  The amount of the voucher
  """
  voucherAmountFormatted: String!
}

"""
An item included in an Order.
"""
type OrderItem {
  id: ID!

  """
  The line item associated with the order item
  """
  lineItem: LineItem

  """
  The name of the order item. This is the name of the product or service being purchased.
  """
  name: String!
}

union Orderable = Reward

"""
All rewards of a particular kind included in an Order, bundled together with their quantity and price information
"""
type OrderOrderableWithQuantity {
  """
  The orderable of the reward
  """
  orderable: Orderable!

  """
  The quantity of the reward in the Order
  """
  quantity: Int!

  """
  The total price of the reward
  """
  totalPrice: Int!

  """
  The total price of the reward, formatted
  """
  totalPriceFormatted: String!

  """
  The price of one unit of the reward
  """
  unitPrice: Int!

  """
  The price of one unit of the reward, formatted
  """
  unitPriceFormatted: String!
}

"""
A shipment included in an Order.
"""
type Shipment {
  """
  The cost of this shipment. This is the total amount charged for shipping (base amount), minus the amount charged at pledge (voucher amount).
  """
  cost: Int!

  id: ID!

  """
  The tracking number for this shipment.
  """
  trackingNumber: String
}

"""
The state of checkout, e.g. complete, in progress, incomplete.
"""
enum CheckoutStateEnum {
  """
  complete
  """
  complete

  """
  in_progress
  """
  in_progress

  """
  not_started
  """
  not_started
}

type PaymentIncrement {
  """
  The payment increment amount represented in various formats
  """
  amount: PaymentIncrementAmount!

  id: ID

  paymentIncrementableId: ID

  paymentIncrementableType: String

  scheduledCollection: ISO8601DateTime!

  state: PaymentIncrementState!

  stateReason: PaymentIncrementStateReason
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

enum PaymentIncrementState {
  """
  The initial state of the payment increment; payment source has not been charged
  """
  UNATTEMPTED

  """
  Payment source was successfully charged
  """
  COLLECTED

  """
  Payment source could not be charged due to an errored payment source or authentication being required
  """
  ERRORED

  """
  Payment increment is cancelled by user action or is an abandoned increment due to failure to complete payment
  """
  CANCELLED

  """
  Backer issued a dispute and we (kickstarter) lost the dispute
  """
  CHARGEBACK_LOST

  """
  Payment increment has been refunded
  """
  REFUNDED
}

enum PaymentIncrementStateReason {
  """
  The payment source has attempted to be charged, but issuer requires additional authentication to complete the payment
  """
  REQUIRES_ACTION
}

"""
Representations of the payment increment amount with cents, float, and currency variations
"""
type PaymentIncrementAmount {
  """
  The increment amount in the smallest denomination of the currency, ie 3750 for the USD currency
  """
  amountAsCents: String!

  """
  The increment amount represented as a float, ie 37.50 for the USD currency
  """
  amountAsFloat: String!

  """
  The increment amount represented as a float with the currency symbol, ie $37.50
  """
  amountFormattedInProjectNativeCurrency: String!

  """
  The increment amount represented as a float with the currency symbol and three-letter currency code, ie $37.50 USD
  """
  amountFormattedInProjectNativeCurrencyWithCurrencyCode: String!

  """
  A three-letter currency code for the increment (ie the currency of the project)
  """
  currency: String!
}

"""
An adjustment summary.
"""
type AdjustmentSummary implements Node {
  """
  The associated backing/order
  """
  adjustable: Backing!

  """
  The current state of the backing or order
  """
  adjustedSummary: AdjustedSummary

  """
  An array of adjustments associated with the AdjustmentSummary
  """
  adjustments: [Adjustment!]!

  id: ID!

  """
  The sum of all refunded amounts on the adjustable
  """
  refundedAmount: Int
}

"""
Adjustment to an order, created to issue a refund.
"""
type Adjustment {
  """
  Timestamp at which adjustment was created
  """
  createdAt: ISO8601DateTime!

  """
  Adjustment ID
  """
  id: String!

  """
  Metadata for the adjustment, including refunds and removals
  """
  metadata: AdjustmentMetadata!

  """
  State of associated refund checkout
  """
  refundCheckoutState: RefundCheckoutState

  """
  Timestamp at which adjustment was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
All available states for a refund checkout
"""
enum RefundCheckoutState {
  AUTHORIZING

  SUCCESSFUL

  ERRORED

  FAILED
}

"""
Metadata for adjustment to order
"""
type AdjustmentMetadata {
  """
  Reason for adjustment
  """
  reason: RefundReasonType!

  """
  ID of associated RefundCheckout
  """
  refundCheckoutId: String!

  """
  Refunds to be issued in adjustment
  """
  refunds: [AdjustmentRefund!]!

  """
  Objects to be removed from order in adjustment
  """
  removals: [AdjustmentRemoval!]!
}

"""
Reasons for refunds
"""
enum RefundReasonType {
  """
  Change of reward or removal of reward item
  """
  CHANGE_REMOVAL

  """
  Issues with or delays in fulfillment
  """
  FULFILLMENT_ISSUES_DELAYS

  """
  Creator issued credit
  """
  CREDIT

  """
  Backer overpaid for reward
  """
  OVERPAYMENT

  """
  Backer requested refund
  """
  BACKER_REQUEST

  """
  Other reason for refund
  """
  OTHER
}

"""
An object removed as part of an adjustment.
"""
type AdjustmentRemoval {
  """
  id of object to be removed
  """
  id: ID!

  """
  type of object to be removed (reward, reward item, or order item)
  """
  type: RefundAdjustmentType!
}

"""
All types of refund adjustments that can be issued
"""
enum RefundAdjustmentType {
  """
  refund for full reward tier
  """
  REWARD

  """
  refund for individual item in a reward tier
  """
  REWARD_ITEM

  """
  refund for an add-on or cross-sell in the order
  """
  ORDER_ITEM

  """
  refund for bonus support
  """
  BONUS_AMOUNT

  """
  refund for shipping fees
  """
  SHIPPING_CREDIT

  """
  general refund
  """
  GENERAL_REFUND
}

"""
A refund issued as part of an adjustment.
"""
type AdjustmentRefund {
  """
  amount to be refunded
  """
  amount: Int!

  """
  id of object to be refunded
  """
  id: ID!

  """
  type of refund
  """
  type: RefundAdjustmentType!
}

"""
Current state of a backing after all adjustments are applied.
"""
type AdjustedSummary {
  """
  list of rewards, original total costs, and totals after adjustments
  """
  allRewards: [AdjustmentReward!]!

  """
  current total amount for backing
  """
  amount: Int!

  """
  current bonus amount for backing
  """
  bonusAmount: AdjustmentAmount

  """
  current shipping amount for backing
  """
  shippingAmount: AdjustmentAmount

  """
  current backing status
  """
  status: BackingState!
}

"""
A hash containing the original, refunded, and remaining amounts.
"""
type AdjustmentAmount {
  """
  original total amount
  """
  originalTotal: Int!

  """
  amount that has been refunded after all adjustments are applied
  """
  refundedTotal: Int!

  """
  amount remaining after all adjustments are applied
  """
  remainingTotal: Int!

  """
  whether the reward has been removed from the backing
  """
  removed: Boolean
}

"""
A reward that is modified by an adjustment.
"""
type AdjustmentReward {
  """
  original total amount
  """
  originalTotal: Int!

  """
  uuid for the refund item
  """
  refundItemId: ID!

  """
  amount that has been refunded after all adjustments are applied
  """
  refundedTotal: Int!

  """
  amount remaining after all adjustments are applied
  """
  remainingTotal: Int!

  """
  whether the reward has been removed from the backing
  """
  removed: Boolean

  """
   graphql id of reward to be refunded
  """
  rewardId: String!
}

"""
A refund.
"""
type Refund implements Node {
  """
  The associated backing
  """
  backing: Backing!

  """
  The adjustment for the backings reward, addons, and/or bonus amount
  """
  backingAdjustmentData: RefundAdjustmentData

  """
  The refund checkout associated with the backing adjustment
  """
  backingAdjustmentRefundCheckout: RefundCheckout

  """
  Timestamp at which refund was created
  """
  createdAt: DateTime!

  id: ID!

  """
  message from the creator associated with this refund
  """
  message: String

  """
  The adjustment for the order's addons, shipping taxes, sales taxes, and pledge upgrade
  """
  orderAdjustmentData: RefundAdjustmentData

  """
  reason for the refund
  """
  reason: RefundReasonType!

  """
  The refund details path
  """
  refundDetailsPath: String!

  """
  The total refunded from this refund attempt, formatted
  """
  totalFormatted: String!
}

"""
The refund adjustment data for a backing or an order.
"""
type RefundAdjustmentData {
  """
  The adjustment details for the addons
  """
  addons: [AdjustedReward!]!

  """
  The adjustment details for the bonus support
  """
  bonusSupport: String

  """
  The client secret for the adjustment
  """
  clientSecret: String

  """
  Whether the adjustment requires action
  """
  requiresAction: Boolean

  """
  The adjustment details for the reward
  """
  reward: AdjustedReward

  """
  The adjustment details for the upgraded reward
  """
  rewardUpgrade: AdjustedReward

  """
  Whether the reward was upgraded
  """
  rewardUpgraded: Boolean

  """
  The adjustment details for the shipping and shipping tax
  """
  shipping: String

  """
  The reason for the adjustment state
  """
  stateReason: String

  """
  Whether the adjustment was successfully refunded
  """
  success: Boolean!

  """
  The adjustment details for the surcharge
  """
  surcharge: String

  """
  The adjustment details for the sales tax
  """
  tax: String

  """
  The adjustment total
  """
  total: String!
}

"""
The adjusted reward.
"""
type AdjustedReward {
  """
  The total amount refunded for the reward
  """
  amount: String!

  """
  The name of the reward
  """
  name: String!
}

"""
Intermediary set of changes that have yet to be applied to a backing
"""
type RefundCheckout {
  """
  The total amount of the refund
  """
  amount: Money!

  """
  The backing associated with the refund
  """
  backing: Backing

  """
  If `requires_action` is true, `client_secret` should be used to initiate additional client-side authentication steps
  """
  clientSecret: String

  id: ID!

  """
  Whether this refund checkout requires additional client-side authentication steps (e.g. 3DS2)
  """
  requiresAction: Boolean!

  """
  The state of the redund checkout
  """
  state: RefundCheckoutState!

  """
  Reason given when state is in a failed state
  """
  stateReason: String

  """
  The full URL to redirect to after payment setup via Stripe in refunds
  """
  stripePaymentSetupRedirectUrl: String!
}

"""
An HTML string.
"""
scalar HTML

"""
Itemized rich text
"""
type RichText {
  items: [RichTextItem]!
}

union RichTextItem = RichTextParagraph|RichTextHeader1|RichTextHeader2|RichTextHeader3|RichTextHeader4|RichTextList|RichTextQuote|RichTextPhoto|RichTextAudio|RichTextVideo|RichTextOembed

"""
A Paragraph. <p>
"""
type RichTextParagraph {
  html: String!
}

"""
A Header 1. <h1>
"""
type RichTextHeader1 {
  html: String!
}

"""
A Header 2. <h2>
"""
type RichTextHeader2 {
  html: String!
}

"""
A Header 3. <h3>
"""
type RichTextHeader3 {
  html: String!
}

"""
A Header 4. <h4>
"""
type RichTextHeader4 {
  html: String!
}

"""
A list. <ul>
"""
type RichTextList {
  items: [RichTextListItem!]!
}

"""
A list item. <li>
"""
type RichTextListItem {
  html: String!
}

"""
A quote. <blockquote>
"""
type RichTextQuote {
  html: String!
}

"""
A Photo asset
"""
type RichTextPhoto {
  altText: String!

  asset: Photo

  caption: String!

  url("The width of the image in pixels." width: Int): String!
}

"""
An Audio asset
"""
type RichTextAudio {
  altText: String!

  asset: AttachedAudio

  caption: String!

  url: String!
}

type AttachedAudio implements Node {
  id: ID!

  """
  Upload status of the audio
  """
  status: AssetEncodingState!

  url: String
}

"""
All available asset upload states
"""
enum AssetEncodingState {
  """
  Initial, incomplete status of an asset upload
  """
  ENCODING

  """
  Processing the asset successfully completed
  """
  ENCODED

  """
  Processing the asset failed
  """
  FAILED
}

"""
A Video asset
"""
type RichTextVideo {
  altText: String!

  asset: AttachedVideo

  caption: String!

  url: String!
}

type AttachedVideo implements Node {
  formats: [AttachedVideoFormat]

  id: ID!

  """
  Image preview url
  """
  poster: String

  """
  The rendered HTML player for a video asset
  """
  renderedHtml("The width of the video asset in pixels." assetWidth: Int): String

  """
  Upload status of the video
  """
  status: AssetEncodingState!

  """
  Original video url
  """
  url: String
}

type AttachedVideoFormat {
  encoding: String!

  height: String!

  profile: String!

  url: String!

  width: String!
}

"""
An Oembed item
"""
type RichTextOembed {
  """
  ex: Bryson Lovett
  """
  authorName: String!

  """
  ex: https://www.youtube.com/user/brysonlovett
  """
  authorUrl: String!

  """
  ex: 270
  """
  height: Int!

  """
  ex: <iframe width="560" height="315" src="https://www.youtube.com/embed/ijeaVn8znJ8?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
  """
  html: String!

  """
  ex: https://www.youtube.com/embed/ijeaVn8znJ8?feature=oembed
  """
  iframeUrl: String!

  """
  ex: https://youtu.be/ijeaVn8znJ8
  """
  originalUrl: String!

  """
  only for photo
  """
  photoUrl: String!

  """
  Ex: Embedly, Flickr, Kickstarter, Kickstarter Live, Scribd, SoundCloud, Spotify, Sketchfab, Twitter, Vimeo, YouTube
  """
  providerName: String!

  """
  ex: https://www.youtube.com/
  """
  providerUrl: String!

  """
  ex: 360
  """
  thumbnailHeight: Int!

  """
  ex: https://i.ytimg.com/vi/ijeaVn8znJ8/hqdefault.jpg
  """
  thumbnailUrl: String!

  """
  ex: 480
  """
  thumbnailWidth: Int!

  """
  ex: Bird Photo Booth bird feeder kickstarter preview 2
  """
  title: String!

  """
  one of: photo, video, link, rich
  """
  type: String!

  """
  always "1.0"
  """
  version: String!

  """
  ex: 480
  """
  width: Int!
}

"""
A project's account information.
"""
type AccountInfo {
  """
  Payment sources available to the project.
  """
  availablePaymentSources: [CreditCard]!

  """
  The account for funds.
  """
  depositAccount: DepositAccount

  """
  A project's email contact.
  """
  email: String!

  """
  Whether or not a project's email contact has been verified.
  """
  isEmailVerified: Boolean!

  """
  Payment source for dispute resolution.
  """
  paymentSource: CreditCard

  paymentsOnboarding: PaymentsOnboarding!

  """
  True if the project accepts an account holder name.
  """
  usesAccountHolderName: Boolean!

  """
  True if the project accepts a routing number.
  """
  usesRoutingNumber: Boolean!
}

"""
A representation of the creator's progress through the payments & identity parts of Project Build onboarding. Currently just their overall 'status'
"""
type PaymentsOnboarding {
  status: PaymentsOnboardingStatus!
}

"""
The overall status of the payments & identity onboarding flow of project build.
"""
enum PaymentsOnboardingStatus {
  """
  The creator successfully completed payments & identity onboarding
  """
  complete

  """
  The creator has started onboarding but has not yet finished
  """
  in_progress

  """
  The creator must proceed to Stripe Hosted Onboarding to finish onboarding
  """
  requires_hosted_onboarding
}

"""
A deposit account.
"""
type DepositAccount {
  """
  The deposit account business type.
  """
  accountBusinessType: DepositAccountBusiness

  """
  The last four digits of the account number.
  """
  accountLastFour: String

  """
  Identity verifications for anyone owning > 25% of the company (if the identity is a legal entity)
  """
  additionalOwners: [AdditionalOwner]

  """
  The company associated with this deposit account.
  """
  company: Company

  """
  The name associated with either the associated company or identity
  """
  contactName: String

  """
  The Rosie ID for this DepositAccount
  """
  id: ID!

  """
  The identity associated with this deposit account.
  """
  identity: Identity

  """
  Whether the deposit account is in the EU.
  """
  isInEuropeanUnion: Boolean!

  """
  Whether the deposit account is in the UK.
  """
  isInUnitedKingdom: Boolean!

  """
  Has the Stripe Account been created for this deposit account.
  """
  isStripeAccountCreated: Boolean!

  """
  The routing number.
  """
  routingNumber: String

  """
  The deposit account's state.
  """
  state: DepositAccountState!

  """
  Either the company or identity street address
  """
  streetAddress: StreetAddress
}

"""
The street address of an individual or company
"""
type StreetAddress {
  """
  2-letter country code
  """
  country: String

  """
  City/District/Suburb/Town/Village
  """
  locality: String

  """
  ZIP or postal code
  """
  postalCode: String

  """
  State/County/Province/Region.
  """
  region: String

  """
  Address line 1 (Street address/PO Box/Company name)
  """
  street1: String

  """
  Address line 2 (Apartment/Suite/Unit/Building)
  """
  street2: String
}

"""
A deposit account's company.
"""
type Company {
  """
  The company name.
  """
  name: String!

  phoneNumber: String

  streetAddress: StreetAddress!

  vatNumber: String

  verification: AsynchronousVerification!
}

type AsynchronousVerification {
  """
  If it didn't pass verification, this array will contain the names of the attributes that failed (e.g., for a Company: ['address.line1'])
  """
  fieldsNeeded: [String!]!

  state: AsynchronousVerificationState!
}

"""
Something that is expected to eventually become either 'verified' or 'unverified', but may remain 'pending' for an indefinite amount of time
"""
enum AsynchronousVerificationState {
  pending

  unverified

  verified
}

"""
A deposit account's identity.
"""
type Identity {
  """
  ID of the identity
  """
  id: Int

  """
  The most recent identity document
  """
  identityDocument: IdentityDocument

  """
  The account-holder name.
  """
  name: String

  verification: AsynchronousVerification
}

"""
The relevant identity document supplied for identity verification.
"""
type IdentityDocument {
  """
  The associated identity's verification state
  """
  identityState: IdentityVerificationState

  verificationState: IdentityDocumentVerificationStates!
}

"""
Identity document verification states.
"""
enum IdentityDocumentVerificationStates {
  SUCCESSFUL

  FAILED

  STARTED

  PENDING

  ABANDONED
}

"""
Identity verification states.
"""
enum IdentityVerificationState {
  ERROR

  FAILED

  PASSED

  STARTED

  VERIFYING
}

"""
Deposit account states.
"""
enum DepositAccountState {
  ACTIVE

  FAILED

  INACTIVE

  UNAUTHORIZED

  VERIFYING
}

"""
Needed for the verification of legal entities that have multiple owners
"""
type AdditionalOwner {
  address: AdditionalOwnerAddress!

  birthdate: AdditionalOwnerBirthdate

  firstName: String

  id: ID!

  lastName: String

  personalIdNumberProvided: Boolean!

  verification: AdditionalOwnerVerification!
}

type AdditionalOwnerAddress {
  country: String
}

type AdditionalOwnerBirthdate {
  day: Int

  month: Int

  year: Int
}

type AdditionalOwnerVerification {
  details: String

  detailsCode: String

  document: String

  documentBack: String

  state: AsynchronousVerificationState!
}

"""
Deposit account business types.
"""
enum DepositAccountBusiness {
  individual

  company

  non_profit
}

"""
An AI disclosure.
"""
type AiDisclosure implements Node {
  fundingForAiAttribution: Boolean

  fundingForAiConsent: Boolean

  fundingForAiOption: Boolean

  generatedByAiConsent: String

  generatedByAiDetails: String

  id: ID!

  involvesAi: Boolean!

  involvesFunding: Boolean!

  involvesGeneration: Boolean!

  involvesOther: Boolean!

  otherAiDetails: String
}

"""
A project category.
"""
type Category implements Node {
  """
  Category name in English for analytics use.
  """
  analyticsName: String!

  """
  Advised maximum goal limit in USD
  """
  goalHelperLimit: Float

  id: ID!

  """
  Category name.
  """
  name: String!

  """
  Category parent
  """
  parentCategory: Category

  """
  Parent id of the category.
  """
  parentId: ID

  """
  The translatable phrase (e.g. "An art project"))
  """
  projectPhrase: String

  """
  Projects in a category.
  """
  projects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filter projects by publically accessible state." state: PublicProjectState!): CategoryProjectsConnection

  """
  Category slug.
  """
  slug: String!

  """
  Subcategories.
  """
  subcategories("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): CategorySubcategoriesConnection

  totalProjectCount: Int!

  """
  A URL to the category page.
  """
  url: String!
}

"""
The connection type for Project.
"""
type CategoryProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
Publically visible project states.
"""
enum PublicProjectState {
  """
  Active and accepting pledges.
  """
  LIVE

  """
  Successfully funded by deadline.
  """
  SUCCESSFUL

  """
  Failed to fund by deadline.
  """
  FAILED

  """
  Project is submitted and in prelaunch state.
  """
  SUBMITTED

  """
  Project that is in prelaunch.
  """
  UPCOMING

  """
  Project that is successful and accepting late pledges.
  """
  LATE_PLEDGE
}

"""
The connection type for Category.
"""
type CategorySubcategoriesConnection {
  """
  A list of edges.
  """
  edges: [CategoryEdge]

  """
  A list of nodes.
  """
  nodes: [Category]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type CategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Category
}

"""
A permission for a collaborator on a project
"""
enum CollaboratorPermission {
  edit_project

  edit_faq

  post

  comment

  view_pledges

  fulfillment

  configure_pledge_manager

  launch_pledge_manager

  launch_prelaunch
}

"""
A supported country.
"""
type Country {
  """
  ISO ALPHA-2 code.
  """
  code: CountryCode!

  """
  Country name.
  """
  name: String!

  """
  Regions part of this country
  """
  regions: [Region]!

  """
  Regions that Stripe supports for Stripe Accounts
  """
  stripeAccountSupportedRegions: [Region]!
}

"""
A region inside a country.
"""
type Region {
  """
  Region code.
  """
  code: String!

  """
  Region name.
  """
  name: String!
}

"""
A Project that has a generated share token.
"""
type ProjectSharedDraft {
  """
  The project id of a shared draft
  """
  id: String!

  """
  The project name of a shared draft
  """
  name: String!
}

"""
Curated collections of projects, represented by badges.
"""
type CuratedCollection {
  badge: String

  name: String!

  url: String!
}

type EnvironmentalCommitment {
  """
  The type of environmental commitment
  """
  commitmentCategory: EnvironmentalCommitmentCategory!

  """
  An environmental commitment description
  """
  description: String!

  id: ID!
}

"""
The type of environmental commitment for a project.
"""
enum EnvironmentalCommitmentCategory {
  """
  long lasting design
  """
  long_lasting_design

  """
  sustainable materials
  """
  sustainable_materials

  """
  environmentally friendly factories
  """
  environmentally_friendly_factories

  """
  sustainable distribution
  """
  sustainable_distribution

  """
  reusability and recyclability
  """
  reusability_and_recyclability

  """
  something else
  """
  something_else
}

"""
A number between 0.0 and 1.0.
"""
scalar Ratio

"""
A profile for after a project has ended.
"""
type ProjectProfile implements Node {
  """
  The description of the projects from the project's profile.
  """
  blurb: String

  """
  Featured image for this project profile.
  """
  featureImageUrl("The width of the image in pixels." width: Int!): String

  id: ID!

  """
  The name from the project's profile.
  """
  name: String

  """
  The project profile's current state.
  """
  state: ProjectProfileState!
}

"""
Various project profile states.
"""
enum ProjectProfileState {
  INACTIVE

  ACTIVE
}

"""
The different bitly hashes for a project
"""
enum BitlyHashes {
  """
  A project's share link
  """
  SHARE

  """
  A project's twitter share link
  """
  TWEET

  """
  A project's facebook share link
  """
  FACEBOOK

  """
  A project's email share link
  """
  EMAIL
}

"""
Score and model from recommendations engine if a project was fetched via recommendations.
"""
type Recommendations {
  """
  Model used for these recommendations.
  """
  modelName: String

  """
  Raw score from recommendations.
  """
  rawScore: Float

  """
  Recommendations score.
  """
  score: Float
}

"""
A category of risk. Each category corresponds to a question in the project Plan.
"""
type RiskQuestion {
  """
  The input type of the risk category.
  """
  inputType: RiskCategoryInput!

  """
  The question associated with the risk category.
  """
  question: String!

  """
  Whether or not this is a required category.
  """
  required: Boolean!

  """
  The category identifier.
  """
  type: RiskCategoryType!
}

enum RiskCategoryType {
  delays

  unexpected_pledge_volume

  previous_experience

  fulfillment_plan

  project_budget_contingency

  alternative_fulfillment_path
}

"""
Describes the expected input type for a risk category.
"""
enum RiskCategoryInput {
  text

  radio
}

type RiskStrategy {
  """
  Creator's answer for mitigating this particular risk category.
  """
  description: String!

  id: ID!

  """
  The type of risk
  """
  riskCategory: RiskCategoryType!

  """
  The question the creator is answering.
  """
  riskQuestion: RiskQuestion!
}

"""
Various project states.
"""
enum ProjectState {
  """
  Created and preparing for launch.
  """
  STARTED

  """
  Ready for launch with a draft submitted for auto-approval.
  """
  SUBMITTED

  """
  Active and accepting pledges.
  """
  LIVE

  """
  Canceled by creator.
  """
  CANCELED

  """
  Suspended for investigation, visible.
  """
  SUSPENDED

  """
  Suspended and hidden.
  """
  PURGED

  """
  Successfully funded by deadline.
  """
  SUCCESSFUL

  """
  Failed to fund by deadline.
  """
  FAILED
}

"""
A project spreadsheet, including a url and row data
"""
type Spreadsheet {
  """
  The data of the Google Sheet associated to this project
  """
  data: [SpreadsheetDatum]

  """
  When the data for the sheet was last fetched successfully
  """
  dataLastUpdatedAt: ISO8601DateTime

  """
  Can be `amount` or `percent` based on the creator's choice
  """
  displayMode: String!

  """
  Whether a spreadsheet contains the minimum information to render a graphic budget
  """
  hasDisplayableData: Boolean!

  """
  Whether the sheet is shareable with the public
  """
  public: Boolean!

  """
  The URL of the Google Sheet associated to this project
  """
  url: String
}

"""
A row of datum for a funding spreadsheet
"""
type SpreadsheetDatum {
  """
  Expanded description of the purpose of that row
  """
  description: String

  """
  The name of the row
  """
  name: String

  """
  The funding category of the row
  """
  phase: String

  """
  The spreadsheet row number
  """
  rowNum: Int!

  """
  The dollar value of the row
  """
  value: Float
}

"""
Project status set by user
"""
type ProjectStatus {
  """
  Whether the project status is currently enabled or not (opted-in / opted-out)
  """
  enabled: Boolean!

  """
  Id of a project status
  """
  id: String!

  """
  The estimated due date for the next_status of the project
  """
  nextDueDate: ISO8601DateTime!

  """
  The next_status of the project
  """
  nextStatus: String!

  """
  The now_status of the project
  """
  nowStatus: String!

  """
  When project status is updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Structured feedback left by a user on a project
"""
type ProjectFeedback {
  """
  When the answer was provided
  """
  createdAt: ISO8601DateTime

  """
  The answer the user provided
  """
  questionAnswer: String!

  """
  The name of the question the user answered
  """
  questionName: String!
}

"""
Milestones for projects
"""
type ProjectMilestone {
  """
  When the Milestone was marked as completed
  """
  completedAt: ISO8601DateTime

  """
  The category for the Milestone
  """
  milestoneCategory: String!
}

type MilestoneCategory {
  """
  Name of category
  """
  name: String!

  """
  Order to display category in for Project
  """
  order: Int!
}

"""
A project tag.
"""
type Tag implements Node {
  id: ID!

  """
  Tag name.
  """
  name: String!

  """
  Projects associated with a tag.
  """
  projects("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Filter projects by publically accessible state." state: PublicProjectState!): TagProjectsConnection

  """
  Tag slug.
  """
  slug: String!

  """
  A URL for the tag page.
  """
  url: String!
}

"""
The connection type for Project.
"""
type TagProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
Various scopes for tags.
"""
enum TagScope {
  """
  Tags currently visible in discovery interfaces.
  """
  DISCOVER

  """
  Tags currently available as creative prompts.
  """
  CREATIVE_PROMPT
}

"""
A submission for a project on Kickstarter.
"""
type Submission {
  """
  The message from the creator appealing a rejection.
  """
  appeal: Message

  """
  If the submission has messages between the creator and KSR staff.
  """
  hasMessages: Boolean!

  id: ID!

  """
  If the system has processed a submission for review.
  """
  isProcessed: Boolean!

  """
  A submission's messages between the creator and KSR staff.
  """
  messages: [Message]

  """
  The submission's current state.
  """
  state: SubmissionState!

  """
  When was the project first submitted?
  """
  submittedAt: DateTime
}

"""
Various submission states.
"""
enum SubmissionState {
  """
  Not yet submitted.
  """
  DRAFT

  """
  Submitted for review, waiting for acception or rejection.
  """
  PENDING

  """
  Accepted by a reviewer, can launch.
  """
  ACCEPTED

  """
  Rejection appealed, asking for re-review.
  """
  APPEALED

  """
  Rejected by a reviewer, cannot launch.
  """
  REJECTED
}

"""
A project video
"""
type Video implements Node {
  id: ID!

  """
  Preview image url for the video
  """
  previewImageUrl: String

  """
  Upload status of the video
  """
  status: VideoState!

  """
  A video's tracks
  """
  tracks("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): VideoTracksConnection

  """
  A video's sources (hls, high, base)
  """
  videoSources: VideoSources
}

"""
All available video states
"""
enum VideoState {
  """
  Initial, incomplete status of a video
  """
  PROCESSING

  """
  Processing the video file failed
  """
  FAILED

  """
  Processing the video file successfully completed
  """
  SUCCESSFUL
}

"""
A video's sources
"""
type VideoSources {
  base: VideoSourceInfo

  high: VideoSourceInfo

  hls: VideoSourceInfo
}

"""
The details of a video's source
"""
type VideoSourceInfo {
  src: String

  type: String
}

"""
The connection type for VideoTrack.
"""
type VideoTracksConnection {
  """
  A list of edges.
  """
  edges: [VideoTrackEdge]

  """
  A list of nodes.
  """
  nodes: [VideoTrack]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type VideoTrackEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VideoTrack
}

"""
A video caption
"""
type VideoTrack implements Node {
  """
  A video track's cues (individaul caption with timestamp)
  """
  cues("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): VideoTrackCuesConnection

  id: ID!

  """
  Import status of a video track
  """
  importStatus: VideoTrackState!

  """
  The type of a video track (caption, subtitle)
  """
  kind: String!

  """
  The language of the video track
  """
  language: CaptionLanguage!

  """
  A video track public ID
  """
  tid: Int!

  trackSourceUrl: String!
}

"""
A language eligible for captions in video tracks.
"""
type CaptionLanguage {
  """
  The code used as a key for the language.
  """
  code: CaptionLanguageCode!

  """
  The name of the language.
  """
  name: String!
}

"""
Two letter language code for eligible caption languages
"""
enum CaptionLanguageCode {
  """
  English
  """
  EN

  """
  العربية
  """
  AR

  """
  Català
  """
  CA

  """
  Čeština
  """
  CS

  """
  Dansk
  """
  DA

  """
  Deutsch
  """
  DE

  """
  ελληνικά
  """
  EL

  """
  Español (España)
  """
  ES_ES

  """
  Español (México)
  """
  ES_MX

  """
  Suomi
  """
  FI

  """
  Français
  """
  FR

  """
  Gaeilge
  """
  GA

  """
  עברית
  """
  HE

  """
  हिन्दी
  """
  HI

  """
  Hrvatski
  """
  HR

  """
  Magyar
  """
  HU

  """
  Bahasa Indonesia
  """
  ID

  """
  Italiano
  """
  IT

  """
  日本語
  """
  JA

  """
  한국어
  """
  KO

  """
  Bahasa Melayu
  """
  MS

  """
  Norsk bokmål
  """
  NB

  """
  नेपाली
  """
  NPI

  """
  Nederlands
  """
  NL

  """
  Diné bizaad
  """
  NV

  """
  Polski
  """
  PL

  """
  فارسی
  """
  PES

  """
  دری
  """
  PRS

  """
  Português (Brasil)
  """
  PT_BR

  """
  Português (Portugal)
  """
  PT_PT

  """
  Română
  """
  RO

  """
  Русский
  """
  RU

  """
  Slovenčina
  """
  SK

  """
  Svenska
  """
  SV

  """
  ภาษาไทย
  """
  TH

  """
  Türkçe
  """
  TR

  """
  українська
  """
  UK

  """
  tiếng Việt
  """
  VI

  """
  יידיש
  """
  YI

  """
  简体中文
  """
  ZH_CN

  """
  繁體中文
  """
  ZH_TW
}

"""
All possible import states for a video track
"""
enum VideoTrackState {
  """
  Not import exists
  """
  NONE

  """
  An import is in progress
  """
  IMPORTING

  """
  An import was successful
  """
  SUCCESS

  """
  An import attempt was unsuccessful
  """
  FAILURE
}

"""
The connection type for VideoTrackCue.
"""
type VideoTrackCuesConnection {
  """
  A list of edges.
  """
  edges: [VideoTrackCueEdge]

  """
  A list of nodes.
  """
  nodes: [VideoTrackCue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type VideoTrackCueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VideoTrackCue
}

"""
A single video track caption with timestamp
"""
type VideoTrackCue implements Node {
  id: ID!
}

"""
A report by a user.
"""
type Flagging implements Node {
  """
  The detailed reason for the flagging.
  """
  details: String!

  """
  The content that has been flagged by the user.
  """
  flaggedContent: FlaggableContent

  id: ID!

  """
  The general reason for the flagging.
  """
  kind: FlaggingKind

  """
  The user who created the flagging.
  """
  user: User
}

union FlaggableContent = Message|Project

"""
The bucket for a flagging (general reason).
"""
enum FlaggingKind {
  """
  prohibited-items
  """
  PROHIBITED_ITEMS

  """
  charity
  """
  CHARITY

  """
  resale
  """
  RESALE

  """
  false-claims
  """
  FALSE_CLAIMS

  """
  misrep-support
  """
  MISREP_SUPPORT

  """
  not-project
  """
  NOT_PROJECT

  """
  guidelines-violation
  """
  GUIDELINES_VIOLATION

  """
  post-funding-issues
  """
  POST_FUNDING_ISSUES

  """
  spam
  """
  SPAM

  """
  abuse
  """
  ABUSE

  """
  vices-drugs
  """
  VICES_DRUGS

  """
  vices-alcohol
  """
  VICES_ALCOHOL

  """
  vices-weapons
  """
  VICES_WEAPONS

  """
  health-claims
  """
  HEALTH_CLAIMS

  """
  health-regulations
  """
  HEALTH_REGULATIONS

  """
  health-gmos
  """
  HEALTH_GMOS

  """
  health-live-animals
  """
  HEALTH_LIVE_ANIMALS

  """
  health-energy-food-and-drink
  """
  HEALTH_ENERGY_FOOD_AND_DRINK

  """
  financial-contests-coupons
  """
  FINANCIAL_CONTESTS_COUPONS

  """
  financial-services
  """
  FINANCIAL_SERVICES

  """
  financial-political-donations
  """
  FINANCIAL_POLITICAL_DONATIONS

  """
  offensive-content-hate
  """
  OFFENSIVE_CONTENT_HATE

  """
  offensive-content-porn
  """
  OFFENSIVE_CONTENT_PORN

  """
  reselling
  """
  RESELLING

  """
  plagiarism
  """
  PLAGIARISM

  """
  prototype-misrepresentation
  """
  PROTOTYPE_MISREPRESENTATION

  """
  undisclosed-ai-use
  """
  UNDISCLOSED_AI_USE

  """
  misrep-support-impersonation
  """
  MISREP_SUPPORT_IMPERSONATION

  """
  misrep-support-outstanding-fulfillment
  """
  MISREP_SUPPORT_OUTSTANDING_FULFILLMENT

  """
  misrep-support-suspicious-pledging
  """
  MISREP_SUPPORT_SUSPICIOUS_PLEDGING

  """
  misrep-support-other
  """
  MISREP_SUPPORT_OTHER

  """
  not-project-charity
  """
  NOT_PROJECT_CHARITY

  """
  not-project-stunt-or-hoax
  """
  NOT_PROJECT_STUNT_OR_HOAX

  """
  not-project-personal-expenses
  """
  NOT_PROJECT_PERSONAL_EXPENSES

  """
  not-project-barebones
  """
  NOT_PROJECT_BAREBONES

  """
  not-project-other
  """
  NOT_PROJECT_OTHER

  """
  guidelines-spam
  """
  GUIDELINES_SPAM

  """
  guidelines-abuse
  """
  GUIDELINES_ABUSE

  """
  post-funding-reward-not-as-described
  """
  POST_FUNDING_REWARD_NOT_AS_DESCRIBED

  """
  post-funding-reward-delayed
  """
  POST_FUNDING_REWARD_DELAYED

  """
  post-funding-shipped-never-received
  """
  POST_FUNDING_SHIPPED_NEVER_RECEIVED

  """
  post-funding-creator-selling-elsewhere
  """
  POST_FUNDING_CREATOR_SELLING_ELSEWHERE

  """
  post-funding-creator-uncommunicative
  """
  POST_FUNDING_CREATOR_UNCOMMUNICATIVE

  """
  post-funding-creator-inappropriate
  """
  POST_FUNDING_CREATOR_INAPPROPRIATE

  """
  post-funding-suspicious-third-party
  """
  POST_FUNDING_SUSPICIOUS_THIRD_PARTY

  """
  comment-abuse
  """
  COMMENT_ABUSE

  """
  comment-doxxing
  """
  COMMENT_DOXXING

  """
  comment-offtopic
  """
  COMMENT_OFFTOPIC

  """
  comment-spam
  """
  COMMENT_SPAM

  """
  backing-abuse
  """
  BACKING_ABUSE

  """
  backing-doxxing
  """
  BACKING_DOXXING

  """
  backing-fraud
  """
  BACKING_FRAUD

  """
  backing-spam
  """
  BACKING_SPAM
}

"""
The connection type for User.
"""
type ProjectBackerFriendsConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
The connection type for ProjectFaq.
"""
type ProjectFaqConnection {
  """
  A list of edges.
  """
  edges: [ProjectFaqEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectFaq]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectFaqEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectFaq
}

"""
Faqs for a project
"""
type ProjectFaq {
  """
  Faq answer
  """
  answer: String!

  """
  When faq was posted
  """
  createdAt: DateTime

  id: ID!

  """
  position
  """
  position: Int!

  """
  Faq question
  """
  question: String!

  """
  When faq was updated
  """
  updatedAt: DateTime
}

"""
The connection type for User.
"""
type ProjectCollaboratorConnection {
  """
  A list of edges.
  """
  edges: [ProjectCollaboratorEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectCollaboratorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The email of a collaborator on a project
  """
  email: String

  """
  The state of a collaborator's membership on a project
  """
  membershipState: CollaboratorMembershipState!

  """
  The item at the end of the edge.
  """
  node: User

  """
  The permissions of the collaborator
  """
  permissions: [CollaboratorPermission!]!

  """
  The title of a collaborator on a project
  """
  title: String
}

"""
State of membership for a collaborator on a project
"""
enum CollaboratorMembershipState {
  invited

  active

  declined

  inactive
}

"""
The connection type for Reward.
"""
type ProjectRewardConnection {
  """
  A list of edges.
  """
  edges: [RewardEdge]

  """
  A list of nodes.
  """
  nodes: [Reward]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
The connection type for Postable.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostableEdge]

  """
  A list of nodes.
  """
  nodes: [Postable]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type PostableEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Postable
}

"""
Something that can be posted
"""
interface Postable {
  """
  Actions you can currently perform
  """
  actions: PostActions!

  """
  The author of the project update.
  """
  author: User!

  """
  The author role of the project update.
  """
  authorRole: PostAuthorRole!

  """
  The date the project update was created.
  """
  createdAt: DateTime!

  """
  All rewards belonging to a post that were specifically marked by a creator to be excluded from receiving a post notification. This does not, however, include the no reward tier.
  """
  excludedRewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection

  """
  Users that have liked this project update.
  """
  fans("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserConnection

  """
  True if creator has excluded the no reward tier from receiving a post notification.
  """
  hasExcludedNoRewardTier: Boolean

  id: ID!

  """
  All rewards that were marked to recieve a post notification, excluding the no reward tier.
  """
  includedRewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection

  """
  Whether or not the current user has liked this project update.
  """
  isLiked: Boolean!

  """
  True if marked as a public public post, false if the post is backers only.
  """
  isPublic: Boolean!

  """
  True if the post's content is visible to the user.
  """
  isVisible: Boolean! @deprecated(reason: "Query the read field in post abilities instead.")

  """
  The number of likes a post has.
  """
  likesCount: Int!

  """
  The next post.
  """
  nextPost: Postable

  """
  The project update number.
  """
  number: Int!

  """
  The date the project update was pinned.
  """
  pinnedAt: DateTime

  """
  The previous post.
  """
  previousPost: Postable

  """
  Project that belongs to post.
  """
  project: Project!

  """
  The date the project update was published.
  """
  publishedAt: DateTime

  """
  How much time a creator or collaborator has left to edit the post.
  """
  timeLeftToEdit: String

  """
  The project update's title.
  """
  title: String

  """
  The post type.
  """
  type: Post!

  """
  The date the project update was last edited.
  """
  updatedAt: DateTime

  """
  The project update's URL.
  """
  url: String!
}

"""
Post types
"""
enum Post {
  FreeformPost

  CreatorInterview
}

"""
The project roles a project update author can have.
"""
enum PostAuthorRole {
  creator

  collaborator
}

"""
List actions current user can perform on a post
"""
type PostActions {
  destroy: Boolean!

  edit: Boolean!

  pin: Boolean!

  publish: Boolean!

  read: Boolean!

  update: Boolean!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
Possible states for project posts.
"""
enum PostState {
  processing

  published

  draft
}

"""
The possible post types.
"""
enum PostFormat {
  freeform_post

  creator_interview
}

"""
The connection type for ProjectTimelineEvent.
"""
type ProjectTimelineConnection {
  """
  A list of edges.
  """
  edges: [ProjectTimelineEventEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectTimelineEvent]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectTimelineEventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectTimelineEvent
}

"""
An event in a project's timeline
"""
type ProjectTimelineEvent {
  """
  Entity attached to the event, e.g. project or post
  """
  data: TimelineEventData

  """
  The time the event occurred
  """
  timestamp: DateTime!

  """
  The event type. Corresponds to a subset of activity types
  """
  type: String!
}

union TimelineEventData = CreatorInterview|FreeformPost|Project

"""
A creator interview.
"""
type CreatorInterview implements Node & Commentable & Postable {
  """
  Actions you can currently perform
  """
  actions: PostActions!

  """
  The interview answers associated with the creator interview.
  """
  answers("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String, "Includes skipped answers" withSkipped: Boolean, "Includes blank answers" withBlank: Boolean): InterviewAnswerConnection!

  """
  The author of the project update.
  """
  author: User!

  """
  The author role of the project update.
  """
  authorRole: PostAuthorRole!

  """
  True if the current user can comment (considers restrictions)
  """
  canComment: Boolean!

  """
  True if the current user can comment (does not consider restrictions)
  """
  canCommentSansRestrictions: Boolean!

  """
  Whether a user can request an update about this project from the Creator
  """
  canUserRequestUpdate: Boolean!

  """
  List of comments on the commentable
  """
  comments("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): CommentConnection

  """
  Comment count - defaults to root level comments only
  """
  commentsCount(withReplies: Boolean = false): Int!

  """
  The date the project update was created.
  """
  createdAt: DateTime!

  """
  The prompt for the creator interview.
  """
  creatorPrompt: CreatorPrompt!

  """
  All rewards belonging to a post that were specifically marked by a creator to be excluded from receiving a post notification. This does not, however, include the no reward tier.
  """
  excludedRewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection

  """
  Users that have liked this project update.
  """
  fans("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserConnection

  """
  True if creator has excluded the no reward tier from receiving a post notification.
  """
  hasExcludedNoRewardTier: Boolean

  id: ID!

  """
  All rewards that were marked to recieve a post notification, excluding the no reward tier.
  """
  includedRewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection

  """
  Whether or not the current user has liked this project update.
  """
  isLiked: Boolean!

  """
  True if marked as a public public post, false if the post is backers only.
  """
  isPublic: Boolean!

  """
  True if the post's content is visible to the user.
  """
  isVisible: Boolean! @deprecated(reason: "Query the read field in post abilities instead.")

  """
  The number of likes a post has.
  """
  likesCount: Int!

  """
  The next post.
  """
  nextPost: Postable

  """
  The project update number.
  """
  number: Int!

  """
  The date the project update was pinned.
  """
  pinnedAt: DateTime

  """
  The previous post.
  """
  previousPost: Postable

  """
  Project that belongs to post.
  """
  project: Project!

  """
  The root project id under which the comment is nested
  """
  projectRelayId: ID!

  """
  The date the project update was published.
  """
  publishedAt: DateTime

  """
  How much time a creator or collaborator has left to edit the post.
  """
  timeLeftToEdit: String

  """
  The project update's title.
  """
  title: String

  """
  The post type.
  """
  type: Post!

  """
  The date the project update was last edited.
  """
  updatedAt: DateTime

  """
  The project update's URL.
  """
  url: String!
}

"""
A set of interview questions to be answered.
"""
type CreatorPrompt implements Node {
  id: ID!

  """
  All the questions in a creator prompt.
  """
  questions("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): InterviewQuestionConnection!

  """
  The creator prompt title.
  """
  title: String!
}

"""
The connection type for InterviewQuestion.
"""
type InterviewQuestionConnection {
  """
  A list of edges.
  """
  edges: [InterviewQuestionEdge]

  """
  A list of nodes.
  """
  nodes: [InterviewQuestion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type InterviewQuestionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: InterviewQuestion
}

"""
A creator interview question.
"""
type InterviewQuestion implements Node {
  """
  All the answers to the question.
  """
  answers("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): InterviewAnswerConnection!

  """
  The interview question text.
  """
  body: String!

  """
  The interview question category.
  """
  category: InterviewQuestionCategory!

  id: ID!
}

"""
The interview question category.
"""
enum InterviewQuestionCategory {
  learnings

  blockers

  inspiration

  retrospective

  process
}

"""
The connection type for InterviewAnswer.
"""
type InterviewAnswerConnection {
  """
  A list of edges.
  """
  edges: [InterviewAnswerEdge]

  """
  A list of nodes.
  """
  nodes: [InterviewAnswer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type InterviewAnswerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: InterviewAnswer
}

"""
A creator interview answer.
"""
type InterviewAnswer implements Node {
  """
  The interview answer text.
  """
  body: HTML

  id: ID!

  """
  True if the creator skipped the associated question.
  """
  isSkipped: Boolean!

  """
  The question
  """
  question: InterviewQuestion!
}

"""
A project update.
"""
type FreeformPost implements Node & Commentable & Postable {
  """
  Actions you can currently perform
  """
  actions: PostActions!

  """
  The author of the project update.
  """
  author: User!

  """
  The author role of the project update.
  """
  authorRole: PostAuthorRole!

  """
  The body of the post.
  """
  body: HTML

  """
  True if the current user can comment (considers restrictions)
  """
  canComment: Boolean!

  """
  True if the current user can comment (does not consider restrictions)
  """
  canCommentSansRestrictions: Boolean!

  """
  Whether a user can request an update about this project from the Creator
  """
  canUserRequestUpdate: Boolean!

  """
  List of comments on the commentable
  """
  comments("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): CommentConnection

  """
  Comment count - defaults to root level comments only
  """
  commentsCount(withReplies: Boolean = false): Int!

  """
  The date the project update was created.
  """
  createdAt: DateTime!

  """
  All rewards belonging to a post that were specifically marked by a creator to be excluded from receiving a post notification. This does not, however, include the no reward tier.
  """
  excludedRewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection

  """
  Users that have liked this project update.
  """
  fans("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): UserConnection

  """
  True if creator has excluded the no reward tier from receiving a post notification.
  """
  hasExcludedNoRewardTier: Boolean

  id: ID!

  """
  All rewards that were marked to recieve a post notification, excluding the no reward tier.
  """
  includedRewards("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardConnection

  """
  Whether or not the current user has liked this project update.
  """
  isLiked: Boolean!

  """
  True if marked as a public public post, false if the post is backers only.
  """
  isPublic: Boolean!

  """
  True if the post's content is visible to the user.
  """
  isVisible: Boolean! @deprecated(reason: "Query the read field in post abilities instead.")

  """
  The number of likes a post has.
  """
  likesCount: Int!

  """
  The images associated with the post via native ui.
  """
  nativeImages: [Image!]

  """
  The next post.
  """
  nextPost: Postable

  """
  The project update number.
  """
  number: Int!

  """
  The date the project update was pinned.
  """
  pinnedAt: DateTime

  """
  The previous post.
  """
  previousPost: Postable

  """
  Project that belongs to post.
  """
  project: Project!

  """
  The root project id under which the comment is nested
  """
  projectRelayId: ID!

  """
  The date the project update was published.
  """
  publishedAt: DateTime

  """
  How much time a creator or collaborator has left to edit the post.
  """
  timeLeftToEdit: String

  """
  The project update's title.
  """
  title: String

  """
  The post type.
  """
  type: Post!

  """
  The date the project update was last edited.
  """
  updatedAt: DateTime

  """
  The project update's URL.
  """
  url: String!
}

"""
A post image
"""
type Image {
  id: ID!

  """
  URL of the image
  """
  url("The width of the image in pixels." width: Int): String
}

"""
List actions current user can perform on a project
"""
type ProjectActions {
  """
  Whether or not the user is in a state to see currency conversions
  """
  displayConvertAmount: Boolean!

  shareDraft: Boolean!

  """
  Whether or not the external survey should be displayed
  """
  showExternalSurvey: Boolean!
}

"""
A backer survey that a creator sends
"""
type BackerSurvey {
  """
  Project- and reward- level survey questions
  """
  backerQuestions: [Question!]!

  """
  The number of backers who have not answered the survey
  """
  backersRemaining: Int!

  """
  Whether the survey has at least one question or option
  """
  hasBackerQuestionsOrItemOptions: Boolean!

  """
  Whether the survey has at least one item-level question or option
  """
  hasItemQuestionsOrOptions: Boolean!

  id: ID!

  """
  An optional introduction to the backer survey.
  """
  intro("The width of embedded assets in pixels." assetWidth: Int, "Whether to return the intro for the editor." forEditor: Boolean): HTML

  """
  When the survey was sent
  """
  sentAt: DateTime

  """
  The percentage of surveys that have been completed
  """
  surveyCompletePercentage: Float!
}

"""
All available fulfillment statuses
"""
enum FulfillmentStatus {
  """
  No rewards made; default value
  """
  NO_REWARDS_MADE

  """
  Some rewards made
  """
  SOME_REWARDS_MADE

  """
  All rewards made
  """
  ALL_REWARDS_MADE

  """
  Fulfilling some rewards
  """
  FULFILLING_SOME_REWARDS

  """
  Fulfilling all rewards
  """
  FULFILLING_ALL_REWARDS

  """
  Fulfillment complete
  """
  FULFILLMENT_COMPLETE
}

type CreatorToolsPaths {
  """
  The advanced analytics path
  """
  advancedAnalyticsPath: String!

  """
  The backer report path
  """
  backerReportPath: String!

  """
  The backer survey path
  """
  backerSurveyPath: String!

  """
  The project collaborators path
  """
  collaboratorsPath: String!

  """
  The contact path
  """
  contactPath: String!

  """
  The creator faq path
  """
  creatorFaqPath: String!

  """
  The creator handbook path
  """
  creatorHandbookPath: String!

  """
  The project dashboard path
  """
  dashboardPath: String!

  """
  The path to the disbursements page
  """
  disbursementsPath: String!

  """
  The edit rewards project path
  """
  editRewardsProjectPath: String!

  """
  The fulfillment dashboard path
  """
  fulfillmentDashboardPath: String!

  """
  The help resources path
  """
  helpResourcesPath: String!

  """
  The messages thread path
  """
  messageThreadsPath: String!

  """
  The path for backers to access the project's pledge manager
  """
  pledgeManagerRedeemUrl: String!

  """
  The path to access creator pledge redemption tools
  """
  pledgeRedemptionPath: String!

  """
  The draft posts path
  """
  postsDashboardDraftsPath: String!

  """
  The published posts path
  """
  postsDashboardPublishedPath: String!

  """
  The project build path
  """
  projectBuildPath: String!

  """
  The project path
  """
  projectPath: String!

  """
  The Shopify sync path path
  """
  shopifySyncPath: String!
}

"""
A payment plan for a pledge over time project
"""
type PaymentPlan {
  """
  Amount is enough to qualify for pledge over time, if project allows
  """
  amountIsPledgeOverTimeEligible: Boolean!

  paymentIncrements: [PaymentIncrement!]

  """
  Whether the project permits pledge over time pledges
  """
  projectIsPledgeOverTimeAllowed: Boolean!
}

"""
A named group of users used for reporting, batch actions, or limiting resource access
"""
type UserGroup {
  """
  The rules that give the group access to certain resources
  """
  accessRules: [AccessRule!]!

  id: ID!

  """
  The user group name
  """
  name: String!

  """
  Total number of users in the group
  """
  userCount: Int!

  users: [User!]!
}

"""
A rule that specifies a resource that a user group can access and how they access it
"""
type AccessRule {
  """
  What percent backed the secret resource?
  """
  convertedUserPercentage: Int!

  id: ID!

  """
  The resource this rule gives access to, e.g. a secret reward
  """
  resource: SecretResource!

  """
  How the resource is accessed. Either via link or access is restricted to a predefined group
  """
  type: AccessRuleTypeEnum!
}

"""
The type for an access rule
"""
enum AccessRuleTypeEnum {
  """
  link
  """
  link

  """
  restricted
  """
  restricted
}

union SecretResource = Reward

scalar JSON

"""
Operators for SQL filters
"""
enum SqlFilterOperator {
  """
  Logical OR
  """
  OR

  """
  Logical AND
  """
  AND

  """
  Logical NOT
  """
  NOT
}

"""
SKU data with count of orders with this SKU
"""
type SkuCount {
  """
  The number of orders that include this SKU
  """
  count: Int!

  """
  The unique identifier for the SKU
  """
  id: Int!

  """
  The name of the item associated with the SKU
  """
  itemName: String!

  """
  The name of the SKU
  """
  name: String!

  """
  The option values associated with this SKU
  """
  optionValues: [String!]!

  """
  The date and time when the survey was sent
  """
  sentAt: ISO8601DateTime!

  """
  The SKU value
  """
  sku: String!
}

"""
Represents a project's pledge manager
"""
type PledgeManager {
  """
  Whether the pledge manager accepts new backers or not
  """
  acceptsNewBackers: Boolean!

  id: ID!

  """
  Notes associated with the pledge manager
  """
  notes: [String!]!

  """
  Whether the creator opted out of the pledge manager.
  """
  optedOut: Boolean

  """
  The associated project
  """
  project: Project!

  """
  The date by which the PM will be reviewed (Date of review submission + 5 business days)
  """
  reviewAt: DateTime

  """
  The user assigned to review this pledge manager
  """
  reviewer: User

  """
  The pledge manager's state, e.g. draft, submitted, approved, denied, etc.
  """
  state: PledgeManagerStateEnum

  """
  Whether the pledge manager can be used to charge for tariffs.
  """
  tariffSurchargesEnabled: Boolean
}

"""
The state of the pledge manager, e.g. draft, submitted, approved, denied.
"""
enum PledgeManagerStateEnum {
  """
  draft
  """
  draft

  """
  submitted
  """
  submitted

  """
  approved
  """
  approved

  """
  denied
  """
  denied
}

"""
Location from which a project fulfills
"""
type StockLocation {
  address: Address!

  id: ID!

  project: Project!

  """
  Places this stock location ships to
  """
  stockLocationMappings: [StockLocationMapping!]!
}

"""
A place that a project stock location ships to
"""
type StockLocationMapping {
  id: ID!

  location: Location!

  stockLocation: StockLocation!
}

"""
Represents the window during which backers can redeem their backing
"""
type CheckoutWave {
  """
  Whether the wave is currently active
  """
  active: Boolean!

  """
  Whether the wave can be closed
  """
  endable: Boolean!

  """
  When the wave can be closed
  """
  endableAt: DateTime!

  """
  Whether the wave has ended
  """
  ended: Boolean!

  """
  The end date of the wave
  """
  endsAt: DateTime

  id: ID!

  """
  The associated project
  """
  project: Project!

  """
  The date when the creator can review the collected funds from PM
  """
  reviewCollectedFundsAt: DateTime!

  """
  The start date of the wave
  """
  startsAt: DateTime!
}

"""
A project's shipping configuration
"""
type ShippingConfig {
  id: ID!

  itemWeightCompletionStats: ItemWeightCompletionStats!

  """
  How are shipping rates configured? Either flat rate or weight based
  """
  shippingType: ShippingTypeEnum!

  """
  If shipping is weight based, a unit must be provided, e.g. oz or kg
  """
  unit: ShippingUnitEnum
}

"""
The type of shipping set up, either flat rate or weight based
"""
enum ShippingTypeEnum {
  """
  weight_based
  """
  weight_based

  """
  flat_rate
  """
  flat_rate
}

"""
The units that weights will be in, for weight based shipping type
"""
enum ShippingUnitEnum {
  """
  oz
  """
  oz

  """
  kg
  """
  kg
}

"""
Stats related to configuring weights for items
"""
type ItemWeightCompletionStats {
  allItemsConfigured: Boolean!

  excludedCount: Int!

  itemsMissingWeightsCount: Int!

  itemsWithWeightCount: Int!
}

"""
A shipping zone configured for a project
"""
type ShippingZone {
  id: ID!

  """
  Whether it has rest of the world location
  """
  isRoot: Boolean!

  """
  The locations included in the zone.
  """
  locations: [Location!]!

  """
  Optional name for the shipping zone
  """
  name: String

  """
  The project the shipping zone belongs
  """
  project: Project!

  """
  Weight ranges with cost, relevant to the zone.
  """
  weightRanges: [WeightRange!]!
}

"""
A min and max weight range with associated cost
"""
type WeightRange {
  """
  The cost for this weight range.
  """
  cost: Int!

  """
  The cost for this weight range, formatted.
  """
  costFormatted: String!

  id: ID!

  """
  The max of the weight range (optional)
  """
  max: Float

  """
  The min of the weight range
  """
  min: Float!
}

type LocationVatNumber {
  """
  The creator's last used vat number for this location
  """
  lastUsed: String

  """
  The id of the location associated with a given VAT number.
  """
  locationId: ID!

  """
  The name of the location.
  """
  locationName: VatConfigLocationEnum!

  """
  Whether the creator has opted out of VAT collection for this location.
  """
  optOut: Boolean!

  """
  The unique tax identifier for a given location.
  """
  vatNumber: String
}

"""
The possible locations for a VatConfig.
"""
enum VatConfigLocationEnum {
  """
  United Kingdom
  """
  UK

  """
  European Union
  """
  EU

  """
  Austria
  """
  AT

  """
  Belgium
  """
  BE

  """
  Bulgaria
  """
  BG

  """
  Croatia
  """
  HR

  """
  Cyprus
  """
  CY

  """
  Czech Republic
  """
  CZ

  """
  Denmark
  """
  DK

  """
  Estonia
  """
  EE

  """
  Finland
  """
  FI

  """
  France
  """
  FR

  """
  Germany
  """
  DE

  """
  Greece
  """
  GR

  """
  Hungary
  """
  HU

  """
  Ireland
  """
  IE

  """
  Italy
  """
  IT

  """
  Latvia
  """
  LV

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Malta
  """
  MT

  """
  Netherlands
  """
  NL

  """
  Poland
  """
  PL

  """
  Portugal
  """
  PT

  """
  Romania
  """
  RO

  """
  Slovakia
  """
  SK

  """
  Slovenia
  """
  SI

  """
  Spain
  """
  ES

  """
  Sweden
  """
  SE
}

"""
Collection of information relating to Shopify item variants
"""
type ShopifyVariant {
  price: String

  productHandle: String

  productId: String!

  productTitle: String

  sku: String!

  variantId: String!

  variantTitle: String
}

"""
The connection type for Backing.
"""
type UserBackingsConnection {
  """
  A list of edges.
  """
  edges: [BackingEdge]

  """
  A list of nodes.
  """
  nodes: [Backing]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int! @deprecated(reason: "Please use backingsCount instead.")
}

"""
An edge in a connection.
"""
type BackingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Backing
}

"""
The connection type for Project.
"""
type UserCreatedProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
Ordering direction values
"""
enum OrderDirection {
  ASC

  DESC
}

"""
The connection type for Project.
"""
type ProjectsConnectionWithTotalCount {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  recommendationsEnabled: Boolean!

  refTag: String

  totalCount: Int!
}

"""
The connection type for Project.
"""
type MembershipProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
The connection type for Project.
"""
type UserActiveProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
The connection type for Project.
"""
type UserInvitedProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
The connection type for Organization.
"""
type UserOrganizationsConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

"""
An organization
"""
type Organization implements Node {
  id: ID!

  """
  An organization's name
  """
  name: String!

  """
  An organization's slug
  """
  slug: String!
}

"""
Possible states for an organization membership
"""
enum OrganizationMembershipState {
  PENDING

  DENIED

  ACTIVE

  ADMIN

  INACTIVE
}

"""
The connection type for CuratedPage.
"""
type UserCuratedPagesConnection {
  """
  A list of edges.
  """
  edges: [CuratedPageEdge]

  """
  A list of nodes.
  """
  nodes: [CuratedPage]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type CuratedPageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CuratedPage
}

"""
A curated page
"""
type CuratedPage implements Node {
  """
  A curated page's description.
  """
  description: String!

  id: ID!

  """
  A curated page's unique URL identifier.
  """
  slug: String!

  """
  A curated page's title.
  """
  title: String!
}

"""
The connection type for User.
"""
type UserFollowersConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
The connection type for User.
"""
type UserFollowingConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
The connection type for Project.
"""
type UserSavedProjectsConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
The connection type for Conversation.
"""
type UserConversationsConnection {
  """
  A list of edges.
  """
  edges: [ConversationEdge]

  """
  A list of nodes.
  """
  nodes: [Conversation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type ConversationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Conversation
}

"""
A mailbox
"""
enum MailboxType {
  ALL

  INBOX

  SENT

  UNREAD

  ARCHIVE

  SPAM
}

"""
The connection type for SurveyResponse.
"""
type SurveyResponsesConnection {
  """
  A list of edges.
  """
  edges: [SurveyResponseEdge]

  """
  A list of nodes.
  """
  nodes: [SurveyResponse]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type SurveyResponseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SurveyResponse
}

"""
The connection type for Address.
"""
type AddressConnection {
  """
  A list of edges.
  """
  edges: [AddressEdge]

  """
  A list of nodes.
  """
  nodes: [Address]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type AddressEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Address
}

"""
An object containing a user's notifications.
"""
type Notification {
  """
  Are email notifications enabled for this topic
  """
  email: Boolean!

  """
  The frequency of the notification
  """
  frequency: UserNotificationFrequency

  """
  The ID of the Notification
  """
  id: String!

  """
  Are mobile notifications enabled for this topic
  """
  mobile: Boolean!

  """
  The ID of the associated Project
  """
  projectId: String

  """
  The name of the associated Project
  """
  projectName: String

  """
  The topic of the notification
  """
  topic: UserNotificationTopic!
}

"""
User notification topics
"""
enum UserNotificationTopic {
  messages

  backings

  creator_digest

  updates

  follower

  friend_activity

  friend_signup

  comments

  comment_replies

  creator_edu

  marketing_update

  project_launch
}

"""
User notification frequencies
"""
enum UserNotificationFrequency {
  once_a_day

  twice_a_day
}

"""
A subscription a user has to a particular newsletter.
"""
type NewsletterSubscriptions {
  """
  The subscription to the AlumniNewsletter newsletter
  """
  alumniNewsletter: Boolean!

  """
  The subscription to the ArtsCultureNewsletter newsletter
  """
  artsCultureNewsletter: Boolean!

  """
  The subscription to the ComicsNewsletter newsletter
  """
  comicsNewsletter: Boolean!

  """
  The subscription to the CreatorNewsletter newsletter
  """
  creatorNewsletter: Boolean!

  """
  The subscription to the FilmNewsletter newsletter
  """
  filmNewsletter: Boolean!

  """
  The subscription to the GamesNewsletter newsletter
  """
  gamesNewsletter: Boolean!

  """
  The subscription to the HappeningNewsletter newsletter
  """
  happeningNewsletter: Boolean!

  """
  The subscription to the InventNewsletter newsletter
  """
  inventNewsletter: Boolean!

  """
  The subscription to the LearningLabNewsletter newsletter
  """
  learningLabNewsletter: Boolean!

  """
  The subscription to the MusicNewsletter newsletter
  """
  musicNewsletter: Boolean!

  """
  The subscription to the ProjectsYoullLoveNewsletter newsletter
  """
  projectsYoullLoveNewsletter: Boolean!

  """
  The subscription to the PromoNewsletter newsletter
  """
  promoNewsletter: Boolean!

  """
  The subscription to the PublishingNewsletter newsletter
  """
  publishingNewsletter: Boolean!

  """
  The subscription to the WeeklyNewsletter newsletter
  """
  weeklyNewsletter: Boolean!
}

"""
A user's restrictions
"""
type UserRestriction {
  """
  Date when the restriction will be lifted. If null, the restriction is indefinite.
  """
  releaseAt: DateTime

  """
  Type of restriction a user has
  """
  restriction: UserRestrictionKind!
}

"""
Various restriction states, e.g. messaging, commenting
"""
enum UserRestrictionKind {
  messaging

  commenting

  pledging

  submitting

  edit_spotlight_pages

  phone

  prelaunch_early
}

"""
Informs how USD currencies should be rendered, based on user's location
"""
enum UsdType {
  """
  The user has chosen USD as their currency and they are in the US
  """
  domestic

  """
  The user has chosen USD as their currency but they are not in the US
  """
  international
}

"""
The connection type for Location.
"""
type LocationsConnection {
  """
  A list of edges.
  """
  edges: [LocationEdge]

  """
  A list of nodes.
  """
  nodes: [Location]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type LocationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Location
}

"""
Intermediary set of changes that have yet to be applied to a backing
"""
type Checkout implements Node {
  """
  The action that the backer is attempting to complete with this checkout
  """
  action: CheckoutAction!

  """
  The addons that the backer has chosen
  """
  addOns("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): RewardTotalCountConnection!

  """
  The backing that the checkout is modifying.
  """
  backing: Backing!

  """
  Desired amount backer wishes to pledge to the project, including the shipping amount, converted to the backer’s chosen currency
  """
  convertedTotal: Money!

  """
  Estimated shipping maximum for the reward/addons chosen by the backer for their location
  """
  estimatedShippingTotalMax: Money

  """
  Estimated shipping minimum for the reward/addons chosen by the backer for their location
  """
  estimatedShippingTotalMin: Money

  """
  The translated reason that a checkout might have failed
  """
  failedStateReason: String

  """
  Is true when the checkout was created by a guest account
  """
  guest: Boolean!

  id: ID!

  """
  Whether this checkout should be given the option to pledge over time
  """
  isPledgeOverTimeEligible: Boolean!

  """
  Is true when more than one backer is checking out a limited/scarce reward at once
  """
  isRacing: Boolean!

  """
  Whether the project can accept a pledge with SEPA account as the payment source
  """
  isSepaEligible: Boolean!

  """
  Checks whether the checkout is valid prior to charging the user's card.
  """
  isValidForOnSessionCheckout("the stripe payment method id, starting with either `card_` or `pm_` (the same id passed to stripe)" stripePaymentMethodId: String!, "the client_secret returned by createPaymentIntent, starts with `pi_` (the same secret passed to stripe)" paymentIntentClientSecret: String!): Validation!

  """
  If the checkout contains a limited reward, returns an ISO8601 date for when the claim on the reward is expired
  """
  limitedRewardClaimedUntil: ISO8601DateTime

  paymentUrl: String

  """
  Desired amount backer wishes to pledge to the project, excluding the shipping amount
  """
  pledgeTotal: Money!

  """
  The URL to redirect to on a successful checkout
  """
  redirectUrl: String!

  """
  The reward the backer is expecting
  """
  reward: Reward

  """
  Where the user is based.
  """
  shippingLocation: Location

  """
  Shipping amount for the reward chosen by the backer for their location
  """
  shippingTotal: Money!

  """
  The current state of the checkout
  """
  state: CheckoutState!

  """
  The full URL to redirect to after an on_session payment via Stripe
  """
  stripeOnSessionPaymentRedirectUrl: String!

  """
  The full URL to redirect to after payment setup via Stripe
  """
  stripePaymentSetupRedirectUrl: String!

  """
  Desired amount backer wishes to pledge to the project, including the shipping amount
  """
  total: Money!
}

"""
All available states for a checkout
"""
enum CheckoutState {
  AUTHORIZING

  VERIFYING

  SUCCESSFUL

  FAILED
}

"""
All actions a user may attempt to complete with a checkout
"""
enum CheckoutAction {
  PLEDGE

  LATE_PLEDGE

  ADJUSTMENT

  SOURCE

  REAUTH

  AUTHENTICATE
}

"""
Detect claims in text.
"""
type Claims {
  """
  The matched claims found in the text.
  """
  matches: [ClaimMatches!]!
}

"""
Token, match_type, start, and end position of claims language.
"""
type ClaimMatches {
  """
  The end position of the token in the source text
  """
  end: Int

  """
  The matching strategy used to find the token (either 'POS' or 'regex').
  """
  matchType: String

  """
  The start position of the token in the source text
  """
  start: Int

  """
  Token/phrase of matched claims language.
  """
  token: String
}

"""
Buckets of project goals
"""
enum GoalBuckets {
  """
  Range from 0 to 1000 USD
  """
  BUCKET_0

  """
  Range from 1000 to 10000 USD
  """
  BUCKET_1

  """
  Range from 10000 to 100000 USD
  """
  BUCKET_2

  """
  Range from 100000 to 1000000 USD
  """
  BUCKET_3

  """
  Range from 1000000 to Infinity USD
  """
  BUCKET_4
}

"""
Buckets of amount pledged
"""
enum PledgedBuckets {
  """
  Range from 0 to 1000 USD
  """
  BUCKET_0

  """
  Range from 1000 to 10000 USD
  """
  BUCKET_1

  """
  Range from 10000 to 100000 USD
  """
  BUCKET_2

  """
  Range from 100000 to 1000000 USD
  """
  BUCKET_3

  """
  Range from 1000000 to Infinity USD
  """
  BUCKET_4
}

"""
Buckets of percentage raised
"""
enum RaisedBuckets {
  """
  Range from 0 to 75 percent
  """
  BUCKET_0

  """
  Range from 75 to 100 percent
  """
  BUCKET_1

  """
  Range from 100 to Infinity percent
  """
  BUCKET_2
}

"""
What model to use for project recommendations
"""
enum RecommendationsModel {
  CF

  LSI

  LDA
}

"""
What source to use for project recommendations
"""
enum RecommendationsSource {
  PROJECT

  BACKINGS

  WATCHES

  TASTE_PROFILE_LIKES

  TASTE_PROFILE_DISLIKES
}

"""
What order to sort projects in
"""
enum ProjectSort {
  MAGIC

  POPULARITY

  NEWEST

  END_DATE

  MOST_FUNDED

  MOST_BACKED

  DISTANCE
}

"""
A maximum valid filesize for an upload.
"""
type UploadLimit {
  """
  An array of the valid content types for an upload of this type.
  """
  contentTypes: [String]!

  """
  Maximum file size in the provided units.
  """
  fileSize("The unit to return the file size in." unit: UploadLimitFileSizeUnit!): Int!
}

"""
The unit of file size the return the upload limit in.
"""
enum UploadLimitFileSizeUnit {
  """
  Bytes.
  """
  BYTES

  """
  Kilobytes.
  """
  KILOBYTES

  """
  Megabytes.
  """
  MEGABYTES
}

"""
The type of file we are checking the upload limit of.
"""
enum UploadLimitFiletype {
  """
  An asset video file.
  """
  ASSET_VIDEO

  """
  An audio file.
  """
  AUDIO

  """
  A photo file.
  """
  PHOTO

  """
  A smaller video file.
  """
  SMALLER_VIDEO

  """
  A sound file
  """
  SOUND

  """
  A video file.
  """
  VIDEO
}

"""
The connection type for EditorialPageForAdmin.
"""
type EditorialPageForAdminConnection {
  """
  A list of edges.
  """
  edges: [EditorialPageForAdminEdge]

  """
  A list of nodes.
  """
  nodes: [EditorialPageForAdmin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type EditorialPageForAdminEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EditorialPageForAdmin
}

"""
An Editorial Page fully loaded with admin only fields
"""
type EditorialPageForAdmin {
  """
  Rich Text Editor property for attachableAssoc.
  """
  attachableAssoc: String!

  """
  Rich Text Editor property for attachableId.
  """
  attachableId: String!

  """
  When this page was created
  """
  createdAt: DateTime!

  """
  This page's editor.
  """
  editor: User!

  """
  (Deprecated) Slug where `/` is replaced by `-`. Used for ref tag and admin routing.
  """
  flatSlug: String!

  id: ID!

  """
  An identifier for the page. Used for ref tags.
  """
  identifier: String!

  """
  Last revision
  """
  lastRevision: EditorialRevisionForAdmin!

  """
  A link to the Looker Dashboard for this page, if any
  """
  lookerDashboardUrl: String

  """
  The page name.
  """
  name: String!

  """
  The page type.
  """
  pageType: EditorialPageType!

  """
  Published revision
  """
  publishedRevision: EditorialRevisionForAdmin

  """
  The revisions in reverse chronological order.
  """
  revisions("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): EditorialRevisionForAdminConnection!

  """
  The slug of this page. Can include `/'.
  """
  slug: String!

  """
  Stats for the past 30 days
  """
  stats: EditorialPageStats!

  """
  When this page was last updated
  """
  updatedAt: DateTime!
}

"""
Editorial page types.
"""
enum EditorialPageType {
  article

  resource

  prompt

  international

  category
}

"""
An Editorial Page Revision fully loaded with admin attributes
"""
type EditorialRevisionForAdmin {
  """
  The person who created this revision
  """
  author: User!

  """
  When this editorial layout was created
  """
  createdAt: DateTime!

  """
  The page metadata
  """
  metadata: EditorialRevisionMetadata!

  """
  The modules for the editorial revision
  """
  modules: [Editorial!]!

  """
  The page that this revision belongs to
  """
  page: EditorialPage!

  """
  Is the editorial revision published?
  """
  published: Boolean!

  """
  When the editorial revision was published.
  """
  publishedAt: DateTime

  """
  The person who published this revision
  """
  publisher: User

  """
  The sequence number for this revision
  """
  sequence: Int!

  """
  Counts of translated / total strings for each locale
  """
  translationStatus: [EditorialTranslationStatus!]!

  """
  When this editorial layout was created
  """
  updatedAt: DateTime!

  """
  The revision uuid
  """
  uuid: String!
}

"""
An Editorial Page
"""
type EditorialPage {
  """
  When this page was created
  """
  createdAt: DateTime!

  id: ID!

  """
  The page name.
  """
  name: String!

  """
  The page type.
  """
  pageType: EditorialPageType!

  """
  The currently published revision. Can be null.
  """
  publishedRevision: EditorialRevision

  """
  The slug of this page. Can include `/'.
  """
  slug: String!

  """
  When this page was last updated
  """
  updatedAt: DateTime!
}

"""
An Editorial Page Revision
"""
type EditorialRevision {
  """
  The page metadata
  """
  metadata: EditorialRevisionMetadata!

  """
  The modules for the editorial revision
  """
  modules: [Editorial!]!

  """
  The page that this revision belongs to
  """
  page: EditorialPage!

  """
  The revision uuid
  """
  uuid: String!
}

type EditorialRevisionMetadata {
  """
  The revision description
  """
  description: String!

  """
  The revision og_image
  """
  ogImage: String

  """
  The revision title
  """
  title: String!
}

union Editorial = ProjectCollection|NewsletterSignUp|PromoCollection|NewsCollection|FeaturedProjectCollection|SingleProjectContainer|BespokeComponent|Header|MastheadImage|ExploreSubcategories|Article|ShortText|EditorialRichText|SurveyEmbed

"""
A curated set of projects based off a search query
"""
type ProjectCollection {
  id: ID!

  """
  The projects to display in this collection
  """
  projects("The number of projects needed for this collection" count: Int = 4): [Project!]!

  """
  The raw search query to populate the project collection
  """
  query: String

  """
  The localized title of this project collection
  """
  title: String

  """
  The label to track this project collection
  """
  trackingLabel: String

  """
  The url that is linked to the project collection
  """
  url: String
}

"""
Sign up for a newsletter.
"""
type NewsletterSignUp {
  """
  Description of the newsletter
  """
  description: String

  id: ID!

  """
  The source that should be recorded for the newsletter signup
  """
  newsletterSource: String

  """
  ID of the newsletter
  """
  newsletterType: String

  """
  Headline in the newsletter signup
  """
  signupHeadline: String

  """
  Name of the newsletter
  """
  title: String
}

"""
A curated set of promos
"""
type PromoCollection {
  id: ID!

  """
  Layout for this promo collection
  """
  layout: EditorialPromoCollectionLayout!

  """
  Maximum number of items to display
  """
  maxFeaturedItems: Int!

  """
  The promos in this collection
  """
  promos("Request all the items" all: Boolean = false): [Promo]!

  """
  True if single item should be displayed full width
  """
  soloItemFullWidth: Boolean!

  """
  Visual theme for this promo collection
  """
  theme: EditorialPromoCollectionTheme!

  """
  Title for this collection. Can be blank.
  """
  title: String
}

"""
Visual themes for Editorial Promo Collections
"""
enum EditorialPromoCollectionTheme {
  PROMO

  FLEX
}

"""
Layouts for Editorial Promo Collections
"""
enum EditorialPromoCollectionLayout {
  TWO_COLUMNS

  THREE_COLUMNS
}

"""
A promotional image used in a layout.
"""
type Promo {
  """
  The url for the audio player.
  """
  audioUrl: String

  """
  The background color within the promo
  """
  backgroundColor: String

  """
  Promo call to action
  """
  cta: String

  """
  The details of the promo module
  """
  description: String

  """
  When this promo should be featured
  """
  featuredAt: Date

  id: ID!

  """
  The url for the background image of the promo module.
  """
  imageUrl: String

  """
  The primary language of the promo module.
  """
  language: String

  """
  The localized title of this promo module.
  """
  title: String

  """
  The label to track this promo module
  """
  trackingLabel: String

  """
  The url that is linked to the promo module.
  """
  url: String
}

"""
A curated set of news articles
"""
type NewsCollection {
  id: ID!

  """
  The news items in this collection
  """
  newsItems("The number of news items to display in this collection" limit: Int = 3, "Request all the items" all: Boolean = false): [NewsItem]!

  """
  The localized title of this news collection
  """
  title: String
}

"""
A curated news article used in an editorial layout.
"""
type NewsItem {
  """
  The byline of this news item.
  """
  attribution: String

  """
  The localized description of this news item.
  """
  description: String

  """
  When this news item should be featured
  """
  featuredAt: Date

  id: ID!

  """
  The url for the background image of the news item.
  """
  imageUrl: String

  """
  The primary language of the news item. `null` if available in all languages.
  """
  language: String

  """
  The type of content of this news item.
  """
  mediaType: String

  """
  The source or author of the news article.
  """
  source: String

  """
  The localized title of this news item.
  """
  title: String

  """
  The url that links to the news article.
  """
  url: String
}

"""
A set of projects that can be scheduled to be featured
"""
type FeaturedProjectCollection {
  """
  The project collection query used to generate the featured project's project list
  """
  collectionQueryOverride: String

  """
  The currently featured project
  """
  currentlyFeaturedProject: FeaturedProjectItem!

  """
  The featured project items in this collection
  """
  featuredProjectItems("The number of featured project items to display in this collection" limit: Int = 1, "Request all the items" all: Boolean = false): [FeaturedProjectItem]!

  id: ID!

  """
  A recommended collection of projects, optionally controlled by collectionQueryOverride
  """
  projectList: ProjectCollection!

  """
  The localized title of the featured project section. (eg: 'Featured project')
  """
  title: String
}

"""
A curated project to be featured in an editorial layout.
"""
type FeaturedProjectItem {
  """
  The project description or, if specified, the project description override
  """
  description: String!

  """
  When this featured project item should be featured
  """
  featuredAt: Date

  id: ID!

  """
  If specified, will override the image of the associated project
  """
  imageOverride: String

  """
  The project that is featured
  """
  project: Project!

  """
  The project id (pid) of the featured project
  """
  projectId: Int!

  """
  The see more url for this featured section
  """
  sectionUrl: String!

  """
  The project title or, if specified, the project title override
  """
  title: String!
}

"""
Projects that can be shown in article
"""
type SingleProjectContainer {
  id: ID!

  """
  The currently selected project
  """
  selectedProject: SingleProjectItem!

  """
  The selected project items in this collection
  """
  singleProjectItems: [SingleProjectItem]!
}

"""
A selected project to be shown in an editorial layout.
"""
type SingleProjectItem {
  """
  The project description or, if specified, the project description override
  """
  description: String!

  id: ID!

  """
  If specified, will override the image of the associated project
  """
  imageOverride: String

  """
  The project that is featured
  """
  project: Project!

  """
  The project id (pid) of the featured project
  """
  projectId: Int!

  """
  The see more url for this featured section
  """
  sectionUrl: String!

  """
  The project title or, if specified, the project title override
  """
  title: String!
}

"""
Maps directly to a specialty built React component
"""
type BespokeComponent {
  """
  Exact name of the React component (used to lookup the component)
  """
  component: String

  id: ID!

  """
  Language for which to display the React component
  """
  language: String

  """
  Data properties to be passed down to the React component
  """
  props: JSON
}

"""
A header for an editorial layout.
"""
type Header {
  """
  The localized blurb of this header
  """
  blurb: String

  """
  The categories linked to this header
  """
  categories: [Category!]!

  id: ID!

  """
  The links of this header
  """
  links: [HeaderLink!]!

  """
  The localized title of this header
  """
  title: String
}

"""
A link of a header for an editorial layout.
"""
type HeaderLink {
  """
  The localized text content of this link
  """
  content: String!

  """
  True if the link should open a new tab when clicked on
  """
  openInNewTab: Boolean!

  """
  The url this link points to
  """
  url: String!
}

"""
A masthead image with text for an editorial layout.
"""
type MastheadImage {
  """
  The header text overlaying the masthead image.
  """
  header: String

  id: ID!

  """
  The url for the backgrorund image of the masthead.
  """
  imageUrl: String

  """
  The smaller subheader text overlaying the masthead image.
  """
  subheader: String
}

"""
Top subcategories
"""
type ExploreSubcategories {
  """
  The root category
  """
  category: Category!

  """
  The root category database id
  """
  categoryId: Int!

  id: ID!

  """
  Top subcategories ordered by number of live projects descending
  """
  subcategories("The maximum number of subcategories to return" count: Int = 10): [ExploreSubcategory!]!
}

"""
A subcategory for ExploreSubcategories
"""
type ExploreSubcategory {
  """
  The category database id
  """
  categoryId: Int!

  """
  The subcategory name for the current language
  """
  name: String!

  """
  The projects to display in this collection
  """
  projects("The number of projects needed for this collection" count: Int = 10): [Project!]!
}

"""
An article block for Editorial pages
"""
type Article {
  """
  AdminUI: Rich Text Editor property for attachableAssoc.
  """
  attachableAssoc: String!

  """
  AdminUI: Rich Text Editor property for attachableId.
  """
  attachableId: String!

  """
  The html body of the article.
  """
  body: String!

  """
  The author of the article. Can be an empty string.
  """
  byline: String!

  """
  Determines if the byline should be displayed at the top of the article
  """
  displayTopByline: Boolean!

  id: ID!

  """
  The date this article is published on. This date is only informative and won't affect module visibility.
  """
  publicationDate: Date!

  """
  The subtitle of the article. Can be an empty string.
  """
  subtitle: String!

  """
  The title of the article. Can be an empty string.
  """
  title: String
}

"""
An Short Text block for Editorial pages
"""
type ShortText {
  """
  Hex value of the background color.
  """
  backgroundColor: String!

  """
  The plain text body of the Short Text. May contain line breaks.
  """
  body: String!

  """
  The text of the CTA. Can be an empty string.
  """
  ctaText: String!

  """
  The url the CTA points to. Can be an empty string.
  """
  ctaUrl: String!

  id: ID!

  """
  Hex value of the rule color.
  """
  ruleColor: String!

  """
  The subtitle of the Short Text. Can be an empty string.
  """
  subtitle: String!

  """
  The title of the Short Text. Can be an empty string.
  """
  title: String
}

"""
A Rich Text block for Editorial pages
"""
type EditorialRichText {
  """
  AdminUI: Rich Text Editor property for attachableAssoc.
  """
  attachableAssoc: String!

  """
  AdminUI: Rich Text Editor property for attachableId.
  """
  attachableId: String!

  """
  The html body of the rich text module.
  """
  body: String!

  id: ID!
}

"""
An embedded iframe containing a Survey
"""
type SurveyEmbed {
  """
  The url of the survey being embedded
  """
  embedUrl: String!

  """
  Height of the embedded iframe
  """
  height: Int

  id: ID!
}

type EditorialTranslationStatus {
  """
  The language
  """
  locale: EditorialTranslationStatusLocale!

  """
  Total number of strings
  """
  total: Int!

  """
  Number of strings translated
  """
  translated: Int!
}

"""
Editorial locale
"""
enum EditorialTranslationStatusLocale {
  de

  es

  fr

  it

  ja

  zh
}

"""
The connection type for EditorialRevisionForAdmin.
"""
type EditorialRevisionForAdminConnection {
  """
  A list of edges.
  """
  edges: [EditorialRevisionForAdminEdge]

  """
  A list of nodes.
  """
  nodes: [EditorialRevisionForAdmin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EditorialRevisionForAdminEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EditorialRevisionForAdmin
}

type EditorialPageStats {
  backingsCount: Int!

  backingsUsd: Int!

  pageViews: Int!

  projectClicks: Int!
}

"""
Field you can sort Editorial Pages by
"""
enum EditorialPageSortField {
  NAME

  CREATED_AT

  UPDATED_AT

  SLUG
}

"""
Direction to sort Editorial Pages
"""
enum EditorialPageSortDirection {
  ASC

  DESC
}

"""
The connection type for Editorial.
"""
type EditorialConnection {
  """
  A list of edges.
  """
  edges: [EditorialEdge]

  """
  A list of nodes.
  """
  nodes: [Editorial]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  slug: String!
}

"""
An edge in a connection.
"""
type EditorialEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Editorial
}

"""
Information about a currency a creator can fund a project in
"""
type FundingCurrency {
  """
  Currency code
  """
  currency: CurrencyCode!

  """
  Does the currency use decimals (not zero-decimal)
  """
  decimal: Boolean!

  """
  Maximum amount a creator can specify for a project goal
  """
  maxGoal: Int!

  """
  Maximum amount a backer can specify for a pledge
  """
  maxPledge: Int!

  """
  Minimum amount a backer can specify for a pledge
  """
  minPledge: Int!
}

"""
The connection type for Tag.
"""
type TagsConnection {
  """
  A list of edges.
  """
  edges: [TagEdge]

  """
  A list of nodes.
  """
  nodes: [Tag]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag
}

"""
The connection type for QuizProject.
"""
type QuizProjectsConnection {
  """
  A list of edges.
  """
  edges: [QuizProjectEdge]

  """
  A list of nodes.
  """
  nodes: [QuizProject]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type QuizProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: QuizProject
}

"""
An editorialized quiz project for the taste profile quiz.
"""
type QuizProject {
  """
  The editorialized version of the project blurb
  """
  editorializedBlurb: String!

  id: ID!

  """
  All the likeable attributes for a quiz project
  """
  likeableAttributes: [LikeableAttribute!]!
}

"""
An attribute about a quiz project that a user can select in the taste profile quiz.
"""
type LikeableAttribute {
  id: ID!

  """
  The text of the attribute.
  """
  text: String!
}

"""
A Kickstarter fact
"""
type KsrFact {
  """
  Fact contributor
  """
  contributor: String

  """
  Fact date
  """
  date: String

  """
  Kickstarter fact
  """
  fact: String
}

"""
Provides an overview of pledge projects
"""
type PledgeProjectsOverview {
  """
  List of sort options
  """
  filterOption: [PledgeProjectsOverviewOptionSet!]

  """
  List of pledged projects
  """
  pledges("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): PledgedProjectsOverviewPledgesConnection

  """
  List of sort options
  """
  sortOptions: [PledgeProjectsOverviewOptionSet!]
}

"""
The connection type for PledgeProjectOverviewItem.
"""
type PledgedProjectsOverviewPledgesConnection {
  """
  A list of edges.
  """
  edges: [PledgeProjectOverviewItemEdge]

  """
  A list of nodes.
  """
  nodes: [PledgeProjectOverviewItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  totalCount: Int!
}

"""
An edge in a connection.
"""
type PledgeProjectOverviewItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PledgeProjectOverviewItem
}

"""
Pledged projects in pledge projects overview
"""
type PledgeProjectOverviewItem {
  """
  backing details
  """
  backing: Backing

  """
  tags
  """
  flags: [PledgedProjectsOverviewPledgeFlags!]

  """
  tier type
  """
  tierType: String

  """
  webview url for survey responses or pledge management
  """
  webviewUrl: String
}

"""
Flags for pledge in projects overview dashboard
"""
type PledgedProjectsOverviewPledgeFlags {
  """
  Flag icon type, e.g. time, alert, etc.
  """
  icon: String

  """
  Translated flag message
  """
  message: String

  """
  Flag type, e.g. warning, alert, etc.
  """
  type: String
}

"""
sort option group
"""
type PledgeProjectsOverviewOptionSet {
  """
  List of sort option groups
  """
  items: [PledgeProjectsOverviewOptionSetItem!]

  """
  Title of the sort option group
  """
  title: String!
}

"""
sort option group
"""
type PledgeProjectsOverviewOptionSetItem {
  """
  Label for sort option
  """
  label: String!

  """
  Value for sort option
  """
  value: String!
}

enum BackingsDashboardSortOptions {
  """
  Sort by relevancy
  """
  RELEVANCY

  """
  Sort by oldest first
  """
  OLDEST_FIRST

  """
  Sort by newest first
  """
  NEWEST_FIRST
}

input PledgeProjectsOverviewFilterInput {
  """
  Filter by one or more reward statuses.
  """
  rewardStatuses: PledgeProjectsOverviewRewardStatusFilter

  """
  Filter by one or more years.
  """
  pledgeDate: Int
}

enum PledgeProjectsOverviewRewardStatusFilter {
  """
  All reward types
  """
  All

  """
  Pledges awaiting rewards for
  """
  AWAITING_REWARD

  """
  pledges reward received
  """
  RECEIVED

  """
  Pledges with no rewards
  """
  NO_REWARD
}

"""
Saved search segment.
"""
type SavedSearchSegment implements Node {
  """
  ID of the saved search segment
  """
  id: ID!

  """
  Body of the saved search segment
  """
  segmentBody: JSON!

  """
  Name of the saved search segment
  """
  segmentName: String!

  """
  Origin of the saved search segment
  """
  segmentOrigin: String!
}

"""
Validates a digital resource CSV file
"""
type ValidateDigitalResource {
  """
  List of duplicate resources
  """
  duplicateResources: [String!]!

  """
  List of used resources
  """
  usedResources: [String!]!

  """
  Are there enough provide resources for the selected amount of backings
  """
  valid: Boolean!

  """
  Count of resources that can be imported
  """
  validResources: Int!
}

"""
Progress of tracking number processing
"""
type BackgroundJobProgress {
  completed: Int!

  status: BackgroundJobProgressStatusEnum!

  total: Int!
}

"""
Status of background job progress
"""
enum BackgroundJobProgressStatusEnum {
  """
  Job is processing
  """
  PROCESSING

  """
  Job is completed
  """
  COMPLETED

  """
  Job has failed
  """
  FAILED
}

"""
Information about why creators would opt out of using our pledge manager
"""
type OptOutReason {
  description: String

  """
  A follow-up question for the selected reason
  """
  followUpQuestion: String

  key: String!

  """
  The options associated with the follow-up question
  """
  options: [String!]!

  """
  Whether or not the reason has a prompt
  """
  prompt: Boolean!
}

"""
The mutation root of the Kickstarter GraphQL interface
"""
type Mutation {
  """
  Updates an address if the user rejects or accepts a suggestion
  """
  acceptOrRejectAddressSuggestion(input: AcceptOrRejectAddressSuggestionInput!): AcceptOrRejectAddressSuggestionPayload

  """
  Indicates that a backer has acknowledged the available upgrades step in checkout.
  """
  acknowledgeUpgrades(input: AcknowledgeUpgradesInput!): AcknowledgeUpgradesPayload

  """
  Activates the prelaunch page for a project
  """
  activatePrelaunch(input: ActivateProjectPrelaunchInput!): ActivateProjectPrelaunchPayload

  """
  Adds a user to a secret reward user group
  """
  addUserToSecretRewardGroup(input: AddUserToSecretRewardGroupInput!): AddUserToSecretRewardGroupPayload

  """
  Updates the toggle-able options of the spreadsheet graph
  """
  answerProjectFeedbackQuestion(input: AnswerProjectFeedbackQuestionInput!): AnswerProjectFeedbackQuestionPayload

  """
  Given a checkout that already exists, this mutation just applies a specific payment source to its backing. That's it! If you need to create a checkout and backing from scratch, use CreateBackingType.
  """
  applyPaymentSourceToCheckout(input: ApplyPaymentSourceToCheckoutInput!): ApplyPaymentSourceToCheckoutPayload

  """
  Assigns a user to review a pledge manager. If not given any optional parameters, will assign the pledge manager to the current logged-in user
  """
  assignPledgeManager(input: AssignPledgeManagerInput!): AssignPledgeManagerPayload

  """
  Batch updates addresses for users's active survey responses
  """
  batchUpdateSurveyResponseAddresses(input: BatchUpdateSurveyResponseAddressesInput!): BatchUpdateSurveyResponseAddressesPayload

  """
  Block a user
  """
  blockUser(input: BlockUserInput!): BlockUserPayload

  """
  Bulk edits the entire set of backer questions for a backer survey
  """
  bulkEditQuestions(input: BulkEditQuestionsInput!): BulkEditQuestionsPayload

  """
  Takes a stock location and bulk edits the location mapping
  """
  bulkEditStockLocationMappings(input: BulkEditStockLocationMappingsInput!): BulkEditStockLocationMappingsPayload

  """
  Cancel a pledged backing
  """
  cancelBacking(input: CancelBackingInput!): CancelBackingPayload

  """
  Cancel a live Kickstarter project.
  """
  cancelProject(input: CancelProjectInput!): CancelProjectPayload

  clearUserUnseenActivity(input: ClearUserUnseenActivityInput!): ClearUserUnseenActivityPayload

  """
  Ends a given checkout wave.
  """
  closeWave(input: CloseWaveInput!): CloseWavePayload

  """
  Complete a checkout originating from an session payment
  """
  completeOnSessionCheckout(input: CompleteOnSessionCheckoutInput!): CompleteOnSessionCheckoutPayload

  """
  Confirm payment and complete the order
  """
  completeOrder(input: CompleteOrderInput!): CompleteOrderPayload

  """
  Complete a $0 order
  """
  completeZeroDollarOrder(input: CompleteZeroDollarOrderInput!): CompleteZeroDollarOrderPayload

  """
  Confirm order address
  """
  confirmOrderAddress(input: ConfirmOrderAddressInput!): ConfirmOrderAddressPayload

  """
  Copy Reward Items from one Project to another.
  """
  copyRewardItems(input: CopyRewardItemsInput!): CopyRewardItemsPayload

  """
  Save a new address.
  """
  createAddress(input: CreateAddressInput!): CreateAddressPayload

  """
  [DEPRECATED in favor of CreateBackingType] Create a checkout with Apple Pay.
  """
  createApplePayBacking(input: CreateApplePayBackingInput!): CreateApplePayBackingPayload

  """
  Create an asset.
  """
  createAsset(input: CreateAssetInput!): CreateAssetPayload

  """
  Creates an attribution event. Specifying a project will pass the project properties for attribution events. Sending this request as a logged-in user passes that user's properties as well. Any passed-in property with the same name overwrites the generated properties.
  """
  createAttributionEvent(input: CreateAttributionEventInput!): CreateAttributionEventPayload

  """
  Save or update a search segment
  """
  createBackerReportSegment(input: CreateBackerReportSegmentInput!): CreateBackerReportSegmentPayload

  """
  Creates a backer survey and generates master variants for each project item if needed
  """
  createBackerSurvey(input: CreateBackerSurveyInput!): CreateBackerSurveyPayload

  """
  Create a backing and checkout and process payment.
  """
  createBacking(input: CreateBackingInput!): CreateBackingPayload

  """
  Create a backing and checkout without syncing to Rosie
  """
  createCheckout(input: CreateCheckoutInput!): CreateCheckoutPayload

  """
  Post a comment
  """
  createComment(input: PostCommentInput!): PostCommentPayload

  """
  Create a country signup.
  """
  createCountrySignup(input: CreateCountrySignupInput!): CreateCountrySignupPayload

  """
  Create a new creator interview
  """
  createCreatorInterview(input: CreateCreatorInterviewInput!): CreateCreatorInterviewPayload

  """
  Create an Editorial Layout.
  """
  createEditorialLayout(input: CreateEditorialLayoutTypeInput!): CreateEditorialLayoutTypePayload

  """
  Create a flagging (report) of a piece flaggable content.
  """
  createFlagging(input: CreateFlaggingInput!): CreateFlaggingPayload

  """
  Create a new project post/update
  """
  createFreeformPost(input: CreateFreeformPostInput!): CreateFreeformPostPayload

  """
  Creates an option type and values for an item
  """
  createOption(input: CreateOptionInput!): CreateOptionPayload

  createOrUpdateBackingAddress(input: CreateOrUpdateBackingAddressInput!): CreateOrUpdateBackingAddressPayload

  """
  Creates/updates item tax config and creates/updates tax category for an item
  """
  createOrUpdateItemTaxConfig(input: CreateOrUpdateItemTaxConfigInput!): CreateOrUpdateItemTaxConfigPayload

  """
  Creates (or updates) a shipping zone with weight ranges and locations
  """
  createOrUpdateShippingZone(input: CreateOrUpdateShippingZoneInput!): CreateOrUpdateShippingZonePayload

  """
  Creates or updates a Shopify shop
  """
  createOrUpdateShop(input: CreateOrUpdateShopInput!): CreateOrUpdateShopPayload

  """
  Create or update a shipment's tracking number
  """
  createOrUpdateTrackingNumber(input: CreateOrUpdateTrackingNumberInput!): CreateOrUpdateTrackingNumberPayload

  """
  Creates/updates a VAT config
  """
  createOrUpdateVatConfig(input: CreateOrUpdateVatConfigInput!): CreateOrUpdateVatConfigPayload

  """
  Create a Stripe PaymentIntent in order to collect an on-session payment via the Stripe PaymentElement
  """
  createPaymentIntent(input: CreatePaymentIntentInput!): CreatePaymentIntentPayload

  """
  Create a payment source
  """
  createPaymentSource(input: CreatePaymentSourceInput!): CreatePaymentSourcePayload

  """
  create a reward to be made available in Pledge Management.
  """
  createPledgeManagementReward(input: CreatePledgeManagementRewardInput!): CreatePledgeManagementRewardPayload

  """
  Start a Kickstarter project.
  """
  createProject(input: CreateProjectInput!): CreateProjectPayload

  """
  Post a project comment
  """
  createProjectComment(input: PostProjectCommentInput!): PostProjectCommentPayload

  """
  Creates a Deposit Account on Rosie, and a Stripe Connect Account.
  """
  createProjectDepositAccount(input: CreateProjectDepositAccountInput!): CreateProjectDepositAccountPayload

  """
  Create a project image.
  """
  createProjectImage(input: CreateProjectImageInput!): CreateProjectImagePayload

  createProjectPaymentSource(input: CreateProjectPaymentSourceInput!): CreateProjectPaymentSourcePayload

  createProjectUpdateRequest(input: CreateProjectUpdateRequestInput!): CreateProjectUpdateRequestPayload

  """
  Create a project video.
  """
  createProjectVideo(input: CreateProjectVideoInput!): CreateProjectVideoPayload

  """
  Creates a question for an object
  """
  createQuestion(input: CreateQuestionInput!): CreateQuestionPayload

  """
  create a reward on a Kickstarter project.
  """
  createReward(input: CreateRewardInput!): CreateRewardPayload

  """
  Create an item which is available through the project's backer rewards.
  """
  createRewardItem(input: CreateRewardItemInput!): CreateRewardItemPayload

  """
  Create a Stripe SetupIntent in order to render new Stripe Elements
  """
  createSetupIntent(input: CreateSetupIntentInput!): CreateSetupIntentPayload

  """
  Creates a copy of the master Sheet and shares it with the project owner
  """
  createSheetForProject(input: CreateSheetForProjectInput!): CreateSheetForProjectPayload

  """
  Creates a track event
  """
  createTrackEvent(input: CreateTrackEventInput!): CreateTrackEventPayload

  """
  Creates a new registered user
  """
  createUser(input: CreateUserInput!): CreateUserPayload

  """
  Add a user's slug.
  """
  createUserSlug(input: CreateUserSlugInput!): CreateUserSlugPayload

  """
  Add a user's website.
  """
  createUserUrl(input: CreateUserUrlsInput!): CreateUserUrlsPayload

  """
  Creates a batch of variant mappings between Kickstarter & Shopify item variant (skus)
  """
  createVariantMappings(input: CreateVariantMappingsInput!): CreateVariantMappingsPayload

  """
  Create a video track (caption) for a Project Video
  """
  createVideoTrack(input: CreateVideoTrackInput!): CreateVideoTrackPayload

  """
  Creates a checkout wave for a given project, assuming all pre-requisites are complete.
  """
  createWave(input: CreateWaveInput!): CreateWavePayload

  """
  Deactivates the prelaunch page for a project
  """
  deactivatePrelaunch(input: DeactivateProjectPrelaunchInput!): DeactivateProjectPrelaunchPayload

  """
  Deactivate a collaborator on a project.
  """
  deactivateProjectCollaborator(input: DeactivateProjectCollaboratorInput!): DeactivateProjectCollaboratorPayload

  """
  Deletes an address
  """
  deleteAddress(input: DeleteAddressInput!): DeleteAddressPayload

  """
  Delete a asset.
  """
  deleteAsset(input: DeleteAssetInput!): DeleteAssetPayload

  """
  Delete a search segment
  """
  deleteBackerReportSegment(input: DeleteBackerReportSegmentInput!): DeleteBackerReportSegmentPayload

  """
  Deletes a backer survey
  """
  deleteBackerSurvey(input: DeleteBackerSurveyInput!): DeleteBackerSurveyPayload

  """
  Delete a comment
  """
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload

  """
  Deletes an option type and values for an item
  """
  deleteOption(input: DeleteOptionInput!): DeleteOptionPayload

  """
  Delete a project post
  """
  deletePost(input: DeletePostInput!): DeletePostPayload

  """
  Delete an unlaunched Kickstarter project.
  """
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload

  """
  Delete a comment
  """
  deleteProjectComment(input: DeleteProjectCommentInput!): DeleteProjectCommentPayload

  """
  Delete a project image.
  """
  deleteProjectImage(input: DeleteProjectImageInput!): DeleteProjectImagePayload

  """
  Delete a project video.
  """
  deleteProjectVideo(input: DeleteProjectVideoInput!): DeleteProjectVideoPayload

  """
  Deletes a question
  """
  deleteQuestion(input: DeleteQuestionInput!): DeleteQuestionPayload

  """
  Delete a reward from a project
  """
  deleteReward(input: DeleteRewardInput!): DeleteRewardPayload

  """
  Delete a reward item from a project
  """
  deleteRewardItem(input: DeleteRewardItemInput!): DeleteRewardItemPayload

  """
  Delete a shipping zone.
  """
  deleteShippingZone(input: DeleteShippingZoneInput!): DeleteShippingZonePayload

  """
  Deletes a stock location and associated address
  """
  deleteStockLocation(input: DeleteStockLocationInput!): DeleteStockLocationPayload

  """
  Delete a user's url
  """
  deleteUserUrl(input: DeleteUserUrlsInput!): DeleteUserUrlsPayload

  """
  Deletes all variant mappings for a shopify shop, refreshing its state
  """
  deleteVariantMappings(input: DeleteVariantMappingsInput!): DeleteVariantMappingsPayload

  """
  Delete a video track (caption) from a video
  """
  deleteVideoTrack(input: DeleteVideoTrackInput!): DeleteVideoTrackPayload

  """
  Adds disliked projects to a users taste profile
  """
  dislikeProject(input: DislikeProjectInput!): DislikeProjectPayload

  """
  Distribute digital access resources like access keys or URLs to backers with digital rewards
  """
  distributeDigitalAccessResources(input: DistributeDigitalAccessResourcesInput!): DistributeDigitalAccessResourcesPayload

  """
  End late pledges for a Kickstarter project.
  """
  endLatePledges(input: EndLatePledgesInput!): EndLatePledgesPayload

  """
  Feature a reward for a Kickstarter project.
  """
  featureReward(input: FeatureRewardInput!): FeatureRewardPayload

  """
  Causes the current user to follow a specified user
  """
  followUser(input: FollowUserInput!): FollowUserPayload

  """
  Enable the preview url for a Kickstarter project.
  """
  generateProjectPreview(input: GenerateProjectPreviewInput!): GenerateProjectPreviewPayload

  """
  Invite a new collaborator on a project
  """
  inviteProjectCollaborator(input: InviteProjectCollaboratorInput!): InviteProjectCollaboratorPayload

  """
  Issue a refund for a backer. Can include the refunding of both the pledge and the PM transactions.
  """
  issueRefund(input: IssueRefundInput!): IssueRefundPayload

  """
  Launch a Kickstarter project.
  """
  launchProject(input: LaunchProjectInput!): LaunchProjectPayload

  """
  Like a specified project update
  """
  likePost(input: LikePostInput!): LikePostPayload

  """
  Adds a like for the passed in project to the user's taste profile
  """
  likeProject(input: LikeProjectInput!): LikeProjectPayload

  """
  Adds a quiz project and any attributes the user has liked to their taste profile
  """
  likeQuizProject(input: LikeQuizProjectInput!): LikeQuizProjectPayload

  """
  Locks backer address changes for a project
  """
  lockAddresses(input: LockAddressesInput!): LockAddressesPayload

  """
  Migrate's a project's eligible backings to new fulfillment status tool.
  """
  migrateToFulfillmentStatus(input: MigrateToFulfillmentStatusInput!): MigrateToFulfillmentStatusPayload

  """
  Opt in to a pledge manager
  """
  optInToPledgeManager(input: OptInToPledgeManagerInput!): OptInToPledgeManagerPayload

  """
  Opt out of a pledge manager
  """
  optOutOfPledgeManager(input: OptOutOfPledgeManagerInput!): OptOutOfPledgeManagerPayload

  """
  Delete a user's payment source
  """
  paymentSourceDelete(input: PaymentSourceDeleteInput!): PaymentSourceDeletePayload

  """
  Pin a project update
  """
  pinPost(input: PinPostInput!): PinPostPayload

  """
  Exclude a reward's backers from getting notifications about a post.
  """
  postExcludeReward(input: PostExcludeRewardInput!): PostExcludeRewardPayload

  """
  Include a reward's backers in notifications about a post.
  """
  postIncludeReward(input: PostIncludeRewardInput!): PostIncludeRewardPayload

  """
  Distribute digital access resources from csv upload
  """
  processDigitalResourcesCsv(input: ProcessDigitalResourcesCsvInput!): ProcessDigitalResourcesCsvPayload

  """
  Processes tracking numbers for a given project
  """
  processTrackingNumbers(input: ProcessTrackingNumbersInput!): ProcessTrackingNumbersPayload

  """
  Publish an Editorial Layout.
  """
  publishEditorialLayout(input: PublishEditorialLayoutTypeInput!): PublishEditorialLayoutTypePayload

  """
  Publish a project post
  """
  publishPost(input: PublishPostInput!): PublishPostPayload

  """
  Refreshes the spreadsheet data from the sheet
  """
  refreshSpreadsheetData(input: RefreshSpreadsheetDataInput!): RefreshSpreadsheetDataPayload

  """
  Removes the spreadsheet associated to a project
  """
  removeSheetFromProject(input: RemoveSheetFromProjectInput!): RemoveSheetFromProjectPayload

  reportSpam(input: ReportSpamInput!): ReportSpamPayload

  """
  Requests a password reset email.
  """
  requestPasswordReset(input: RequestPasswordResetInput!): RequestPasswordResetPayload

  """
  Reset a backer survey
  """
  resetBackerSurvey(input: ResetBackerSurveyInput!): ResetBackerSurveyPayload

  """
  Reverts a pledge manager to draft state
  """
  revertPledgeManagerToDraft(input: RevertPledgeManagerToDraftInput!): RevertPledgeManagerToDraftPayload

  """
  Sets pledge manager state to approved or denied based on outcome of review
  """
  reviewPledgeManager(input: ReviewPledgeManagerInput!): ReviewPledgeManagerPayload

  """
  Send a message
  """
  sendMessage(input: SendMessageInput!): SendMessagePayload

  """
  Send a message for a project submission
  """
  sendSubmissionMessage(input: SendSubmissionMessageInput!): SendSubmissionMessagePayload

  """
  Sends a backer survey and creates backer carts
  """
  sendSurvey(input: SendSurveyInput!): SendSurveyPayload

  """
  Sets an address as the primary/default address for the user
  """
  setAddressAsPrimary(input: SetAddressAsPrimaryInput!): SetAddressAsPrimaryPayload

  """
  Sets address_collection_enabled
  """
  setAddressCollectionEnabled(input: SetAddressCollectionEnabledInput!): SetAddressCollectionEnabledPayload

  """
  Sets the fulfillment status of multiple backings based on various filters.
  """
  setBackingFulfillmentStatuses(input: SetBackingFulfillmentStatusesInput!): SetBackingFulfillmentStatusesPayload

  setBackingNote(input: SetBackingNoteInput!): SetBackingNotePayload

  """
  Set a project slug.
  """
  setProjectSlug(input: SetProjectSlugInput!): SetProjectSlugPayload

  """
  Updates the project status
  """
  setProjectStatus(input: SetProjectStatusInput!): SetProjectStatusPayload

  """
  Sets a project's shipping configuration, e.g. weight based or flat rate
  """
  setShippingConfig(input: SetShippingConfigInput!): SetShippingConfigPayload

  """
  Sets tax category for an item
  """
  setTaxCategory(input: SetTaxCategoryInput!): SetTaxCategoryPayload

  """
  Signs in or sign up a user via the Sign in With Apple service
  """
  signInWithApple(input: SignInWithAppleInput!): SignInWithApplePayload

  """
  Submits a draft pledge manager
  """
  submitPledgeManager(input: SubmitPledgeManagerInput!): SubmitPledgeManagerPayload

  submitProject(input: SubmitProjectInput!): SubmitProjectPayload

  """
  Refund a backing.
  """
  submitRefundCheckout(input: SubmitRefundCheckoutInput!): SubmitRefundCheckoutPayload

  """
  Associates backing with an address, updates cart with item preference selections, and creates answers to survey questions.
  """
  submitResponses(input: SubmitResponsesInput!): SubmitResponsesPayload

  """
  Submits the VAT number to rosie
  """
  submitVatNumber(input: SubmitVatNumberInput!): SubmitVatNumberPayload

  """
  Confirm payment and complete the order
  """
  succeedOrder(input: SucceedOrderInput!): SucceedOrderPayload

  """
  Toggle whether a comment is pinned.
  """
  toggleCommentPin(input: ToggleCommentPinInput!): ToggleCommentPinPayload

  """
  Toggles a milestone for a given project and category to completed or not completed
  """
  toggleProjectMilestone(input: ToggleProjectMilestoneInput!): ToggleProjectMilestonePayload

  """
  Enable & disable the preview url for a Kickstarter project.
  """
  toggleProjectPreview(input: ToggleProjectPreviewInput!): ToggleProjectPreviewPayload

  """
  Toggles the syncing state for a Shopify shop
  """
  toggleSyncingForShop(input: ToggleSyncingForShopInput!): ToggleSyncingForShopPayload

  """
  Toggle whether a project can set up and collect tariff surcharges
  """
  toggleTariffSurchargesEnabled(input: ToggleTariffSurchargesEnabledInput!): ToggleTariffSurchargesEnabledPayload

  """
  Translate an Editorial Layout.
  """
  translateEditorialLayout(input: TranslateEditorialLayoutTypeInput!): TranslateEditorialLayoutTypePayload

  """
  Triggers third party event
  """
  triggerThirdPartyEvent(input: TriggerThirdPartyEventInput!): TriggerThirdPartyEventPayload

  """
  Unblock a user
  """
  unblockUser(input: UnblockUserInput!): UnblockUserPayload

  """
  Removes a like for the passed in project from the user's taste profile
  """
  undislikeProject(input: UndislikeProjectInput!): UndislikeProjectPayload

  """
  Causes the current user to unfollow a specified user
  """
  unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload

  """
  Unlike a specified project update
  """
  unlikePost(input: UnlikePostInput!): UnlikePostPayload

  """
  Removes a like for the passed in project from the user's taste profile
  """
  unlikeProject(input: UnlikeProjectInput!): UnlikeProjectPayload

  """
  Unpin a project update
  """
  unpinPost(input: UnpinPostInput!): UnpinPostPayload

  """
  Unpublish an Editorial Layout.
  """
  unpublishEditorialLayout(input: UnpublishEditorialLayoutTypeInput!): UnpublishEditorialLayoutTypePayload

  untagProject(input: UntagProjectInput!): UntagProjectPayload

  unwatchProject(input: UnwatchProjectInput!): UnwatchProjectPayload

  """
  Updates the pledge manager to enable or disable accepts_new_backers
  """
  updateAcceptsNewBackers(input: UpdateAcceptsNewBackersInput!): UpdateAcceptsNewBackersPayload

  """
  Update the backing completed at field with a backing_completed toggle
  """
  updateBackerCompleted(input: UpdateBackerCompletedInput!): UpdateBackerCompletedPayload

  """
  Updates backer survey with a rich text intro
  """
  updateBackerSurveyIntro(input: UpdateBackerSurveyIntroInput!): UpdateBackerSurveyIntroPayload

  """
  Update an existing backing for a Kickstarter project.
  """
  updateBacking(input: UpdateBackingInput!): UpdateBackingPayload

  """
  Update a backing's payment source
  """
  updateBackingPaymentSource(input: UpdateBackingPaymentSourceInput!): UpdateBackingPaymentSourcePayload

  """
  Handle a user's updated consent for data collection purposes.
  """
  updateConsent(input: UpdateConsentInput!): UpdateConsentPayload

  """
  Update a creator interview
  """
  updateCreatorInterview(input: UpdateCreatorInterviewInput!): UpdateCreatorInterviewPayload

  """
  Creates, updates, or destroys associations between an Order and a backer's selected Cross Sells
  """
  updateCrossSellsOnOrder(input: UpdateCrossSellsOnOrderInput!): UpdateCrossSellsOnOrderPayload

  """
  Update a project's fulfillment_modal_dismissed_at timestamp.
  """
  updateFulfillmentModalDismissedAt(input: UpdateFulfillmentModalDismissedAtInput!): UpdateFulfillmentModalDismissedAtPayload

  """
  Update a project's fulfillment_status.
  """
  updateFulfillmentStatus(input: UpdateFulfillmentStatusInput!): UpdateFulfillmentStatusPayload

  """
  Updates an array of ItemVariant
  """
  updateItemVariants(input: UpdateItemVariantsInput!): UpdateItemVariantsPayload

  """
  Updates item weights given a set of item ids and weights
  """
  updateItemWeights(input: UpdateItemWeightsInput!): UpdateItemWeightsPayload

  """
  Updates an option type and values for an item
  """
  updateOption(input: UpdateOptionInput!): UpdateOptionPayload

  """
  Update an order adjustment success state and error message
  """
  updateOrderAdjustment(input: UpdateOrderAdjustmentInput!): UpdateOrderAdjustmentPayload

  """
  Update OrderableConfig for an Orderable
  """
  updateOrderableConfig(input: UpdateOrderableConfigInput!): UpdateOrderableConfigPayload

  """
  update a reward to be made available in Pledge Management.
  """
  updatePledgeManagementReward(input: UpdatePledgeManagementRewardInput!): UpdatePledgeManagementRewardPayload

  """
  Update a project post
  """
  updatePost(input: UpdatePostInput!): UpdatePostPayload

  """
  Update an existing Kickstarter project.
  """
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload

  """
  Update a collaborator on a project.
  """
  updateProjectCollaborator(input: UpdateProjectCollaboratorInput!): UpdateProjectCollaboratorPayload

  updateProjectPaymentSource(input: UpdateProjectPaymentSourceInput!): UpdateProjectPaymentSourcePayload

  updateProjectRiskStrategies(input: UpdateProjectRiskStrategiesInput!): UpdateProjectRiskStrategiesPayload

  updateProjectVerifiedCreatorName(input: UpdateProjectVerifiedCreatorNameInput!): UpdateProjectVerifiedCreatorNamePayload

  """
  Updates a question
  """
  updateQuestion(input: UpdateQuestionInput!): UpdateQuestionPayload

  """
  Update a refund checkout state and error message
  """
  updateRefundCheckout(input: UpdateRefundCheckoutInput!): UpdateRefundCheckoutPayload

  """
  Updates audience for a specified resource
  """
  updateResourceAudience(input: UpdateResourceAudienceInput!): UpdateResourceAudiencePayload

  """
  Update a reward on a Kickstarter project.
  """
  updateReward(input: UpdateRewardInput!): UpdateRewardPayload

  """
  Update an item which is available through the project's backer rewards.
  """
  updateRewardItem(input: UpdateRewardItemInput!): UpdateRewardItemPayload

  """
  Update ShippingRates for a BackerReward
  """
  updateRewardShippingRates(input: UpdateRewardShippingRatesInput!): UpdateRewardShippingRatesPayload

  """
  Updates the toggle-able options of the spreadsheet graph
  """
  updateSpreadsheetToggles(input: UpdateSpreadsheetTogglesInput!): UpdateSpreadsheetTogglesPayload

  """
  Update user account
  """
  updateUserAccount(input: UpdateUserAccountInput!): UpdateUserAccountPayload

  """
  Update user notification for a topic
  """
  updateUserNotification(input: UpdateUserNotificationInput!): UpdateUserNotificationPayload

  """
  Update user notification frequency for a topic
  """
  updateUserNotificationFrequency(input: UpdateUserNotificationFrequencyInput!): UpdateUserNotificationFrequencyPayload

  """
  Update user's profile
  """
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload

  """
  Creates a valid user setting
  """
  updateUserSetting(input: UpdateUserSettingInput!): UpdateUserSettingPayload

  """
  Updates the backer's order with the new reward they're upgrading to, or resets the order
  """
  upgradeRewardOnOrder(input: UpgradeRewardOnOrderInput!): UpgradeRewardOnOrderPayload

  """
  send email verification
  """
  userSendEmailVerification(input: UserSendEmailVerificationInput!): UserSendEmailVerificationPayload

  watchProject(input: WatchProjectInput!): WatchProjectPayload
}

"""
Autogenerated return type of RequestPasswordReset
"""
type RequestPasswordResetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  email: Email
}

"""
An email address.
"""
scalar Email

"""
Autogenerated input type of RequestPasswordReset
"""
input RequestPasswordResetInput {
  email: Email

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of FollowUser
"""
type FollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of FollowUser
"""
input FollowUserInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnfollowUser
"""
type UnfollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of UnfollowUser
"""
input UnfollowUserInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of BlockUser
"""
type BlockUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  currentUser: User

  success: Boolean!
}

"""
Autogenerated input type of BlockUser
"""
input BlockUserInput {
  blockUserId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnblockUser
"""
type UnblockUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  currentUser: User

  success: Boolean!
}

"""
Autogenerated input type of UnblockUser
"""
input UnblockUserInput {
  blockUserId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateFreeformPost
"""
type CreateFreeformPostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: FreeformPost
}

"""
Autogenerated input type of CreateFreeformPost
"""
input CreateFreeformPostInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCreatorInterview
"""
type CreateCreatorInterviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  creatorInterview: CreatorInterview
}

"""
Autogenerated input type of CreateCreatorInterview
"""
input CreateCreatorInterviewInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdatePost
"""
type UpdatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: FreeformPost
}

"""
Autogenerated input type of UpdatePost
"""
input UpdatePostInput {
  id: ID!

  title: String

  body: HTML

  public: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateCreatorInterview
"""
type UpdateCreatorInterviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  creatorInterview: CreatorInterview
}

"""
Autogenerated input type of UpdateCreatorInterview
"""
input UpdateCreatorInterviewInput {
  id: ID!

  title: String

  public: Boolean

  answers: [InterviewAnswerInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Interview answer input for updating creator interviews
"""
input InterviewAnswerInput {
  """
  The associated interview question id
  """
  interviewQuestionId: ID!

  """
  The body of the interview answer
  """
  body: String!

  """
  True if the creator chose to skip the question
  """
  skip: Boolean
}

"""
Autogenerated return type of PublishPost
"""
type PublishPostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of PublishPost
"""
input PublishPostInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeletePost
"""
type DeletePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of DeletePost
"""
input DeletePostInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of LikePost
"""
type LikePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of LikePost
"""
input LikePostInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnlikePost
"""
type UnlikePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of UnlikePost
"""
input UnlikePostInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of PinPost
"""
type PinPostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of PinPost
"""
input PinPostInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnpinPost
"""
type UnpinPostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of UnpinPost
"""
input UnpinPostInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of PostExcludeReward
"""
type PostExcludeRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of PostExcludeReward
"""
input PostExcludeRewardInput {
  rewardId: ID

  postId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of PostIncludeReward
"""
type PostIncludeRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  post: Postable
}

"""
Autogenerated input type of PostIncludeReward
"""
input PostIncludeRewardInput {
  rewardId: ID

  postId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  categoryId: ID!

  additionalSubcategoryId: ID

  countryCode: CountryCode!

  description: String

  tag: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitProject
"""
type SubmitProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of SubmitProject
"""
input SubmitProjectInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelProject
"""
type CancelProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of CancelProject
"""
input CancelProjectInput {
  id: ID!

  password: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelBacking
"""
type CancelBackingPayload {
  backing: Backing!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CancelBacking
"""
input CancelBackingInput {
  """
  ID of the backing being canceled
  """
  id: ID!

  """
  Optional cancellation note
  """
  note: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  creator: User
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  id: ID!

  password: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  id: ID!

  name: String

  aiDisclosure: AiDisclosureInput

  deadline: Int

  description: String

  """
  Duration of campaign, in days.
  """
  duration: Int

  environmentalCommitments: [EnvironmentalCommitmentInput]

  story: HTML

  risks: String

  storyRteVersion: String

  goal: Int

  googleAnalyticsTrackingId: String

  googleAnalyticsApiSecret: String

  metaPixelId: String

  metaCapiAccessToken: String

  categoryId: ID

  additionalSubcategoryId: ID

  locationId: ID

  paymentSourceId: String

  targetLaunchDate: ISO8601DateTime

  currency: CurrencyCode

  faqs: [FaqInput!]

  postCampaignPledgesEnabled: Boolean

  pledgeOverTimeEnabled: Boolean

  chargeShippingInPledgeManager: Boolean

  prelaunchStory: HTML

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

input AiDisclosureInput {
  fundingForAiAttribution: Boolean

  fundingForAiConsent: Boolean

  fundingForAiOption: Boolean

  generatedByAiConsent: String

  generatedByAiDetails: String

  otherAiDetails: String
}

"""
An environmental commitment for a project.
"""
input EnvironmentalCommitmentInput {
  id: ID!

  commitmentCategory: EnvironmentalCommitmentCategory!

  description: String!
}

"""
A FAQ question and answer for a project.
"""
input FaqInput {
  id: ID

  position: Int!

  question: String!

  answer: String!
}

"""
Autogenerated return type of LaunchProject
"""
type LaunchProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of LaunchProject
"""
input LaunchProjectInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UntagProject
"""
type UntagProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of UntagProject
"""
input UntagProjectInput {
  id: ID!

  tag: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetProjectSlug
"""
type SetProjectSlugPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of SetProjectSlug
"""
input SetProjectSlugInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateProjectVerifiedCreatorName
"""
type UpdateProjectVerifiedCreatorNamePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of UpdateProjectVerifiedCreatorName
"""
input UpdateProjectVerifiedCreatorNameInput {
  id: ID!

  name: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetProjectStatus
"""
type SetProjectStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  projectStatus: ProjectStatus
}

"""
Autogenerated input type of SetProjectStatus
"""
input SetProjectStatusInput {
  projectId: ID!

  nowStatus: String

  nextStatus: String

  nextDueDate: ISO8601DateTime!

  enabled: Boolean = true

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ActivateProjectPrelaunch
"""
type ActivateProjectPrelaunchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of ActivateProjectPrelaunch
"""
input ActivateProjectPrelaunchInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeactivateProjectPrelaunch
"""
type DeactivateProjectPrelaunchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DeactivateProjectPrelaunch
"""
input DeactivateProjectPrelaunchInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateProjectRiskStrategies
"""
type UpdateProjectRiskStrategiesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  updatedRiskStrategies: [RiskStrategy!]
}

"""
Autogenerated input type of UpdateProjectRiskStrategies
"""
input UpdateProjectRiskStrategiesInput {
  projectId: ID!

  riskStrategies: [RiskStrategyInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Inputs required to create a risk strategy for a project.
"""
input RiskStrategyInput {
  riskCategory: RiskCategoryType!

  description: String!
}

"""
Autogenerated return type of CreateSheetForProject
"""
type CreateSheetForProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  sheetsUrl: String

  spreadsheetData: [SpreadsheetDatum]
}

"""
Autogenerated input type of CreateSheetForProject
"""
input CreateSheetForProjectInput {
  id: ID!

  email: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveSheetFromProject
"""
type RemoveSheetFromProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  sheetsUrl: String
}

"""
Autogenerated input type of RemoveSheetFromProject
"""
input RemoveSheetFromProjectInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RefreshSpreadsheetData
"""
type RefreshSpreadsheetDataPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  spreadsheet: Spreadsheet
}

"""
Autogenerated input type of RefreshSpreadsheetData
"""
input RefreshSpreadsheetDataInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateSpreadsheetToggles
"""
type UpdateSpreadsheetTogglesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  spreadsheet: Spreadsheet
}

"""
Autogenerated input type of UpdateSpreadsheetToggles
"""
input UpdateSpreadsheetTogglesInput {
  id: ID!

  public: Boolean

  displayMode: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AnswerProjectFeedbackQuestion
"""
type AnswerProjectFeedbackQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  feedback: ProjectFeedback
}

"""
Autogenerated input type of AnswerProjectFeedbackQuestion
"""
input AnswerProjectFeedbackQuestionInput {
  id: ID!

  questionName: String!

  questionAnswer: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ToggleProjectMilestone
"""
type ToggleProjectMilestonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  milestone: ProjectMilestone
}

"""
Autogenerated input type of ToggleProjectMilestone
"""
input ToggleProjectMilestoneInput {
  id: ID!

  milestoneCategory: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeactivateProjectCollaborator
"""
type DeactivateProjectCollaboratorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of DeactivateProjectCollaborator
"""
input DeactivateProjectCollaboratorInput {
  """
  The project id
  """
  projectId: ID!

  """
  The collaborator's user id
  """
  userId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of InviteProjectCollaborator
"""
type InviteProjectCollaboratorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of InviteProjectCollaborator
"""
input InviteProjectCollaboratorInput {
  """
  ID of project getting the collaborator
  """
  projectId: ID!

  """
  Email of the collaborator
  """
  userEmail: String!

  """
  Title of the collaborator
  """
  title: String

  """
  Permissions granted to the collaborator
  """
  permissions: [CollaboratorPermission!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateProjectCollaborator
"""
type UpdateProjectCollaboratorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of UpdateProjectCollaborator
"""
input UpdateProjectCollaboratorInput {
  """
  ID of project updating the collaborator
  """
  projectId: ID!

  """
  ID of the collaborator
  """
  userId: ID!

  """
  Title of the collaborator
  """
  title: String!

  """
  Updated permissions granted to the collaborator
  """
  permissions: [CollaboratorPermission!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of GenerateProjectPreview
"""
type GenerateProjectPreviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of GenerateProjectPreview
"""
input GenerateProjectPreviewInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ToggleProjectPreview
"""
type ToggleProjectPreviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of ToggleProjectPreview
"""
input ToggleProjectPreviewInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateVideoTrack
"""
type CreateVideoTrackPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  videoTrack: VideoTrack
}

"""
Autogenerated input type of CreateVideoTrack
"""
input CreateVideoTrackInput {
  videoId: ID!

  languageCode: CaptionLanguageCode!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteVideoTrack
"""
type DeleteVideoTrackPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  video: Video
}

"""
Autogenerated input type of DeleteVideoTrack
"""
input DeleteVideoTrackInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SendMessage
"""
type SendMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  conversation: Conversation

  message: Message
}

"""
Autogenerated input type of SendMessage
"""
input SendMessageInput {
  recipientId: ID!

  projectId: ID!

  body: String!

  gRecaptchaResponse: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SendSubmissionMessage
"""
type SendSubmissionMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  message: Message
}

"""
Autogenerated input type of SendSubmissionMessage
"""
input SendSubmissionMessageInput {
  projectId: ID!

  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ReportSpam
"""
type ReportSpamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  message: Message!

  spam: Boolean!
}

"""
Autogenerated input type of ReportSpam
"""
input ReportSpamInput {
  messageId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCountrySignup
"""
type CreateCountrySignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  isSuccessful: Boolean!
}

"""
Autogenerated input type of CreateCountrySignup
"""
input CreateCountrySignupInput {
  email: Email!

  country: CountryCode!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of WatchProject
"""
type WatchProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project

  user: User
}

"""
Autogenerated input type of WatchProject
"""
input WatchProjectInput {
  id: ID!

  trackingContext: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnwatchProject
"""
type UnwatchProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project

  user: User
}

"""
Autogenerated input type of UnwatchProject
"""
input UnwatchProjectInput {
  id: ID!

  trackingContext: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateProjectImage
"""
type CreateProjectImagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  image: Photo
}

"""
Autogenerated input type of CreateProjectImage
"""
input CreateProjectImageInput {
  id: ID!

  s3Key: String!

  fileName: String!

  contentType: String!

  updatedAt: Int!

  fileSize: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectImage
"""
type DeleteProjectImagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DeleteProjectImage
"""
input DeleteProjectImageInput {
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateProjectVideo
"""
type CreateProjectVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  video: Video
}

"""
Autogenerated input type of CreateProjectVideo
"""
input CreateProjectVideoInput {
  id: ID!

  s3Key: String!

  fileName: String!

  contentType: String!

  updatedAt: Int!

  fileSize: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectVideo
"""
type DeleteProjectVideoPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DeleteProjectVideo
"""
input DeleteProjectVideoInput {
  """
  The project ID
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of PostComment
"""
type PostCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  comment: Comment
}

"""
Autogenerated input type of PostComment
"""
input PostCommentInput {
  """
  The ID of the object you are commenting on
  """
  commentableId: ID!

  """
  The body of the comment
  """
  body: String!

  """
  The ID of the comment you are replying to
  """
  parentId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteComment
"""
type DeleteCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  commentable: Project
}

"""
Autogenerated input type of DeleteComment
"""
input DeleteCommentInput {
  """
  The comment ID
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ToggleCommentPin
"""
type ToggleCommentPinPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  comment: Comment!
}

"""
Autogenerated input type of ToggleCommentPin
"""
input ToggleCommentPinInput {
  commentId: ID!

  pinned: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of PostProjectComment
"""
type PostProjectCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  comment: Comment
}

"""
Autogenerated input type of PostProjectComment
"""
input PostProjectCommentInput {
  """
  The ID of the project you are commenting on
  """
  projectId: ID!

  """
  The body of the comment
  """
  body: String!

  """
  The ID of the comment you are replying to
  """
  parentId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectComment
"""
type DeleteProjectCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DeleteProjectComment
"""
input DeleteProjectCommentInput {
  """
  The comment ID
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateAsset
"""
type CreateAssetPayload {
  asset: AttachedMedia

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

union AttachedMedia = AttachedAudio|AttachedVideo|Photo

"""
Autogenerated input type of CreateAsset
"""
input CreateAssetInput {
  """
  ID of the object to attach the asset to
  """
  id: ID!

  s3Key: String!

  fileName: String!

  """
  mime type. ex: 'image/png'
  """
  contentType: String!

  updatedAt: Int!

  """
  attachable attribute. ex: 'hero_media', 'avatar', ...
  """
  attachableAssoc: String!

  """
  File size of asset in bytes.
  """
  fileSize: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteAsset
"""
type DeleteAssetPayload {
  attachable: Attachable!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

union Attachable = Project|FreeformPost|InterviewAnswer|Survey

"""
A survey
"""
type Survey implements Node {
  id: ID!
}

"""
Autogenerated input type of DeleteAsset
"""
input DeleteAssetInput {
  attachable_id: ID!

  asset_id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateAddress
"""
type CreateAddressPayload {
  """
  Address that was created
  """
  address: Address!

  """
  Object associated with the address
  """
  associatedObject: AddressAssociatedObject

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Address suggestion
  """
  suggestedAddress: Address

  """
  Validation status for created address
  """
  validationStatus: ValidationStatus!
}

"""
Status returned from an address validation
"""
enum ValidationStatus {
  exact

  suggestion

  not_found

  error
}

union AddressAssociatedObject = Order|Project|StockLocation|Backing

"""
Autogenerated input type of CreateAddress
"""
input CreateAddressInput {
  recipientName: String!

  referenceName: String!

  addressLine1: String!

  addressLine2: String

  city: String!

  region: String

  postalCode: String!

  countryCode: CountryCode!

  phoneNumber: String!

  primary: Boolean

  associatedObjectId: ID

  source: AddressCreationSource!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Source of address creation
"""
enum AddressCreationSource {
  stock_location_create

  stock_location_edit

  user_settings

  survey

  pledge_redemption

  pledge_redemption_edit
}

"""
Autogenerated return type of BatchUpdateSurveyResponseAddresses
"""
type BatchUpdateSurveyResponseAddressesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The count of SurveyResponses that were successfully updated
  """
  updatedSurveyResponsesCount: Int!
}

"""
Autogenerated input type of BatchUpdateSurveyResponseAddresses
"""
input BatchUpdateSurveyResponseAddressesInput {
  fulfillmentAddressId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AcceptOrRejectAddressSuggestion
"""
type AcceptOrRejectAddressSuggestionPayload {
  """
  Object associated with the address
  """
  associatedObject: AddressAssociatedObject

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of AcceptOrRejectAddressSuggestion
"""
input AcceptOrRejectAddressSuggestionInput {
  fulfillmentAddressId: ID!

  suggestionAccepted: Boolean!

  associatedObjectId: ID

  source: AddressCreationSource!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteAddress
"""
type DeleteAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Success if address was deleted successfully
  """
  success: Boolean!
}

"""
Autogenerated input type of DeleteAddress
"""
input DeleteAddressInput {
  fulfillmentAddressId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetAddressAsPrimary
"""
type SetAddressAsPrimaryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Success if address was updated successfully
  """
  success: Boolean!
}

"""
Autogenerated input type of SetAddressAsPrimary
"""
input SetAddressAsPrimaryInput {
  fulfillmentAddressId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateOrUpdateBackingAddress
"""
type CreateOrUpdateBackingAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  success: Boolean!
}

"""
Autogenerated input type of CreateOrUpdateBackingAddress
"""
input CreateOrUpdateBackingAddressInput {
  backingId: ID!

  addressId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetBackingFulfillmentStatuses
"""
type SetBackingFulfillmentStatusesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  updatedBackingCount: Int
}

"""
Autogenerated input type of SetBackingFulfillmentStatuses
"""
input SetBackingFulfillmentStatusesInput {
  backingIds: [ID!]

  selectAll: Boolean

  projectId: ID!

  newFulfillmentStatus: FulfillmentStatusSelectOptions!

  rewards: [ID!]

  addons: [ID!]

  sqlFilterAddons: SqlFilterOperator

  items: [ID!]

  sqlFilterItems: SqlFilterOperator

  skus: [ID!]

  sqlFilterSkus: SqlFilterOperator

  locations: [ID!]

  amountMin: Int

  amountMax: Int

  pledgedAtMin: String

  pledgedAtMax: String

  fulfillmentStatus: [String!]

  surveyAnswered: [Boolean!]

  isLatePledge: [Boolean!]

  term: [String!]

  status: [String!]

  pledgeRedemptionState: [String!]

  actionsTaken: [String!]

  pledgeOverTime: [Boolean!]

  backerEntryPoint: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Values for backing fulfillment status
"""
enum FulfillmentStatusSelectOptions {
  not_started

  in_progress

  shipped

  delayed
}

"""
Autogenerated return type of MigrateToFulfillmentStatus
"""
type MigrateToFulfillmentStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Succeeds if backings are being updated in backend.
  """
  success: Boolean!
}

"""
Autogenerated input type of MigrateToFulfillmentStatus
"""
input MigrateToFulfillmentStatusInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateFulfillmentModalDismissedAt
"""
type UpdateFulfillmentModalDismissedAtPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of UpdateFulfillmentModalDismissedAt
"""
input UpdateFulfillmentModalDismissedAtInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateFulfillmentStatus
"""
type UpdateFulfillmentStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of UpdateFulfillmentStatus
"""
input UpdateFulfillmentStatusInput {
  projectId: ID!

  fulfillmentStatus: FulfillmentStatus!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserSetting
"""
type UpdateUserSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of UpdateUserSetting
"""
input UpdateUserSettingInput {
  setting: UserSetting!

  enable: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Possible user settings
"""
enum UserSetting {
  manual_play_videos

  superbacker_not_visible

  confirmed_watch_notice

  confirmed_signal_notice

  opted_out_of_recommendations

  viz_notification

  opt_in_ksr_research

  show_public_profile

  dismissed_taste_profile_toast

  dismissed_pyl_toast

  dismissed_reward_images_toast

  admin_message_badge
}

"""
Autogenerated return type of UpdateUserAccount
"""
type UpdateUserAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of UpdateUserAccount
"""
input UpdateUserAccountInput {
  currentPassword: String

  password: String

  passwordConfirmation: String

  email: Email

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserProfile
"""
type UpdateUserProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of UpdateUserProfile
"""
input UpdateUserProfileInput {
  name: String

  biography: String

  locationId: ID

  chosenCurrency: CurrencyCode

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserNotification
"""
type UpdateUserNotificationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  userNotification: Notification
}

"""
Autogenerated input type of UpdateUserNotification
"""
input UpdateUserNotificationInput {
  topic: UserNotificationTopic!

  kind: UserNotificationKind!

  value: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
User notification kind
"""
enum UserNotificationKind {
  """
  Email
  """
  email

  """
  Mobile
  """
  mobile
}

"""
Autogenerated return type of UpdateUserNotificationFrequency
"""
type UpdateUserNotificationFrequencyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  userNotification: Notification
}

"""
Autogenerated input type of UpdateUserNotificationFrequency
"""
input UpdateUserNotificationFrequencyInput {
  topic: UserNotificationTopic!

  frequency: UserNotificationFrequency!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUserUrls
"""
type CreateUserUrlsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of CreateUserUrls
"""
input CreateUserUrlsInput {
  url: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteUserUrls
"""
type DeleteUserUrlsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of DeleteUserUrls
"""
input DeleteUserUrlsInput {
  urlId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUserSlug
"""
type CreateUserSlugPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of CreateUserSlug
"""
input CreateUserSlugInput {
  slug: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ClearUserUnseenActivity
"""
type ClearUserUnseenActivityPayload {
  activityIndicatorCount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ClearUserUnseenActivity
"""
input ClearUserUnseenActivityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  name: String!

  email: String!

  emailConfirmation: String!

  """
  If the user agrees to opt into weekly newsletters
  """
  optIntoNewsletters: Boolean = false

  """
  If the user agrees to opt into receiving surveys for user research
  """
  optIntoUserResearch: Boolean = false

  password: String!

  """
  Supply if creating an account via backing flow -- used for tracking purposes
  """
  projectPid: String

  recaptchaV2Token: String

  recaptchaV3Token: String

  checkoutId: String

  n: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignInWithApple
"""
type SignInWithApplePayload {
  apiAccessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of SignInWithApple
"""
input SignInWithAppleInput {
  firstName: String

  lastName: String

  authCode: String!

  iosAppId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateProjectDepositAccount
"""
type CreateProjectDepositAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of CreateProjectDepositAccount
"""
input CreateProjectDepositAccountInput {
  projectId: ID!

  accountBusinessType: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitVatNumber
"""
type SubmitVatNumberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of SubmitVatNumber
"""
input SubmitVatNumberInput {
  projectId: ID!

  vatNumber: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateSetupIntent
"""
type CreateSetupIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  clientSecret: String!
}

"""
Autogenerated input type of CreateSetupIntent
"""
input CreateSetupIntentInput {
  """
  Context in which this stripe intent is created
  """
  setupIntentContext: StripeIntentContextTypes

  projectId: ID

  """
  If sepa should be added to the payment method types
  """
  sepaEligible: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Different contexts for which stripe intents can be created
"""
enum StripeIntentContextTypes {
  CROWDFUNDING_CHECKOUT

  POST_CAMPAIGN_CHECKOUT

  PROJECT_BUILD

  PROFILE_SETTINGS
}

"""
Autogenerated return type of CreatePaymentIntent
"""
type CreatePaymentIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  the stripe payment intent client secret used to complete a payment
  """
  clientSecret: String!
}

"""
Autogenerated input type of CreatePaymentIntent
"""
input CreatePaymentIntentInput {
  """
  kickstarter project id
  """
  projectId: ID!

  """
  total amount to be paid (eg. 10.55)
  """
  amount: String!

  """
  Context in which this stripe intent is created
  """
  paymentIntentContext: StripeIntentContextTypes

  """
  if the payment is attributed to digital marketing (default: false)
  """
  digitalMarketingAttributed: Boolean

  """
  Current backing id for tracking purposes
  """
  backingId: ID

  """
  Current checkout id for tracking purposes
  """
  checkoutId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreatePaymentSource
"""
type CreatePaymentSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errorMessage: String @deprecated(reason: "inconsistent use of GraphQL errors")

  isSuccessful: Boolean!

  paymentSource: CreditCard
}

"""
Autogenerated input type of CreatePaymentSource
"""
input CreatePaymentSourceInput {
  paymentType: PaymentTypes

  stripeToken: String

  stripeCardId: String

  reusable: Boolean

  intentClientSecret: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Payment types
"""
enum PaymentTypes {
  CREDIT_CARD
}

"""
Autogenerated return type of CreateProjectPaymentSource
"""
type CreateProjectPaymentSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  paymentSource: CreditCard
}

"""
Autogenerated input type of CreateProjectPaymentSource
"""
input CreateProjectPaymentSourceInput {
  id: ID!

  paymentType: CreditCardPaymentType!

  token: String!

  reusable: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateProjectPaymentSource
"""
type UpdateProjectPaymentSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  paymentSource: CreditCard
}

"""
Autogenerated input type of UpdateProjectPaymentSource
"""
input UpdateProjectPaymentSourceInput {
  id: ID!

  paymentSourceId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of PaymentSourceDelete
"""
type PaymentSourceDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of PaymentSourceDelete
"""
input PaymentSourceDeleteInput {
  paymentSourceId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitRefundCheckout
"""
type SubmitRefundCheckoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  redirectUrl: String!

  refundCheckout: RefundCheckout!
}

"""
Autogenerated input type of SubmitRefundCheckout
"""
input SubmitRefundCheckoutInput {
  paymentSourceId: String!

  refundCheckoutId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateReward
"""
type CreateRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of CreateReward
"""
input CreateRewardInput {
  projectId: ID!

  name: String!

  description: String

  estimatedDeliveryOn: Date!

  amount: Int!

  latePledgeAmount: Int

  limit: Int

  image: S3AssetInput

  altText: String

  limitPerBacker: Int

  rewardType: RewardType

  items: [RewardItemInput]

  shippingPreference: ShippingPreference

  shippingRates: [ShippingRateInput]

  shippingRules: [ShippingRuleInput]

  startsAt: Int

  endsAt: Int

  localReceiptLocationId: ID

  startCondition: Int

  endCondition: Int

  audienceData: AudienceInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
S3 information for an asset.
"""
input S3AssetInput {
  id: ID

  s3Key: String!

  fileName: String!

  contentType: String!

  updatedAt: Int!

  fileSize: Int!
}

"""
Item for a reward
"""
input RewardItemInput {
  id: ID

  position: Int!

  quantity: Int!
}

"""
Shipping rule for a reward
"""
input ShippingRateInput {
  id: ID

  cost: Int

  locationId: String!
}

"""
Shipping rule for a reward
"""
input ShippingRuleInput {
  id: ID

  cost: Int!

  locationId: String!

  estimatedMin: Int

  estimatedMax: Int
}

"""
Input related to setting the resource audience
"""
input AudienceInput {
  audience: AudienceEnum!

  token: String
}

"""
Autogenerated return type of DeleteReward
"""
type DeleteRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DeleteReward
"""
input DeleteRewardInput {
  """
  The reward ID
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of FeatureReward
"""
type FeatureRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of FeatureReward
"""
input FeatureRewardInput {
  id: ID!

  featured: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateReward
"""
type UpdateRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of UpdateReward
"""
input UpdateRewardInput {
  id: ID!

  name: String

  description: String

  estimatedDeliveryOn: Date

  amount: Int

  latePledgeAmount: Int

  image: S3AssetInput

  altText: String

  deleteAsset: Boolean

  limit: Int

  limitPerBacker: Int

  rewardType: RewardType

  items: [RewardItemInput]

  shippingPreference: ShippingPreference

  shippingRules: [ShippingRuleInput]

  startsAt: Int

  endsAt: Int

  localReceiptLocationId: ID

  startCondition: Int

  endCondition: Int

  audienceData: AudienceInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CopyRewardItems
"""
type CopyRewardItemsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  items: [RewardItem!]!

  reward: Reward!
}

"""
Autogenerated input type of CopyRewardItems
"""
input CopyRewardItemsInput {
  rewardId: ID!

  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of EndLatePledges
"""
type EndLatePledgesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of EndLatePledges
"""
input EndLatePledgesInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateFlagging
"""
type CreateFlaggingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  flagging: Flagging
}

"""
Autogenerated input type of CreateFlagging
"""
input CreateFlaggingInput {
  contentId: ID!

  kind: NonDeprecatedFlaggingKind!

  details: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
The bucket for a flagging (general reason). Does not included deprecated kinds.
"""
enum NonDeprecatedFlaggingKind {
  """
  prohibited-items
  """
  PROHIBITED_ITEMS

  """
  charity
  """
  CHARITY

  """
  resale
  """
  RESALE

  """
  false-claims
  """
  FALSE_CLAIMS

  """
  misrep-support
  """
  MISREP_SUPPORT

  """
  not-project
  """
  NOT_PROJECT

  """
  guidelines-violation
  """
  GUIDELINES_VIOLATION

  """
  post-funding-issues
  """
  POST_FUNDING_ISSUES

  """
  spam
  """
  SPAM

  """
  vices-drugs
  """
  VICES_DRUGS

  """
  vices-alcohol
  """
  VICES_ALCOHOL

  """
  vices-weapons
  """
  VICES_WEAPONS

  """
  health-claims
  """
  HEALTH_CLAIMS

  """
  health-regulations
  """
  HEALTH_REGULATIONS

  """
  health-gmos
  """
  HEALTH_GMOS

  """
  health-live-animals
  """
  HEALTH_LIVE_ANIMALS

  """
  health-energy-food-and-drink
  """
  HEALTH_ENERGY_FOOD_AND_DRINK

  """
  financial-contests-coupons
  """
  FINANCIAL_CONTESTS_COUPONS

  """
  financial-services
  """
  FINANCIAL_SERVICES

  """
  financial-political-donations
  """
  FINANCIAL_POLITICAL_DONATIONS

  """
  offensive-content-hate
  """
  OFFENSIVE_CONTENT_HATE

  """
  offensive-content-porn
  """
  OFFENSIVE_CONTENT_PORN

  """
  reselling
  """
  RESELLING

  """
  plagiarism
  """
  PLAGIARISM

  """
  prototype-misrepresentation
  """
  PROTOTYPE_MISREPRESENTATION

  """
  undisclosed-ai-use
  """
  UNDISCLOSED_AI_USE

  """
  misrep-support-impersonation
  """
  MISREP_SUPPORT_IMPERSONATION

  """
  misrep-support-outstanding-fulfillment
  """
  MISREP_SUPPORT_OUTSTANDING_FULFILLMENT

  """
  misrep-support-suspicious-pledging
  """
  MISREP_SUPPORT_SUSPICIOUS_PLEDGING

  """
  misrep-support-other
  """
  MISREP_SUPPORT_OTHER

  """
  not-project-charity
  """
  NOT_PROJECT_CHARITY

  """
  not-project-stunt-or-hoax
  """
  NOT_PROJECT_STUNT_OR_HOAX

  """
  not-project-personal-expenses
  """
  NOT_PROJECT_PERSONAL_EXPENSES

  """
  not-project-barebones
  """
  NOT_PROJECT_BAREBONES

  """
  not-project-other
  """
  NOT_PROJECT_OTHER

  """
  guidelines-spam
  """
  GUIDELINES_SPAM

  """
  guidelines-abuse
  """
  GUIDELINES_ABUSE

  """
  post-funding-reward-not-as-described
  """
  POST_FUNDING_REWARD_NOT_AS_DESCRIBED

  """
  post-funding-reward-delayed
  """
  POST_FUNDING_REWARD_DELAYED

  """
  post-funding-shipped-never-received
  """
  POST_FUNDING_SHIPPED_NEVER_RECEIVED

  """
  post-funding-creator-selling-elsewhere
  """
  POST_FUNDING_CREATOR_SELLING_ELSEWHERE

  """
  post-funding-creator-uncommunicative
  """
  POST_FUNDING_CREATOR_UNCOMMUNICATIVE

  """
  post-funding-creator-inappropriate
  """
  POST_FUNDING_CREATOR_INAPPROPRIATE

  """
  post-funding-suspicious-third-party
  """
  POST_FUNDING_SUSPICIOUS_THIRD_PARTY

  """
  comment-abuse
  """
  COMMENT_ABUSE

  """
  comment-doxxing
  """
  COMMENT_DOXXING

  """
  comment-offtopic
  """
  COMMENT_OFFTOPIC

  """
  comment-spam
  """
  COMMENT_SPAM

  """
  backing-abuse
  """
  BACKING_ABUSE

  """
  backing-doxxing
  """
  BACKING_DOXXING

  """
  backing-fraud
  """
  BACKING_FRAUD

  """
  backing-spam
  """
  BACKING_SPAM
}

"""
Autogenerated return type of CreateRewardItem
"""
type CreateRewardItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  item: RewardItem
}

"""
Autogenerated input type of CreateRewardItem
"""
input CreateRewardItemInput {
  projectId: ID!

  name: String!

  deliveryType: String!

  image: S3AssetInput

  altText: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteRewardItem
"""
type DeleteRewardItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DeleteRewardItem
"""
input DeleteRewardItemInput {
  """
  The reward item ID
  """
  id: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateRewardItem
"""
type UpdateRewardItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  item: RewardItem
}

"""
Autogenerated input type of UpdateRewardItem
"""
input UpdateRewardItemInput {
  id: ID!

  name: String

  deliveryType: String

  image: S3AssetInput

  altText: String

  deleteAsset: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateEditorialLayoutType
"""
type CreateEditorialLayoutTypePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  layout: Layout
}

"""
An Editorial Layout
"""
type Layout {
  """
  When this editorial layout was created
  """
  createdAt: DateTime!

  """
  The description of the editorial layout
  """
  description: String

  id: ID!

  """
  All the modules for an editorial layout
  """
  modules("Returns the first _n_ elements from the list." first: Int, "Returns the elements in the list that come after the specified cursor." after: String, "Returns the last _n_ elements from the list." last: Int, "Returns the elements in the list that come before the specified cursor." before: String): EditorialConnection!

  """
  Is the editorial layout published?
  """
  published: Boolean!

  """
  The revision of the editorial layout
  """
  revision: String!

  """
  The sequence number of the currently published revision of the editorial
  """
  sequence: Int

  """
  The slug for the url of the editorial layout oage
  """
  slug: String!

  """
  The title of the editorial layout
  """
  title: String
}

"""
Autogenerated input type of CreateEditorialLayoutType
"""
input CreateEditorialLayoutTypeInput {
  """
  Slug for the Editorial Layout url
  """
  slug: String!

  """
  Title for the Editorial Layout
  """
  title: String!

  """
  Short description for the Editorial Layout
  """
  description: String

  """
  All the Editorial Modules for this layout
  """
  modules: [EditorialModuleInput]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Editorial Module.
"""
input EditorialModuleInput {
  """
  Module type
  """
  type: EditorialModuleType!

  """
  Module GraphQL id
  """
  id: ID

  """
  Order of the Module
  """
  sequence: Int

  """
  Module data
  """
  data: JSON!
}

"""
Different types of Editorial modules.
"""
enum EditorialModuleType {
  """
  ProjectCollection
  """
  ProjectCollection

  """
  NewsletterSignUp
  """
  NewsletterSignUp

  """
  PromoCollection
  """
  PromoCollection

  """
  NewsCollection
  """
  NewsCollection

  """
  FeaturedProjectCollection
  """
  FeaturedProjectCollection

  """
  SingleProjectContainer
  """
  SingleProjectContainer

  """
  BespokeComponent
  """
  BespokeComponent

  """
  Header
  """
  Header

  """
  MastheadImage
  """
  MastheadImage

  """
  ExploreSubcategories
  """
  ExploreSubcategories

  """
  Article
  """
  Article

  """
  ShortText
  """
  ShortText

  """
  EditorialRichText
  """
  EditorialRichText

  """
  SurveyEmbed
  """
  SurveyEmbed
}

"""
Autogenerated return type of PublishEditorialLayoutType
"""
type PublishEditorialLayoutTypePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  layout: Layout
}

"""
Autogenerated input type of PublishEditorialLayoutType
"""
input PublishEditorialLayoutTypeInput {
  """
  Slug for the Editorial Layout
  """
  slug: String!

  """
  Revision for the Editorial Layout
  """
  revision: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnpublishEditorialLayoutType
"""
type UnpublishEditorialLayoutTypePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  layout: Layout
}

"""
Autogenerated input type of UnpublishEditorialLayoutType
"""
input UnpublishEditorialLayoutTypeInput {
  """
  Slug for the Editorial Layout
  """
  slug: String!

  """
  Revision for the Editorial Layout
  """
  revision: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of TranslateEditorialLayoutType
"""
type TranslateEditorialLayoutTypePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  layout: Layout
}

"""
Autogenerated input type of TranslateEditorialLayoutType
"""
input TranslateEditorialLayoutTypeInput {
  """
  Slug for the Editorial Layout
  """
  slug: String!

  """
  Revision for the Editorial Layout
  """
  revision: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UserSendEmailVerification
"""
type UserSendEmailVerificationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of UserSendEmailVerification
"""
input UserSendEmailVerificationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ApplyPaymentSourceToCheckout
"""
type ApplyPaymentSourceToCheckoutPayload {
  checkout: Checkout!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ApplyPaymentSourceToCheckout
"""
input ApplyPaymentSourceToCheckoutInput {
  checkoutId: String!

  paymentSourceId: String!

  incremental: Boolean

  intentClientSecret: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCheckout
"""
type CreateCheckoutPayload {
  checkout: Checkout

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckout
"""
input CreateCheckoutInput {
  projectId: ID!

  amount: String

  locationId: String

  rewardIds: [ID!]

  refParam: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CompleteOnSessionCheckout
"""
type CompleteOnSessionCheckoutPayload {
  checkout: Checkout

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CompleteOnSessionCheckout
"""
input CompleteOnSessionCheckoutInput {
  """
  The graphql relay id of the checkout (base64 encoded)
  """
  checkoutId: ID!

  """
  the client_secret returned by createPaymentIntent, starts with `pi_` (the same secret passed to stripe)
  """
  paymentIntentClientSecret: String!

  """
  Kickstarter internal payment source id. Expects a number (not the stripe id starting with `pm_`). Pass in when using a saved card (optional)
  """
  paymentSourceId: String

  """
  If the payment source can be reused for future payments (optional)
  """
  paymentSourceReusable: Boolean

  """
  Apple pay attributes for creating a payment source (optional)
  """
  applePay: ApplePayInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Necessary fields for Apple Pay
"""
input ApplePayInput {
  """
  Stripe token
  """
  token: String!

  paymentInstrumentName: String!

  paymentNetwork: String!

  transactionIdentifier: String!
}

"""
Autogenerated return type of CreateBacking
"""
type CreateBackingPayload {
  checkout: Checkout

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateBacking
"""
input CreateBackingInput {
  projectId: ID!

  """
  Optional, will default to combined reward minimums + shipping
  """
  amount: String

  locationId: String

  """
  Relay encoded Reward ID - legacy - mutually exclusive with reward_ids
  """
  rewardId: ID

  """
  List of Relay encoded Reward/Add-on IDs - mutually exclusive with reward_id
  """
  rewardIds: [ID!]

  paymentType: String

  refParam: String

  paymentSourceId: String

  setupIntentClientSecret: String

  applePay: ApplePayInput

  incremental: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateBacking
"""
type UpdateBackingPayload {
  checkout: Checkout

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateBacking
"""
input UpdateBackingInput {
  id: ID!

  amount: String

  """
  Relay encoded Reward ID - legacy
  """
  rewardId: ID

  """
  List of Relay encoded Reward/Add-on IDs
  """
  rewardIds: [ID!]

  locationId: String

  """
  new payment source id
  """
  paymentSourceId: String

  """
  Stripe SetupIntent client secret
  """
  intentClientSecret: String

  applePay: ApplePayInput

  incremental: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateBackingPaymentSource
"""
type UpdateBackingPaymentSourcePayload {
  backing: Backing

  checkout: Checkout

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateBackingPaymentSource
"""
input UpdateBackingPaymentSourceInput {
  """
  ID of the backing being updated
  """
  id: ID!

  """
  new payment source id
  """
  paymentSourceId: String

  applePay: ApplePayInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateBackerCompleted
"""
type UpdateBackerCompletedPayload {
  backing: Backing

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateBackerCompleted
"""
input UpdateBackerCompletedInput {
  id: ID!

  backerCompleted: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetBackingNote
"""
type SetBackingNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  noteBody: String
}

"""
Autogenerated input type of SetBackingNote
"""
input SetBackingNoteInput {
  backingId: ID!

  noteBody: String

  noteType: BackingNoteType!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

enum BackingNoteType {
  CreatorBackingNote

  BackerBackingNote
}

"""
Autogenerated return type of CreateApplePayBacking
"""
type CreateApplePayBackingPayload {
  checkout: Checkout

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateApplePayBacking
"""
input CreateApplePayBackingInput {
  projectId: ID!

  amount: String

  locationId: String

  rewardId: ID

  token: String!

  paymentInstrumentName: String!

  paymentNetwork: String!

  transactionIdentifier: String!

  refParam: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of LikeQuizProject
"""
type LikeQuizProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  success: Boolean
}

"""
Autogenerated input type of LikeQuizProject
"""
input LikeQuizProjectInput {
  """
  A list of selected likeable attribute ids associated to the quiz project
  """
  selectedLikeableAttributeIds: [ID!]!

  """
  The id of the quiz project that the user has liked
  """
  quizProjectId: ID!

  """
  Whether or not the user has indicated that they like something else about the project other than the attributes presented
  """
  likedSomethingElse: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of LikeProject
"""
type LikeProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project

  user: User
}

"""
Autogenerated input type of LikeProject
"""
input LikeProjectInput {
  """
  The id of the project that the user has liked
  """
  id: ID!

  """
  The context or page that the user liked this project from. Used for tracking
  """
  trackingContext: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnlikeProject
"""
type UnlikeProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project

  user: User
}

"""
Autogenerated input type of UnlikeProject
"""
input UnlikeProjectInput {
  """
  The id of the project that the user has unliked
  """
  id: ID!

  """
  The context or page that the user unliked this project from. Used for tracking
  """
  trackingContext: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DislikeProject
"""
type DislikeProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project

  user: User
}

"""
Autogenerated input type of DislikeProject
"""
input DislikeProjectInput {
  """
  The id of the project that the user has disliked
  """
  id: ID!

  """
  The context or page that the user disliked this project from. Used for tracking
  """
  trackingContext: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UndislikeProject
"""
type UndislikeProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project

  user: User
}

"""
Autogenerated input type of UndislikeProject
"""
input UndislikeProjectInput {
  """
  The id of the project that the user has un-disliked
  """
  id: ID!

  """
  The context or page that the user undisliked this project from. Used for tracking
  """
  trackingContext: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateProjectUpdateRequest
"""
type CreateProjectUpdateRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of CreateProjectUpdateRequest
"""
input CreateProjectUpdateRequestInput {
  projectId: ID!

  location: ProjectUpdateRequestLocation!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

enum ProjectUpdateRequestLocation {
  """
  Project Update Request from the prompt at the top of Project Updates
  """
  updates

  """
  Project Update Request from the Backer Bar flow
  """
  backer_bar

  """
  Project Update Request from the inline prompt on a comment
  """
  comment
}

"""
Autogenerated return type of TriggerThirdPartyEvent
"""
type TriggerThirdPartyEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  message: String

  success: Boolean!
}

"""
Autogenerated input type of TriggerThirdPartyEvent
"""
input TriggerThirdPartyEventInput {
  deviceId: String!

  eventName: String!

  firebaseScreen: String = null

  firebasePreviousScreen: String = null

  items: [ThirdPartyEventItemInput!] = []

  projectId: ID!

  pledgeAmount: Float = null

  shipping: Float = null

  transactionId: String = null

  userId: String = null

  appData: AppDataInput = {

  }


  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

input ThirdPartyEventItemInput {
  """
  The ID of the item.
  """
  itemId: String!

  """
  The name of the item.
  """
  itemName: String!

  """
  The monetary price of the item, in units of the specified currency parameter.
  """
  price: Float = null
}

"""
Parameters for sharing app data and device information with the Conversions API
"""
input AppDataInput {
  """
  Use this field to specify ATT permission on an iOS 14.5+ device.
  """
  advertiserTrackingEnabled: Boolean!

  """
  A person can choose to enable ad tracking on an app level. Your SDK should allow an app developer to put an opt-out setting into their app. Use this field to specify the person's choice.
  """
  applicationTrackingEnabled: Boolean!

  """
  Extended device information, such as screen width and height. Required only for native.
  """
  extinfo: [String!]!
}

"""
Autogenerated return type of CreateTrackEvent
"""
type CreateTrackEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  successful: Boolean!
}

"""
Autogenerated input type of CreateTrackEvent
"""
input CreateTrackEventInput {
  eventName: String!

  eventProperties: JSON

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateConsent
"""
type UpdateConsentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  user: User
}

"""
Autogenerated input type of UpdateConsent
"""
input UpdateConsentInput {
  consentJson: String!

  userIdentifier: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateAttributionEvent
"""
type CreateAttributionEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  successful: Boolean!
}

"""
Autogenerated input type of CreateAttributionEvent
"""
input CreateAttributionEventInput {
  eventName: String!

  eventProperties: JSON

  projectId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of OptOutOfPledgeManager
"""
type OptOutOfPledgeManagerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  pledgeManager: PledgeManager!
}

"""
Autogenerated input type of OptOutOfPledgeManager
"""
input OptOutOfPledgeManagerInput {
  """
  The pledge manager id
  """
  pledgeManagerId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of OptInToPledgeManager
"""
type OptInToPledgeManagerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Success if opted in to pledge manager
  """
  success: Boolean!
}

"""
Autogenerated input type of OptInToPledgeManager
"""
input OptInToPledgeManagerInput {
  """
  The project id
  """
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitPledgeManager
"""
type SubmitPledgeManagerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of SubmitPledgeManager
"""
input SubmitPledgeManagerInput {
  """
  The pledge manager id
  """
  pledgeManagerId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ReviewPledgeManager
"""
type ReviewPledgeManagerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of ReviewPledgeManager
"""
input ReviewPledgeManagerInput {
  pledgeManagerId: ID!

  approved: Boolean!

  reviewNote: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RevertPledgeManagerToDraft
"""
type RevertPledgeManagerToDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of RevertPledgeManagerToDraft
"""
input RevertPledgeManagerToDraftInput {
  """
  The pledge manager id
  """
  pledgeManagerId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AssignPledgeManager
"""
type AssignPledgeManagerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of AssignPledgeManager
"""
input AssignPledgeManagerInput {
  pledgeManagerId: ID!

  """
  (optional) assigns a user to a pledge manager to review
  """
  userId: ID = null

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ToggleTariffSurchargesEnabled
"""
type ToggleTariffSurchargesEnabledPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of ToggleTariffSurchargesEnabled
"""
input ToggleTariffSurchargesEnabledInput {
  """
  The pledge manager id
  """
  pledgeManagerId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CompleteOrder
"""
type CompleteOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The stripe payment intent client secret used to complete a payment
  """
  clientSecret: String!

  """
  The stripe payment intent status (if requires_action, it will be)
  """
  status: OnSessionPaymentIntentStatus!
}

enum OnSessionPaymentIntentStatus {
  """
  If the setup requires additional actions, such as authenticating with 3D Secure
  """
  REQUIRES_ACTION

  """
  Setup of payment source was successful.
  """
  SUCCEEDED
}

"""
Autogenerated input type of CompleteOrder
"""
input CompleteOrderInput {
  """
  The order id
  """
  orderId: ID!

  """
  The stripe confirmation token used to complete a payment (web only)
  """
  stripeConfirmationTokenId: String

  """
  The stripe payment method id, starting with either `card_` or `pm_` (mobile only)
  """
  stripePaymentMethodId: String

  """
  Kickstarter internal payment source id. Expects a number (not the stripe id starting with `pm_`). Pass in when using a saved card (optional)
  """
  paymentSourceId: String

  """
  If the new payment source can be reused for future payments (optional)
  """
  paymentSourceReusable: Boolean

  """
  List of accepted stripe payment method types
  """
  paymentMethodTypes: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CompleteZeroDollarOrder
"""
type CompleteZeroDollarOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the state transition succeeded
  """
  success: Boolean!
}

"""
Autogenerated input type of CompleteZeroDollarOrder
"""
input CompleteZeroDollarOrderInput {
  """
  The order id
  """
  orderId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SucceedOrder
"""
type SucceedOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Whether the state transition succeeded
  """
  success: Boolean!
}

"""
Autogenerated input type of SucceedOrder
"""
input SucceedOrderInput {
  """
  The order id
  """
  orderId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ConfirmOrderAddress
"""
type ConfirmOrderAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  order: Order!
}

"""
Autogenerated input type of ConfirmOrderAddress
"""
input ConfirmOrderAddressInput {
  """
  The order id
  """
  orderId: ID!

  """
  The address id
  """
  addressId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreatePledgeManagementReward
"""
type CreatePledgeManagementRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of CreatePledgeManagementReward
"""
input CreatePledgeManagementRewardInput {
  projectId: ID!

  enabled: Boolean

  name: String!

  amount: Int!

  shippingPreference: ShippingPreference!

  description: String

  limit: Int

  limitPerOrder: Int

  image: S3AssetInput

  altText: String

  rewardType: RewardType

  items: [RewardItemInput]

  shippingRules: [ShippingRuleInput]

  localReceiptLocationId: ID

  audienceData: AudienceInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdatePledgeManagementReward
"""
type UpdatePledgeManagementRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of UpdatePledgeManagementReward
"""
input UpdatePledgeManagementRewardInput {
  id: ID!

  enabled: Boolean

  name: String!

  amount: Int!

  shippingPreference: ShippingPreference!

  description: String

  limit: Int

  limitPerOrder: Int

  image: S3AssetInput

  altText: String

  deleteAsset: Boolean

  items: [RewardItemInput]

  shippingRules: [ShippingRuleInput]

  localReceiptLocationId: ID

  audienceData: AudienceInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateWave
"""
type CreateWavePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of CreateWave
"""
input CreateWaveInput {
  """
  The project id
  """
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CloseWave
"""
type CloseWavePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of CloseWave
"""
input CloseWaveInput {
  """
  The checkout wave id
  """
  checkoutWaveId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetTaxCategory
"""
type SetTaxCategoryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item tax config
  """
  itemTaxConfig: ItemTaxConfig!
}

"""
Autogenerated input type of SetTaxCategory
"""
input SetTaxCategoryInput {
  """
  The item id
  """
  itemId: ID!

  """
  The tax category id
  """
  taxCategoryId: ID

  """
  Input for creating or updating a tax category
  """
  taxCategoryInput: TaxCategoryInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Input to create or update a tax category
"""
input TaxCategoryInput {
  userLabel: String!

  taxCode: String!
}

"""
Autogenerated return type of CreateOrUpdateItemTaxConfig
"""
type CreateOrUpdateItemTaxConfigPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item for the ID that was passed in
  """
  item: RewardItem!
}

"""
Autogenerated input type of CreateOrUpdateItemTaxConfig
"""
input CreateOrUpdateItemTaxConfigInput {
  """
  The item id
  """
  itemId: ID!

  """
  If the item is taxable
  """
  itemIsTaxExempt: Boolean

  """
  The market value of the item
  """
  marketValue: Int

  """
  The surcharge cost for the item
  """
  surchargeCost: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateRewardShippingRates
"""
type UpdateRewardShippingRatesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated BackerReward
  """
  reward: Reward!
}

"""
Autogenerated input type of UpdateRewardShippingRates
"""
input UpdateRewardShippingRatesInput {
  """
  Kickstarter BackerReward (base or addon) id
  """
  rewardId: ID!

  shippingRates: [ShippingRateInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateOrderableConfig
"""
type UpdateOrderableConfigPayload {
  """
  The updated BackerReward
  """
  addOn: Reward!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project associated with the reward
  """
  project: Project!
}

"""
Autogenerated input type of UpdateOrderableConfig
"""
input UpdateOrderableConfigInput {
  """
  Kickstarter BackerReward id (for now)
  """
  orderableId: ID!

  """
  Available for cross-sells or not
  """
  enabled: Boolean!

  """
  Price for cross-sells
  """
  crossSellPrice: Int

  """
  How many are cross-sellable total
  """
  limit: Int

  """
  How many a backer can add to their order
  """
  limitPerOrder: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateCrossSellsOnOrder
"""
type UpdateCrossSellsOnOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Order that has been updated
  """
  order: Order!
}

"""
Autogenerated input type of UpdateCrossSellsOnOrder
"""
input UpdateCrossSellsOnOrderInput {
  """
  Order ID that the Cross Sells are being added onto
  """
  orderId: ID!

  crossSells: [SelectedCrossSellInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Cross Sell selection to add to an Order
"""
input SelectedCrossSellInput {
  id: ID!

  quantity: Int!
}

"""
Autogenerated return type of UpgradeRewardOnOrder
"""
type UpgradeRewardOnOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The order that has been updated
  """
  order: Order!
}

"""
Autogenerated input type of UpgradeRewardOnOrder
"""
input UpgradeRewardOnOrderInput {
  """
  ID of the order that the upgrade is being applied to
  """
  orderId: ID!

  """
  ID of the reward to upgrade to
  """
  rewardUpgradeId: ID

  """
  ID of the location the backer selected
  """
  locationId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AcknowledgeUpgrades
"""
type AcknowledgeUpgradesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The order that has been updated
  """
  order: Order!
}

"""
Autogenerated input type of AcknowledgeUpgrades
"""
input AcknowledgeUpgradesInput {
  """
  ID of the order to acknowledge upgrades on
  """
  orderId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteStockLocation
"""
type DeleteStockLocationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project associated with the stock location
  """
  project: Project!
}

"""
Autogenerated input type of DeleteStockLocation
"""
input DeleteStockLocationInput {
  stockLocationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of BulkEditStockLocationMappings
"""
type BulkEditStockLocationMappingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated stock location
  """
  stockLocation: StockLocation!
}

"""
Autogenerated input type of BulkEditStockLocationMappings
"""
input BulkEditStockLocationMappingsInput {
  stockLocationId: ID!

  locationIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateOrUpdateVatConfig
"""
type CreateOrUpdateVatConfigPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project associated with the VAT Config
  """
  project: Project!
}

"""
Autogenerated input type of CreateOrUpdateVatConfig
"""
input CreateOrUpdateVatConfigInput {
  """
  The project id
  """
  projectId: ID!

  locationVatNumbers: [LocationVatNumberInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Input to create or update a VAT number for a location.
"""
input LocationVatNumberInput {
  locationId: ID!

  vatNumber: String

  optOut: Boolean!
}

"""
Autogenerated return type of SetShippingConfig
"""
type SetShippingConfigPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Updated project
  """
  project: Project!
}

"""
Autogenerated input type of SetShippingConfig
"""
input SetShippingConfigInput {
  projectId: ID!

  shippingType: ShippingTypeEnum!

  shippingUnit: ShippingUnitEnum

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateOrUpdateShippingZone
"""
type CreateOrUpdateShippingZonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The project with updated shipping zones
  """
  project: Project!
}

"""
Autogenerated input type of CreateOrUpdateShippingZone
"""
input CreateOrUpdateShippingZoneInput {
  """
  The existing shipping zone id, if updating
  """
  shippingZoneId: ID

  """
  The id of the project the shipping zone is under
  """
  projectId: ID!

  """
  IDs of locations included in the shipping zone
  """
  locationIds: [ID!]!

  """
  Weight ranges and cost data for the shipping zone
  """
  weightRanges: [WeightRangeInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Input to create or update weight ranges
"""
input WeightRangeInput {
  min: Float!

  max: Float

  cost: Int!
}

"""
Autogenerated return type of DeleteShippingZone
"""
type DeleteShippingZonePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of DeleteShippingZone
"""
input DeleteShippingZoneInput {
  """
  The id of the to be deleted shipping
  """
  shippingZoneId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateItemWeights
"""
type UpdateItemWeightsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Updated project
  """
  project: Project!
}

"""
Autogenerated input type of UpdateItemWeights
"""
input UpdateItemWeightsInput {
  projectId: ID!

  itemWeightInputs: [ItemWeightInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Input to create or update weight ranges
"""
input ItemWeightInput {
  itemId: ID!

  weight: Float

  exclude: Boolean!
}

"""
Autogenerated return type of CreateOrUpdateTrackingNumber
"""
type CreateOrUpdateTrackingNumberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  shipment: Shipment!
}

"""
Autogenerated input type of CreateOrUpdateTrackingNumber
"""
input CreateOrUpdateTrackingNumberInput {
  shipmentId: ID!

  trackingNumber: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ProcessTrackingNumbers
"""
type ProcessTrackingNumbersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of ProcessTrackingNumbers
"""
input ProcessTrackingNumbersInput {
  projectId: ID!

  s3Key: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ProcessDigitalResourcesCsv
"""
type ProcessDigitalResourcesCsvPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project!
}

"""
Autogenerated input type of ProcessDigitalResourcesCsv
"""
input ProcessDigitalResourcesCsvInput {
  projectId: ID!

  s3Key: String!

  description: String!

  searchQuery: JSON

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateAcceptsNewBackers
"""
type UpdateAcceptsNewBackersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Updated project
  """
  project: Project!
}

"""
Autogenerated input type of UpdateAcceptsNewBackers
"""
input UpdateAcceptsNewBackersInput {
  """
  ID of the project related to the pledge manager
  """
  projectId: ID!

  """
  Whether the pledge manager accepts new backers or not
  """
  acceptsNewBackers: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateOption
"""
type CreateOptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  optionType: OptionType
}

"""
Autogenerated input type of CreateOption
"""
input CreateOptionInput {
  itemId: ID!

  name: String!

  prompt: String

  values: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateOption
"""
type UpdateOptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  optionType: OptionType
}

"""
Autogenerated input type of UpdateOption
"""
input UpdateOptionInput {
  optionTypeId: ID!

  name: String!

  prompt: String

  values: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteOption
"""
type DeleteOptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The item that the deleted option type was associated with
  """
  item: RewardItem!

  """
  Succeeds if option_type is deleted.
  """
  success: Boolean!
}

"""
Autogenerated input type of DeleteOption
"""
input DeleteOptionInput {
  optionTypeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateQuestion
"""
type CreateQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  question: Question
}

"""
Autogenerated input type of CreateQuestion
"""
input CreateQuestionInput {
  questionableId: ID!

  questionableType: QuestionableType!

  type: QuestionType!

  prompt: String!

  choices: [String!]

  choiceSelectionLimit: Int

  optional: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Types that can be associated with a Question
"""
enum QuestionableType {
  Project

  RewardItem

  Reward
}

"""
Autogenerated return type of UpdateQuestion
"""
type UpdateQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  question: Question
}

"""
Autogenerated input type of UpdateQuestion
"""
input UpdateQuestionInput {
  questionId: ID!

  type: QuestionType!

  prompt: String!

  choices: [String!]

  choiceSelectionLimit: Int

  optional: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteQuestion
"""
type DeleteQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Succeeds if question is deleted.
  """
  success: Boolean!
}

"""
Autogenerated input type of DeleteQuestion
"""
input DeleteQuestionInput {
  questionId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of BulkEditQuestions
"""
type BulkEditQuestionsPayload {
  """
  The updated backer survey.
  """
  backerSurvey: BackerSurvey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of BulkEditQuestions
"""
input BulkEditQuestionsInput {
  projectId: ID!

  questions: [QuestionInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Question associated with a particular questionable.
"""
input QuestionInput {
  type: QuestionType!

  prompt: String!

  questionableId: String!

  questionableType: QuestionableType!

  choices: [String!]

  choiceSelectionLimit: Int

  optional: Boolean!
}

"""
Autogenerated return type of UpdateItemVariants
"""
type UpdateItemVariantsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated item variants
  """
  itemVariants: [ItemVariant!]
}

"""
Autogenerated input type of UpdateItemVariants
"""
input UpdateItemVariantsInput {
  itemVariants: [ItemVariantInput!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Input for updating an Item Variant
"""
input ItemVariantInput {
  id: Int!

  name: String!
}

"""
Autogenerated return type of DeleteBackerSurvey
"""
type DeleteBackerSurveyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Succeeds if backer survey is deleted.
  """
  success: Boolean!
}

"""
Autogenerated input type of DeleteBackerSurvey
"""
input DeleteBackerSurveyInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ResetBackerSurvey
"""
type ResetBackerSurveyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Succeeds if backer survey responses are reset.
  """
  success: Boolean!
}

"""
Autogenerated input type of ResetBackerSurvey
"""
input ResetBackerSurveyInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitResponses
"""
type SubmitResponsesPayload {
  """
  The finalized cart, if submission is successful.
  """
  cart: Cart

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The delivery address attached to backing.
  """
  deliveryAddress: Address

  """
  Succeeds if cart is finalized.
  """
  success: Boolean!
}

"""
Autogenerated input type of SubmitResponses
"""
input SubmitResponsesInput {
  cartId: ID!

  addressId: ID

  lineItemUpdates: [LineItemInput!]!

  backerQuestionAnswers: [AnswerInput!]!

  finalizeOnSubmit: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Line item belonging to a cart
"""
input LineItemInput {
  id: ID!

  optionValueIds: [ID!]

  answers: [AnswerInput]
}

"""
Answer associated with a particular question and answerable.
"""
input AnswerInput {
  questionId: ID!

  response: [String!]

  answerableId: ID
}

"""
Autogenerated return type of CreateBackerSurvey
"""
type CreateBackerSurveyPayload {
  """
  The backer survey if creation was successful.
  """
  backerSurvey: BackerSurvey

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateBackerSurvey
"""
input CreateBackerSurveyInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SetAddressCollectionEnabled
"""
type SetAddressCollectionEnabledPayload {
  """
  Whether or not the creator has enabled address collection for this project.
  """
  addressCollectionEnabled: Boolean!

  """
  Whether or not addresses should be collected for digital reward backers.
  """
  addressCollectionForDigitalReward: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of SetAddressCollectionEnabled
"""
input SetAddressCollectionEnabledInput {
  projectId: ID!

  addressCollectionEnabled: Boolean!

  addressCollectionForDigitalReward: Boolean!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of LockAddresses
"""
type LockAddressesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Returns the updated project if successful.
  """
  project: Project!
}

"""
Autogenerated input type of LockAddresses
"""
input LockAddressesInput {
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SendSurvey
"""
type SendSurveyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated survey.
  """
  survey: BackerSurvey!
}

"""
Autogenerated input type of SendSurvey
"""
input SendSurveyInput {
  surveyId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateBackerSurveyIntro
"""
type UpdateBackerSurveyIntroPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated survey.
  """
  survey: BackerSurvey!
}

"""
Autogenerated input type of UpdateBackerSurveyIntro
"""
input UpdateBackerSurveyIntroInput {
  surveyId: ID!

  intro: HTML

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateResourceAudience
"""
type UpdateResourceAudiencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  resource: SecretResource!
}

"""
Autogenerated input type of UpdateResourceAudience
"""
input UpdateResourceAudienceInput {
  """
  The resource id
  """
  resourceId: ID!

  removeRestrictions: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddUserToSecretRewardGroup
"""
type AddUserToSecretRewardGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project data
  """
  project: Project!
}

"""
Autogenerated input type of AddUserToSecretRewardGroup
"""
input AddUserToSecretRewardGroupInput {
  """
  ID of the project with secret rewards
  """
  projectId: ID!

  """
  Secret reward token shared by the creator
  """
  secretRewardToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of IssueRefund
"""
type IssueRefundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  errors: [String!]!

  refund: Refund!

  """
  The in-memory refund checkout instance
  """
  refundCheckout: RefundCheckout
}

"""
Autogenerated input type of IssueRefund
"""
input IssueRefundInput {
  """
  ID of associated backing
  """
  backingId: ID!

  """
  Reason for adjustment
  """
  reason: RefundReasonType!

  message: String

  """
  Stripe SetupIntent client secret
  """
  intentClientSecret: String

  """
  Stripe Payment Source ID
  """
  creatorPaymentSourceId: ID

  """
  Parameters to refund a pledge. Leave blank to not refund the pledge.
  """
  refundPledgeInput: RefundPledgeInput

  """
  Parameters to refund a order.
  """
  refundOrderInput: RefundOrderInput

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Required parameters in order to refund a pledge.
"""
input RefundPledgeInput {
  amount: Int

  adjustmentParams: AdjustmentInput!
}

"""
Parameters to create adjustment to a backing's order, created when issuing a refund.
"""
input AdjustmentInput {
  """
  Reason for adjustment
  """
  reason: RefundReasonType!

  """
  Objects to be removed from order
  """
  removals: [RemovalInput!]!

  """
  Refunds to be issued
  """
  refunds: [RefundInput!]!
}

"""
An object removed as part of an adjustment
"""
input RemovalInput {
  """
  id of the reward associated with the removal
  """
  rewardId: Int!

  """
  id of object to be removed
  """
  refundItemId: ID!

  """
  type of object to be removed (reward, reward item, or order item)
  """
  type: RefundAdjustmentType!
}

"""
An amount to be refunded as part of an adjustment.
"""
input RefundInput {
  """
  id of object to be refunded
  """
  refundItemId: ID

  """
  type of refund
  """
  type: RefundAdjustmentType!

  """
  amount to be refunded
  """
  amount: Int!
}

"""
Parameters to refund the non-voucher part of an order.
"""
input RefundOrderInput {
  """
  Shipments to be refunded
  """
  shipments: [ShipmentInput!]!

  """
  Cross sells to be refunded / removed
  """
  crossSells: [OrderOrderableInput!]!

  """
  Upgraded reward to be refunded / removed
  """
  upgradedReward: OrderOrderableInput
}

"""
Parameters to refund a shipment.
"""
input ShipmentInput {
  """
  ID of the shipment
  """
  shipmentId: Int!

  """
  Amount to refund
  """
  amount: Int!
}

"""
Parameters to refund an order orderable.
"""
input OrderOrderableInput {
  """
  ID of the order orderable
  """
  orderOrderableId: Int!

  """
  Whether the order orderable was removed
  """
  removed: Boolean!

  """
  Non-voucher amount to refund
  """
  amount: Int!
}

"""
Autogenerated return type of UpdateRefundCheckout
"""
type UpdateRefundCheckoutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  refundCheckout: RefundCheckout!
}

"""
Autogenerated input type of UpdateRefundCheckout
"""
input UpdateRefundCheckoutInput {
  refundCheckoutId: ID!

  state: String!

  stateReason: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateOrderAdjustment
"""
type UpdateOrderAdjustmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  orderAdjustment: RefundAdjustmentData!
}

"""
Autogenerated input type of UpdateOrderAdjustment
"""
input UpdateOrderAdjustmentInput {
  refundId: ID!

  success: Boolean!

  stateReason: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateOrUpdateShop
"""
type CreateOrUpdateShopPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project associated with the Shopify shop
  """
  project: Project!
}

"""
Autogenerated input type of CreateOrUpdateShop
"""
input CreateOrUpdateShopInput {
  """
  The project id
  """
  projectId: ID!

  """
  The Shopify domain
  """
  shopifyDomain: String!

  """
  The Shopify access token
  """
  token: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateVariantMappings
"""
type CreateVariantMappingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  success: Boolean!
}

"""
Autogenerated input type of CreateVariantMappings
"""
input CreateVariantMappingsInput {
  """
  The project id
  """
  projectId: ID!

  """
  Array of variant mappings to have records created for
  """
  mappings: [VariantMappingInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
A kickstarter item variant id and a shopify variant id
"""
input VariantMappingInput {
  itemVariantId: ID!

  shopifyVariantId: String!
}

"""
Autogenerated return type of ToggleSyncingForShop
"""
type ToggleSyncingForShopPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of ToggleSyncingForShop
"""
input ToggleSyncingForShopInput {
  """
  The project id
  """
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteVariantMappings
"""
type DeleteVariantMappingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DeleteVariantMappings
"""
input DeleteVariantMappingsInput {
  """
  The project id
  """
  projectId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateBackerReportSegment
"""
type CreateBackerReportSegmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  data: SavedSearchSegment

  success: Boolean!
}

"""
Autogenerated input type of CreateBackerReportSegment
"""
input CreateBackerReportSegmentInput {
  """
  The name of saved segment
  """
  name: String

  """
  The project ID of the request
  """
  projectId: ID!

  """
  The ID of the segment to update. If null, a new segment will be created
  """
  segmentId: ID

  """
  A set of search parameters to save for reëxecution
  """
  segmentBody: JSON

  """
  If true, the segment will be duplicated
  """
  duplicate: Boolean

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBackerReportSegment
"""
type DeleteBackerReportSegmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Indicates if the deletion was successful
  """
  success: Boolean!
}

"""
Autogenerated input type of DeleteBackerReportSegment
"""
input DeleteBackerReportSegmentInput {
  """
  The ID of the segment to delete
  """
  segmentId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DistributeDigitalAccessResources
"""
type DistributeDigitalAccessResourcesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  project: Project
}

"""
Autogenerated input type of DistributeDigitalAccessResources
"""
input DistributeDigitalAccessResourcesInput {
  projectId: ID!

  resources: String!

  """
  Type of resource distribution: 'unique' or 'shared'
  """
  resourcesType: ResourcesTypeEnum!

  description: String!

  searchQuery: JSON!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

enum ResourcesTypeEnum {
  """
  Each backer gets a unique resource
  """
  UNIQUE

  """
  All backers share the same resource
  """
  SHARED
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  description: String

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  fields(includeDeprecated: Boolean = false): [__Field!]

  inputFields: [__InputValue!]

  interfaces: [__Type!]

  kind: __TypeKind!

  name: String

  ofType: __Type

  possibleTypes: [__Type!]
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  args: [__InputValue!]!

  deprecationReason: String

  description: String

  isDeprecated: Boolean!

  name: String!

  type: __Type!
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  args: [__InputValue!]!

  description: String

  locations: [__DirectiveLocation!]!

  name: String!

  onField: Boolean! @deprecated(reason: "Use `locations`.")

  onFragment: Boolean! @deprecated(reason: "Use `locations`.")

  onOperation: Boolean! @deprecated(reason: "Use `locations`.")
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  deprecationReason: String

  description: String

  isDeprecated: Boolean!

  name: String!
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  description: String

  name: String!

  type: __Type!
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https:\/\/daringfireball.net\/projects\/markdown\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ENUM_VALUE

schema {
  query: Query
  mutation: Mutation
}
