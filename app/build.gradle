buildscript {
    repositories {
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.9'
        classpath 'com.apollographql.apollo3:apollo-gradle-plugin:3.8.5'
        classpath 'com.karumi:shot:5.13.0'
    }
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.apollographql.apollo3'
apply plugin: 'jacoco'
apply from: 'quality.gradle'
apply from: "$project.rootDir/jacoco.gradle"
def apolloVersion = '3.8.5'

def externalPrivateVersion = new File(project.rootDir.path + "/app/external_version_code.txt").text.trim().toInteger()
def externalPublicVersion = new File(project.rootDir.path + "/app/external_version_name.txt").text.trim()
def internalPrivateVersion = new File(project.rootDir.path + "/app/internal_version_code.txt").text.trim().toInteger()
def internalPublicVersion = new File(project.rootDir.path + "/app/internal_version_name.txt").text.trim()
def isCircle = "true" == System.getenv("CIRCLECI")
def isPrivateCIEnv = ("android-private" == System.getenv("CIRCLE_PROJECT_REPONAME"))
def isRelease = ("external" == System.getenv("CIRCLE_BRANCH"))
def compose_version = '1.4.3'

ext.signing = [
        storeFilePath: "path/to/keystore",
        storePassword: "keystore password",
        keyAlias     : "key alias",
        keyPassword  : "key password"
]

if (file('signing.gradle').exists()) {
    apply from: 'signing.gradle'
}



android {
    defaultConfig {
        compileSdk = 35
        applicationId "com.kickstarter"
        minSdkVersion 24
        targetSdk = 35
        testApplicationId "com.kickstarter.internal.debug.test"
        testInstrumentationRunner "com.kickstarter.screenshoot.testing.KSScreenShotTestRunner"

        buildConfigField "String", "GIT_SHA", "\"${commitSha()}\""
        buildConfigField "String", "BUILD_DATE", "\"${buildDate()}\""

        // Enable Multidex to support over 65K methods
        multiDexEnabled true
        resourceConfigurations += ['de', 'es', 'en', 'fr', 'ja']


        def fabricProps = new Properties()
        file("fabric.properties").withInputStream { fabricProps.load(it) }
        manifestPlaceholders = [apiKey: fabricProps.getProperty('apiKey'), performanceLogs: false]
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        debug {
            storeFile file(System.env.HOME + '/.android/debug.keystore')
        }
        release {
            storeFile file(project.signing.storeFilePath)
            storePassword project.signing.storePassword
            keyAlias project.signing.keyAlias
            keyPassword project.signing.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            if (isCircle && isPrivateCIEnv && isRelease) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
            FirebasePerformance {
                // Set this flag to 'false' to disable @AddTrace annotation processing and
                // automatic monitoring of HTTP/S network requests
                // for a specific build variant at compile time.
                instrumentationEnabled false
            }
        }
    }

    flavorDimensions "AUDIENCE"

    productFlavors {
        internal {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter.internal"
            versionCode internalPrivateVersion
            versionName internalPublicVersion
            manifestPlaceholders = [performanceLogs: false]
        }
        external {
            dimension "AUDIENCE"
            applicationId "com.kickstarter.kickstarter"
            versionCode externalPrivateVersion
            versionName externalPublicVersion
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        freeCompilerArgs = ['-Xjvm-default=all']
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    buildFeatures {
        compose true
        viewBinding true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "$compose_version"
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        resources {
            excludes += ['META-INF/LICENSE.txt', 'LICENSE.txt', 'META-INF/AL2.0', 'META-INF/LGPL2.1', 'DebugProbesKt.bin']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs "-Xmx4g"
            }
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if( names.contains("regression")) {
            setIgnore(true)
        }
    }
    lint {
        abortOnError false
        warningsAsErrors true
    }
    namespace 'com.kickstarter'

}

apollo {
    service("service") {
        packageName.set("com.kickstarter") // -> Every generated files/classes by apollo will now live under the directory "com.kickstarter.*"
        mapScalar("Date", "java.util.Date")
        mapScalar("ISO8601DateTime", "org.joda.time.DateTime")
        mapScalar("DateTime", "org.joda.time.DateTime")
    }
}

repositories {
    maven {
        url 'https://maven.google.com'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    // Chrome Tabs library
    implementation 'androidx.browser:browser:1.7.0'

    // Fonts
    implementation 'androidx.compose.ui:ui-text-google-fonts:1.7.7'

    // Architecture components
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    def activity_fragment_version = "1.5.1"
    implementation "androidx.activity:activity-ktx:$activity_fragment_version"
    implementation "androidx.fragment:fragment-ktx:$activity_fragment_version"

    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation("androidx.core:core-splashscreen:1.0.1")

    implementation "com.apollographql.apollo3:apollo-adapters:$apolloVersion"
    implementation "com.apollographql.apollo3:apollo-runtime:$apolloVersion"
    // RxJava2 support
    implementation "com.apollographql.apollo3:apollo-rx2-support:$apolloVersion"

    implementation 'com.facebook.android:facebook-android-sdk:16.0.0'
    implementation("com.google.android.play:review-ktx:2.0.1")
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "com.google.android.exoplayer:exoplayer:2.17.1"
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.google.android.material:material:1.6.1'
    final dagger_version = "2.46"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation 'com.jakewharton:process-phoenix:2.1.2'
    implementation "com.jakewharton.timber:timber:5.0.1"
    implementation 'com.stripe:stripe-android:20.47.3'
    final okhttp_version = '4.10.+'
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"

    final retrofit_version = "2.9.+"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'net.danlew:android.joda:2.10.7'

    // Analytics Segment-Braze
    implementation 'com.segment.analytics.android:analytics:4.11.3'
    implementation 'com.appboy:appboy-segment-integration:15.0.1'

    // Dependencies for HTML Parser
    implementation 'org.jsoup:jsoup:1.16.1'

    // GLIDE
    final glide_version = "4.16.0"
    // webpdecoder
    implementation "com.github.zjupure:webpdecoder:2.6.$glide_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    //Compose Coil
    implementation("io.coil-kt:coil-compose:2.6.0")

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:32.8.1')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-inappmessaging-display'
    implementation 'com.google.firebase:firebase-perf'
    implementation 'com.google.firebase:firebase-config-ktx'

    // Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:1.4.3"
    implementation "androidx.compose.material:material:1.6.2"
    debugImplementation "androidx.compose.ui:ui-tooling:1.4.3"
    implementation "androidx.compose.runtime:runtime-rxjava2:$compose_version"
    implementation 'androidx.activity:activity-compose:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout-compose:1.0.1'
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.30.1"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.2"

    // Coroutines
    def coroutines = '1.7.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$coroutines"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"

    // Paging 3 for compose dependency
    implementation "androidx.paging:paging-compose:3.3.0"
    implementation "androidx.paging:paging-testing:3.3.0"

    // Lottie animations
    implementation 'com.airbnb.android:lottie:6.6.6'
    implementation "com.airbnb.android:lottie-compose:6.6.6"

    // Testing
    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.robolectric:robolectric:4.8'
    testImplementation "androidx.test:core:1.4.0"
    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    testImplementation 'androidx.compose.ui:ui-test-junit4:1.3.3'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.3.3'
    def mockkVersion = '1.13.4'
    testImplementation "io.mockk:mockk-android:$mockkVersion"
    testImplementation "io.mockk:mockk-agent:$mockkVersion"

    def espresso = '3.4.0'
    androidTestImplementation ('androidx.test.espresso:espresso-contrib:' + espresso) {
        exclude module: "protobuf-lite"
    }
    androidTestImplementation 'androidx.test.espresso:espresso-core:' + espresso
    androidTestImplementation 'androidx.test.espresso:espresso-intents:' + espresso
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // Desugaring Java 8 to < API 26
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    // Statsig
    implementation 'com.github.statsig-io:android-sdk:4.37.+'
}

// SHA and timestamp caching courtesy of https://github.com/gdg-x/frisbee/blob/develop/app/build.gradle#L193-L218
def commitSha() {
    def file = new File(project.buildDir, "commit-sha.txt")
    if (file.exists()) {
        return file.text
    }

    def value = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

    file.parentFile.mkdirs()
    file.text = value
    return value
}

def buildDate() {
    def file = new File(project.buildDir, "build-date.txt")

    def date = new Date()
    def value = date.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

    file.parentFile.mkdirs()
    file.text = value
    return value
}

// Copy google-services.json from variant directory to root of app
gradle.taskGraph.beforeTask { Task task ->
    if (task.name ==~ /process.*GoogleServices/) {
        android.applicationVariants.all { variant ->
            if (task.name ==~ /(?i)process${variant.name}GoogleServices/) {
                copy {
                    from "src/${variant.name}"
                    into '.'
                    include 'google-services.json'
                }
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'

apply plugin: 'shot'
shot {
    useComposer = false
}